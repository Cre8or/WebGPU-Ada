pragma Ada_2012;

pragma Style_Checks (Off);
pragma Warnings (Off, "-gnatwu");

with Interfaces.C; use Interfaces.C;
with bits_stdint_uintn_h;
with System;
with stddef_h;
with bits_stdint_intn_h;
with Interfaces.C.Strings;

package webgpu_h is


	type T_Size   is new Interfaces.C.size_t;

	subtype T_Chars_Ptr is Interfaces.C.Strings.chars_ptr;

	type T_UInt32 is mod 2**32
	with Convention => C;

	type T_UInt64 is mod 2**64
	with Convention => C;

	subtype T_Address is System.Address;





   --  arg-macro: function WGPU_MAKE_INIT_STRUCT (type, value)
   --    return type value;
   --  unsupported macro: WGPU_ARRAY_LAYER_COUNT_UNDEFINED UINT32_MAX
   --  unsupported macro: WGPU_COPY_STRIDE_UNDEFINED UINT32_MAX
   --  unsupported macro: WGPU_DEPTH_SLICE_UNDEFINED UINT32_MAX
   --  unsupported macro: WGPU_LIMIT_U32_UNDEFINED UINT32_MAX
   --  unsupported macro: WGPU_LIMIT_U64_UNDEFINED UINT64_MAX
   --  unsupported macro: WGPU_MIP_LEVEL_COUNT_UNDEFINED UINT32_MAX
   --  unsupported macro: WGPU_QUERY_SET_INDEX_UNDEFINED UINT32_MAX
   --  unsupported macro: WGPU_STRLEN SIZE_MAX
   --  unsupported macro: WGPU_WHOLE_MAP_SIZE SIZE_MAX
   --  unsupported macro: WGPU_WHOLE_SIZE UINT64_MAX
   WGPU_COMMA : constant := 0;  --  webgpu.h:1100
   --  unsupported macro: WGPU_ADAPTER_PROPERTIES_D3D_INIT WGPU_MAKE_INIT_STRUCT(WGPUAdapterPropertiesD3D, { { nullptr WGPU_COMMA WGPUSType_AdapterPropertiesD3D} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_ADAPTER_PROPERTIES_VK_INIT WGPU_MAKE_INIT_STRUCT(WGPUAdapterPropertiesVk, { { nullptr WGPU_COMMA WGPUSType_AdapterPropertiesVk} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_BIND_GROUP_ENTRY_INIT WGPU_MAKE_INIT_STRUCT(WGPUBindGroupEntry, { nullptr WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA 0 WGPU_COMMA WGPU_WHOLE_SIZE WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_BLEND_COMPONENT_INIT WGPU_MAKE_INIT_STRUCT(WGPUBlendComponent, { WGPUBlendOperation_Add WGPU_COMMA WGPUBlendFactor_One WGPU_COMMA WGPUBlendFactor_Zero WGPU_COMMA })
   --  unsupported macro: WGPU_BUFFER_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUBufferBindingLayout, { nullptr WGPU_COMMA WGPUBufferBindingType_Undefined WGPU_COMMA false WGPU_COMMA 0 WGPU_COMMA })
   --  unsupported macro: WGPU_COLOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUColor, { {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_WGSL_BLOCKLIST_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnWGSLBlocklist, { { nullptr WGPU_COMMA WGPUSType_DawnWGSLBlocklist} WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_WIRE_WGSL_CONTROL_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnWireWGSLControl, { { nullptr WGPU_COMMA WGPUSType_DawnWireWGSLControl} WGPU_COMMA false WGPU_COMMA false WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_DRM_FORMAT_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUDrmFormatProperties, { {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_EXTENT_2D_INIT WGPU_MAKE_INIT_STRUCT(WGPUExtent2D, { {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_EXTENT_3D_INIT WGPU_MAKE_INIT_STRUCT(WGPUExtent3D, { {} WGPU_COMMA 1 WGPU_COMMA 1 WGPU_COMMA })
   --  unsupported macro: WGPU_FORMAT_CAPABILITIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUFormatCapabilities, { nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_FUTURE_INIT WGPU_MAKE_INIT_STRUCT(WGPUFuture, { {} WGPU_COMMA })
   --  unsupported macro: WGPU_INSTANCE_FEATURES_INIT WGPU_MAKE_INIT_STRUCT(WGPUInstanceFeatures, { nullptr WGPU_COMMA false WGPU_COMMA 0 WGPU_COMMA })
   --  unsupported macro: WGPU_LIMITS_INIT WGPU_MAKE_INIT_STRUCT(T_Device_Limits, { WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U64_UNDEFINED WGPU_COMMA WGPU_LIMIT_U64_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U64_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA })
   --  unsupported macro: WGPU_MEMORY_HEAP_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUMemoryHeapInfo, { {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_MULTISAMPLE_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUMultisampleState, { nullptr WGPU_COMMA 1 WGPU_COMMA 0xFFFFFFFF WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_ORIGIN_2D_INIT WGPU_MAKE_INIT_STRUCT(WGPUOrigin2D, { 0 WGPU_COMMA 0 WGPU_COMMA })
   --  unsupported macro: WGPU_ORIGIN_3D_INIT WGPU_MAKE_INIT_STRUCT(WGPUOrigin3D, { 0 WGPU_COMMA 0 WGPU_COMMA 0 WGPU_COMMA })
   --  unsupported macro: WGPU_PRIMITIVE_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUPrimitiveState, { nullptr WGPU_COMMA WGPUPrimitiveTopology_TriangleList WGPU_COMMA WGPUIndexFormat_Undefined WGPU_COMMA WGPUFrontFace_CCW WGPU_COMMA WGPUCullMode_None WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_SAMPLER_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUSamplerBindingLayout, { nullptr WGPU_COMMA WGPUSamplerBindingType_Undefined WGPU_COMMA })
   --  unsupported macro: WGPU_SHADER_SOURCE_SPIRV_INIT WGPU_MAKE_INIT_STRUCT(WGPUShaderSourceSPIRV, { { nullptr WGPU_COMMA WGPUSType_ShaderSourceSPIRV} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_STENCIL_FACE_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUStencilFaceState, { WGPUCompareFunction_Always WGPU_COMMA WGPUStencilOperation_Keep WGPU_COMMA WGPUStencilOperation_Keep WGPU_COMMA WGPUStencilOperation_Keep WGPU_COMMA })
   --  unsupported macro: WGPU_STRING_VIEW_INIT WGPU_MAKE_INIT_STRUCT(T_WGPUStringView, { nullptr WGPU_COMMA WGPU_STRLEN WGPU_COMMA })
   --  unsupported macro: WGPU_SUPPORTED_FEATURES_INIT WGPU_MAKE_INIT_STRUCT(WGPUSupportedFeatures, { {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_CAPABILITIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceCapabilities, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_CONFIGURATION_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceConfiguration, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA WGPUTextureUsage_RenderAttachment WGPU_COMMA 0 WGPU_COMMA nullptr WGPU_COMMA WGPUCompositeAlphaMode_Auto WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA WGPUPresentMode_Fifo WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_TEXTURE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceTexture, { {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_TEXTURE_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUTextureBindingLayout, { nullptr WGPU_COMMA WGPUTextureSampleType_Undefined WGPU_COMMA WGPUTextureViewDimension_2D WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_TEXTURE_DATA_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUTextureDataLayout, { nullptr WGPU_COMMA 0 WGPU_COMMA WGPU_COPY_STRIDE_UNDEFINED WGPU_COMMA WGPU_COPY_STRIDE_UNDEFINED WGPU_COMMA })
   --  unsupported macro: WGPU_VERTEX_ATTRIBUTE_INIT WGPU_MAKE_INIT_STRUCT(WGPUVertexAttribute, { {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_Y_CB_CR_VK_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUYCbCrVkDescriptor, { { nullptr WGPU_COMMA WGPUSType_YCbCrVkDescriptor} WGPU_COMMA 0 WGPU_COMMA 0 WGPU_COMMA 0 WGPU_COMMA 0 WGPU_COMMA 0 WGPU_COMMA 0 WGPU_COMMA 0 WGPU_COMMA 0 WGPU_COMMA 0 WGPU_COMMA WGPUFilterMode_Nearest WGPU_COMMA false WGPU_COMMA 0 WGPU_COMMA })
   --  unsupported macro: WGPU_ADAPTER_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUAdapterInfo, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_BIND_GROUP_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUBindGroupDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_BLEND_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUBlendState, { WGPU_BLEND_COMPONENT_INIT WGPU_COMMA WGPU_BLEND_COMPONENT_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_BUFFER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUBufferDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_COMPILATION_MESSAGE_INIT WGPU_MAKE_INIT_STRUCT(WGPUCompilationMessage, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_CONSTANT_ENTRY_INIT WGPU_MAKE_INIT_STRUCT(WGPUConstantEntry, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_DEPTH_STENCIL_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUDepthStencilState, { nullptr WGPU_COMMA {} WGPU_COMMA WGPUOptionalBool_Undefined WGPU_COMMA WGPUCompareFunction_Undefined WGPU_COMMA WGPU_STENCIL_FACE_STATE_INIT WGPU_COMMA WGPU_STENCIL_FACE_STATE_INIT WGPU_COMMA 0xFFFFFFFF WGPU_COMMA 0xFFFFFFFF WGPU_COMMA 0 WGPU_COMMA 0.0f WGPU_COMMA 0.0f WGPU_COMMA })
   --  unsupported macro: WGPU_FUTURE_WAIT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUFutureWaitInfo, { WGPU_FUTURE_INIT WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_IMAGE_COPY_BUFFER_INIT WGPU_MAKE_INIT_STRUCT(WGPUImageCopyBuffer, { WGPU_TEXTURE_DATA_LAYOUT_INIT WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_IMAGE_COPY_TEXTURE_INIT WGPU_MAKE_INIT_STRUCT(WGPUImageCopyTexture, { {} WGPU_COMMA 0 WGPU_COMMA WGPU_ORIGIN_3D_INIT WGPU_COMMA WGPUTextureAspect_All WGPU_COMMA })
   --  unsupported macro: WGPU_INSTANCE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(T_WGPUInstanceDescriptor, { nullptr WGPU_COMMA WGPU_INSTANCE_FEATURES_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_QUERY_SET_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUQuerySetDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_QUEUE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(T_WGPUQueueDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_REQUIRED_LIMITS_INIT WGPU_MAKE_INIT_STRUCT(T_WGPURequiredLimits, { nullptr WGPU_COMMA WGPU_LIMITS_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_SAMPLER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSamplerDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA WGPUAddressMode_ClampToEdge WGPU_COMMA WGPUAddressMode_ClampToEdge WGPU_COMMA WGPUAddressMode_ClampToEdge WGPU_COMMA WGPUFilterMode_Nearest WGPU_COMMA WGPUFilterMode_Nearest WGPU_COMMA WGPUMipmapFilterMode_Nearest WGPU_COMMA 0.0f WGPU_COMMA 32.0f WGPU_COMMA WGPUCompareFunction_Undefined WGPU_COMMA 1 WGPU_COMMA })
   --  unsupported macro: WGPU_SHADER_SOURCE_WGSL_INIT WGPU_MAKE_INIT_STRUCT(WGPUShaderSourceWGSL, { { nullptr WGPU_COMMA WGPUSType_ShaderSourceWGSL} WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_SUPPORTED_LIMITS_INIT WGPU_MAKE_INIT_STRUCT(T_WGPUSupportedLimits, { nullptr WGPU_COMMA WGPU_LIMITS_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_TEXTURE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUTextureDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA {} WGPU_COMMA WGPUTextureDimension_2D WGPU_COMMA WGPU_EXTENT_3D_INIT WGPU_COMMA {} WGPU_COMMA 1 WGPU_COMMA 1 WGPU_COMMA 0 WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_VERTEX_BUFFER_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUVertexBufferLayout, { {} WGPU_COMMA WGPUVertexStepMode_Vertex WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_COLOR_TARGET_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUColorTargetState, { nullptr WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA WGPUColorWriteMask_All WGPU_COMMA })
   --  unsupported macro: WGPU_COMPILATION_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUCompilationInfo, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_DEVICE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(T_WGPUDeviceDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA 0 WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA WGPU_QUEUE_DESCRIPTOR_INIT WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA WGPU_DEVICE_LOST_CALLBACK_INFO_INIT WGPU_COMMA WGPU_UNCAPTURED_ERROR_CALLBACK_INFO_INIT WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_RENDER_PASS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_VERTEX_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUVertexState, { nullptr WGPU_COMMA {} WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_FRAGMENT_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUFragmentState, { nullptr WGPU_COMMA {} WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_BUFFER_MAP_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUBufferMapCallbackInfo2, { nullptr WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_COMPILATION_INFO_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUCompilationInfoCallbackInfo2, { nullptr WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_CREATE_COMPUTE_PIPELINE_ASYNC_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUCreateComputePipelineAsyncCallbackInfo2, { nullptr WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_CREATE_RENDER_PIPELINE_ASYNC_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUCreateRenderPipelineAsyncCallbackInfo2, { nullptr WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_DEVICE_LOST_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(T_WGPUDeviceLostCallbackInfo2, { nullptr WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_POP_ERROR_SCOPE_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUPopErrorScopeCallbackInfo2, { nullptr WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_QUEUE_WORK_DONE_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPUQueueWorkDoneCallbackInfo2, { nullptr WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_REQUEST_ADAPTER_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPURequestAdapterCallbackInfo2, { nullptr WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_REQUEST_DEVICE_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(WGPURequestDeviceCallbackInfo2, { nullptr WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_UNCAPTURED_ERROR_CALLBACK_INFO_2_INIT WGPU_MAKE_INIT_STRUCT(T_WGPUUncapturedErrorCallbackInfo2, { nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_INTERNAL__HAVE_EMDAWNWEBGPU_HEADER_INIT WGPU_MAKE_INIT_STRUCT(WGPUINTERNAL__HAVE_EMDAWNWEBGPU_HEADER, { false WGPU_COMMA })
   --  unsupported macro: WGPU_BUFFER_HOST_MAPPED_POINTER_INIT WGPU_MAKE_INIT_STRUCT(WGPUBufferHostMappedPointer, { { nullptr WGPU_COMMA WGPUSType_BufferHostMappedPointer} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_BUFFER_MAP_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUBufferMapCallbackInfo, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_COLOR_TARGET_STATE_EXPAND_RESOLVE_TEXTURE_DAWN_INIT WGPU_MAKE_INIT_STRUCT(WGPUColorTargetStateExpandResolveTextureDawn, { { nullptr WGPU_COMMA WGPUSType_ColorTargetStateExpandResolveTextureDawn} WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_COMPILATION_INFO_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUCompilationInfoCallbackInfo, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_COMPUTE_PASS_TIMESTAMP_WRITES_INIT WGPU_MAKE_INIT_STRUCT(WGPUComputePassTimestampWrites, { {} WGPU_COMMA WGPU_QUERY_SET_INDEX_UNDEFINED WGPU_COMMA WGPU_QUERY_SET_INDEX_UNDEFINED WGPU_COMMA })
   --  unsupported macro: WGPU_COPY_TEXTURE_FOR_BROWSER_OPTIONS_INIT WGPU_MAKE_INIT_STRUCT(WGPUCopyTextureForBrowserOptions, { nullptr WGPU_COMMA false WGPU_COMMA false WGPU_COMMA WGPUAlphaMode_Unpremultiplied WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA WGPUAlphaMode_Unpremultiplied WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_CREATE_COMPUTE_PIPELINE_ASYNC_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUCreateComputePipelineAsyncCallbackInfo, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_CREATE_RENDER_PIPELINE_ASYNC_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUCreateRenderPipelineAsyncCallbackInfo, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_ADAPTER_PROPERTIES_POWER_PREFERENCE_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnAdapterPropertiesPowerPreference, { { nullptr WGPU_COMMA WGPUSType_DawnAdapterPropertiesPowerPreference} WGPU_COMMA WGPUPowerPreference_Undefined WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_BUFFER_DESCRIPTOR_ERROR_INFO_FROM_WIRE_CLIENT_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnBufferDescriptorErrorInfoFromWireClient, { { nullptr WGPU_COMMA WGPUSType_DawnBufferDescriptorErrorInfoFromWireClient} WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_COMPUTE_PIPELINE_FULL_SUBGROUPS_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnComputePipelineFullSubgroups, { { nullptr WGPU_COMMA WGPUSType_DawnComputePipelineFullSubgroups} WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_ENCODER_INTERNAL_USAGE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnEncoderInternalUsageDescriptor, { { nullptr WGPU_COMMA WGPUSType_DawnEncoderInternalUsageDescriptor} WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_EXPERIMENTAL_IMMEDIATE_DATA_LIMITS_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnExperimentalImmediateDataLimits, { { nullptr WGPU_COMMA WGPUSType_DawnExperimentalImmediateDataLimits} WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_EXPERIMENTAL_SUBGROUP_LIMITS_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnExperimentalSubgroupLimits, { { nullptr WGPU_COMMA WGPUSType_DawnExperimentalSubgroupLimits} WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_RENDER_PASS_COLOR_ATTACHMENT_RENDER_TO_SINGLE_SAMPLED_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnRenderPassColorAttachmentRenderToSingleSampled, { { nullptr WGPU_COMMA WGPUSType_DawnRenderPassColorAttachmentRenderToSingleSampled} WGPU_COMMA 1 WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_SHADER_MODULE_SPIRV_OPTIONS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnShaderModuleSPIRVOptionsDescriptor, { { nullptr WGPU_COMMA WGPUSType_DawnShaderModuleSPIRVOptionsDescriptor} WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_TEXTURE_INTERNAL_USAGE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnTextureInternalUsageDescriptor, { { nullptr WGPU_COMMA WGPUSType_DawnTextureInternalUsageDescriptor} WGPU_COMMA WGPUTextureUsage_None WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_TOGGLES_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnTogglesDescriptor, { { nullptr WGPU_COMMA WGPUSType_DawnTogglesDescriptor} WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_DEVICE_LOST_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(T_WGPUDeviceLostCallbackInfo, { nullptr WGPU_COMMA WGPUCallbackMode_WaitAnyOnly WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_EXTERNAL_TEXTURE_BINDING_ENTRY_INIT WGPU_MAKE_INIT_STRUCT(WGPUExternalTextureBindingEntry, { { nullptr WGPU_COMMA WGPUSType_ExternalTextureBindingEntry} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_EXTERNAL_TEXTURE_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUExternalTextureBindingLayout, { { nullptr WGPU_COMMA WGPUSType_ExternalTextureBindingLayout} WGPU_COMMA })
   --  unsupported macro: WGPU_PIPELINE_LAYOUT_STORAGE_ATTACHMENT_INIT WGPU_MAKE_INIT_STRUCT(WGPUPipelineLayoutStorageAttachment, { nullptr WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_POP_ERROR_SCOPE_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUPopErrorScopeCallbackInfo, { nullptr WGPU_COMMA WGPUCallbackMode_WaitAnyOnly WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_QUEUE_WORK_DONE_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUQueueWorkDoneCallbackInfo, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_RENDER_PASS_DEPTH_STENCIL_ATTACHMENT_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassDepthStencilAttachment, { {} WGPU_COMMA WGPULoadOp_Undefined WGPU_COMMA WGPUStoreOp_Undefined WGPU_COMMA NAN WGPU_COMMA false WGPU_COMMA WGPULoadOp_Undefined WGPU_COMMA WGPUStoreOp_Undefined WGPU_COMMA 0 WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_RENDER_PASS_DESCRIPTOR_EXPAND_RESOLVE_RECT_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassDescriptorExpandResolveRect, { { nullptr WGPU_COMMA WGPUSType_RenderPassDescriptorExpandResolveRect} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_RENDER_PASS_MAX_DRAW_COUNT_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassMaxDrawCount, { { nullptr WGPU_COMMA WGPUSType_RenderPassMaxDrawCount} WGPU_COMMA 50000000 WGPU_COMMA })
   --  unsupported macro: WGPU_RENDER_PASS_TIMESTAMP_WRITES_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassTimestampWrites, { {} WGPU_COMMA WGPU_QUERY_SET_INDEX_UNDEFINED WGPU_COMMA WGPU_QUERY_SET_INDEX_UNDEFINED WGPU_COMMA })
   --  unsupported macro: WGPU_REQUEST_ADAPTER_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPURequestAdapterCallbackInfo, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_REQUEST_ADAPTER_OPTIONS_INIT WGPU_MAKE_INIT_STRUCT(T_WGPURequestAdapterOptions, { nullptr WGPU_COMMA nullptr WGPU_COMMA WGPUPowerPreference_Undefined WGPU_COMMA WGPUBackendType_Undefined WGPU_COMMA false WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_REQUEST_DEVICE_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPURequestDeviceCallbackInfo, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHADER_MODULE_COMPILATION_OPTIONS_INIT WGPU_MAKE_INIT_STRUCT(WGPUShaderModuleCompilationOptions, { { nullptr WGPU_COMMA WGPUSType_ShaderModuleCompilationOptions} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_BUFFER_MEMORY_BEGIN_ACCESS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedBufferMemoryBeginAccessDescriptor, { nullptr WGPU_COMMA {} WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_BUFFER_MEMORY_END_ACCESS_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedBufferMemoryEndAccessState, { nullptr WGPU_COMMA {} WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_BUFFER_MEMORY_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedBufferMemoryProperties, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_FENCE_DXGI_SHARED_HANDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceDXGISharedHandleDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedFenceDXGISharedHandleDescriptor} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_FENCE_DXGI_SHARED_HANDLE_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceDXGISharedHandleExportInfo, { { nullptr WGPU_COMMA WGPUSType_SharedFenceDXGISharedHandleExportInfo} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_FENCE_MTL_SHARED_EVENT_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceMTLSharedEventDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedFenceMTLSharedEventDescriptor} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_FENCE_MTL_SHARED_EVENT_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceMTLSharedEventExportInfo, { { nullptr WGPU_COMMA WGPUSType_SharedFenceMTLSharedEventExportInfo} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_FENCE_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT(T_WGPUSharedFenceExportInfo, { nullptr WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_FENCE_SYNC_FD_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceSyncFDDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedFenceSyncFDDescriptor} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_FENCE_SYNC_FD_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceSyncFDExportInfo, { { nullptr WGPU_COMMA WGPUSType_SharedFenceSyncFDExportInfo} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_FENCE_VK_SEMAPHORE_OPAQUE_FD_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedFenceVkSemaphoreOpaqueFDDescriptor} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_FENCE_VK_SEMAPHORE_OPAQUE_FD_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo, { { nullptr WGPU_COMMA WGPUSType_SharedFenceVkSemaphoreOpaqueFDExportInfo} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_FENCE_VK_SEMAPHORE_ZIRCON_HANDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceVkSemaphoreZirconHandleDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedFenceVkSemaphoreZirconHandleDescriptor} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_FENCE_VK_SEMAPHORE_ZIRCON_HANDLE_EXPORT_INFO_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceVkSemaphoreZirconHandleExportInfo, { { nullptr WGPU_COMMA WGPUSType_SharedFenceVkSemaphoreZirconHandleExportInfo} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_D3D_SWAPCHAIN_BEGIN_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryD3DSwapchainBeginState, { { nullptr WGPU_COMMA WGPUSType_SharedTextureMemoryD3DSwapchainBeginState} WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_DXGI_SHARED_HANDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryDXGISharedHandleDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedTextureMemoryDXGISharedHandleDescriptor} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_EGL_IMAGE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryEGLImageDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedTextureMemoryEGLImageDescriptor} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_IO_SURFACE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryIOSurfaceDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedTextureMemoryIOSurfaceDescriptor} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_A_HARDWARE_BUFFER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryAHardwareBufferDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedTextureMemoryAHardwareBufferDescriptor} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_BEGIN_ACCESS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryBeginAccessDescriptor, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_DMA_BUF_PLANE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryDmaBufPlane, { {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_END_ACCESS_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryEndAccessState, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_OPAQUE_FD_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryOpaqueFDDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedTextureMemoryOpaqueFDDescriptor} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_VK_DEDICATED_ALLOCATION_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedTextureMemoryVkDedicatedAllocationDescriptor} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_VK_IMAGE_LAYOUT_BEGIN_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryVkImageLayoutBeginState, { { nullptr WGPU_COMMA WGPUSType_SharedTextureMemoryVkImageLayoutBeginState} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_VK_IMAGE_LAYOUT_END_STATE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryVkImageLayoutEndState, { { nullptr WGPU_COMMA WGPUSType_SharedTextureMemoryVkImageLayoutEndState} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_ZIRCON_HANDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryZirconHandleDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedTextureMemoryZirconHandleDescriptor} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_STATIC_SAMPLER_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUStaticSamplerBindingLayout, { { nullptr WGPU_COMMA WGPUSType_StaticSamplerBindingLayout} WGPU_COMMA {} WGPU_COMMA WGPU_LIMIT_U32_UNDEFINED WGPU_COMMA })
   --  unsupported macro: WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_INIT WGPU_MAKE_INIT_STRUCT(WGPUStorageTextureBindingLayout, { nullptr WGPU_COMMA WGPUStorageTextureAccess_Undefined WGPU_COMMA WGPUTextureFormat_Undefined WGPU_COMMA WGPUTextureViewDimension_2D WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_DESCRIPTOR_FROM_WINDOWS_CORE_WINDOW_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceDescriptorFromWindowsCoreWindow, { { nullptr WGPU_COMMA WGPUSType_SurfaceDescriptorFromWindowsCoreWindow} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_DESCRIPTOR_FROM_WINDOWS_SWAP_CHAIN_PANEL_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceDescriptorFromWindowsSwapChainPanel, { { nullptr WGPU_COMMA WGPUSType_SurfaceDescriptorFromWindowsSwapChainPanel} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_SOURCE_XCB_WINDOW_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceXCBWindow, { { nullptr WGPU_COMMA WGPUSType_SurfaceSourceXCBWindow} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_SOURCE_ANDROID_NATIVE_WINDOW_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceAndroidNativeWindow, { { nullptr WGPU_COMMA WGPUSType_SurfaceSourceAndroidNativeWindow} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_SOURCE_METAL_LAYER_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceMetalLayer, { { nullptr WGPU_COMMA WGPUSType_SurfaceSourceMetalLayer} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_SOURCE_WAYLAND_SURFACE_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceWaylandSurface, { { nullptr WGPU_COMMA WGPUSType_SurfaceSourceWaylandSurface} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_SOURCE_WINDOWS_HWND_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceWindowsHWND, { { nullptr WGPU_COMMA WGPUSType_SurfaceSourceWindowsHWND} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_SOURCE_XLIB_WINDOW_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceXlibWindow, { { nullptr WGPU_COMMA WGPUSType_SurfaceSourceXlibWindow} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_TEXTURE_BINDING_VIEW_DIMENSION_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUTextureBindingViewDimensionDescriptor, { { nullptr WGPU_COMMA WGPUSType_TextureBindingViewDimensionDescriptor} WGPU_COMMA WGPUTextureViewDimension_Undefined WGPU_COMMA })
   --  unsupported macro: WGPU_UNCAPTURED_ERROR_CALLBACK_INFO_INIT WGPU_MAKE_INIT_STRUCT(T_WGPUUncapturedErrorCallbackInfo, { nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_A_HARDWARE_BUFFER_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUAHardwareBufferProperties, { WGPU_Y_CB_CR_VK_DESCRIPTOR_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_ADAPTER_PROPERTIES_MEMORY_HEAPS_INIT WGPU_MAKE_INIT_STRUCT(WGPUAdapterPropertiesMemoryHeaps, { { nullptr WGPU_COMMA WGPUSType_AdapterPropertiesMemoryHeaps} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_BIND_GROUP_LAYOUT_ENTRY_INIT WGPU_MAKE_INIT_STRUCT(WGPUBindGroupLayoutEntry, { nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA WGPU_BUFFER_BINDING_LAYOUT_INIT WGPU_COMMA WGPU_SAMPLER_BINDING_LAYOUT_INIT WGPU_COMMA WGPU_TEXTURE_BINDING_LAYOUT_INIT WGPU_COMMA WGPU_STORAGE_TEXTURE_BINDING_LAYOUT_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_COMMAND_BUFFER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUCommandBufferDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_COMMAND_ENCODER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(T_WGPUCommandEncoderDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_COMPUTE_PASS_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUComputePassDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_DAWN_CACHE_DEVICE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUDawnCacheDeviceDescriptor, { { nullptr WGPU_COMMA WGPUSType_DawnCacheDeviceDescriptor} WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA nullptr WGPU_COMMA })
   --  unsupported macro: WGPU_DRM_FORMAT_CAPABILITIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUDrmFormatCapabilities, { { nullptr WGPU_COMMA WGPUSType_DrmFormatCapabilities} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_EXTERNAL_TEXTURE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUExternalTextureDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA {} WGPU_COMMA nullptr WGPU_COMMA WGPU_ORIGIN_2D_INIT WGPU_COMMA WGPU_EXTENT_2D_INIT WGPU_COMMA WGPU_ORIGIN_2D_INIT WGPU_COMMA WGPU_EXTENT_2D_INIT WGPU_COMMA WGPU_EXTENT_2D_INIT WGPU_COMMA false WGPU_COMMA nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA false WGPU_COMMA WGPUExternalTextureRotation_Rotate0Degrees WGPU_COMMA })
   --  unsupported macro: WGPU_IMAGE_COPY_EXTERNAL_TEXTURE_INIT WGPU_MAKE_INIT_STRUCT(WGPUImageCopyExternalTexture, { nullptr WGPU_COMMA {} WGPU_COMMA WGPU_ORIGIN_3D_INIT WGPU_COMMA WGPU_EXTENT_2D_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_PIPELINE_LAYOUT_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUPipelineLayoutDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA 0 WGPU_COMMA })
   --  unsupported macro: WGPU_PIPELINE_LAYOUT_PIXEL_LOCAL_STORAGE_INIT WGPU_MAKE_INIT_STRUCT(WGPUPipelineLayoutPixelLocalStorage, { { nullptr WGPU_COMMA WGPUSType_PipelineLayoutPixelLocalStorage} WGPU_COMMA {} WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_RENDER_BUNDLE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderBundleDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_RENDER_BUNDLE_ENCODER_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderBundleEncoderDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA WGPUTextureFormat_Undefined WGPU_COMMA 1 WGPU_COMMA false WGPU_COMMA false WGPU_COMMA })
   --  unsupported macro: WGPU_RENDER_PASS_COLOR_ATTACHMENT_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassColorAttachment, { nullptr WGPU_COMMA nullptr WGPU_COMMA WGPU_DEPTH_SLICE_UNDEFINED WGPU_COMMA nullptr WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA WGPU_COLOR_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_RENDER_PASS_STORAGE_ATTACHMENT_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassStorageAttachment, { nullptr WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA WGPU_COLOR_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_SHADER_MODULE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUShaderModuleDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_BUFFER_MEMORY_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedBufferMemoryDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_FENCE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedFenceDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_A_HARDWARE_BUFFER_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryAHardwareBufferProperties, { { nullptr WGPU_COMMA WGPUSType_SharedTextureMemoryAHardwareBufferProperties} WGPU_COMMA WGPU_Y_CB_CR_VK_DESCRIPTOR_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_DMA_BUF_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryDmaBufDescriptor, { { nullptr WGPU_COMMA WGPUSType_SharedTextureMemoryDmaBufDescriptor} WGPU_COMMA WGPU_EXTENT_3D_INIT WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SHARED_TEXTURE_MEMORY_PROPERTIES_INIT WGPU_MAKE_INIT_STRUCT(WGPUSharedTextureMemoryProperties, { nullptr WGPU_COMMA {} WGPU_COMMA WGPU_EXTENT_3D_INIT WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_SURFACE_SOURCE_CANVAS_HTML_SELECTOR__EMSCRIPTEN_INIT WGPU_MAKE_INIT_STRUCT(WGPUSurfaceSourceCanvasHTMLSelector_Emscripten, { { nullptr WGPU_COMMA WGPUSType_SurfaceSourceCanvasHTMLSelector_Emscripten} WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_TEXTURE_VIEW_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUTextureViewDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA WGPUTextureFormat_Undefined WGPU_COMMA WGPUTextureViewDimension_Undefined WGPU_COMMA 0 WGPU_COMMA WGPU_MIP_LEVEL_COUNT_UNDEFINED WGPU_COMMA 0 WGPU_COMMA WGPU_ARRAY_LAYER_COUNT_UNDEFINED WGPU_COMMA WGPUTextureAspect_All WGPU_COMMA WGPUTextureUsage_None WGPU_COMMA })
   --  unsupported macro: WGPU_BIND_GROUP_LAYOUT_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUBindGroupLayoutDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA {} WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_PROGRAMMABLE_STAGE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUProgrammableStageDescriptor, { nullptr WGPU_COMMA {} WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_RENDER_PASS_PIXEL_LOCAL_STORAGE_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPassPixelLocalStorage, { { nullptr WGPU_COMMA WGPUSType_RenderPassPixelLocalStorage} WGPU_COMMA {} WGPU_COMMA 0 WGPU_COMMA {} WGPU_COMMA })
   --  unsupported macro: WGPU_COMPUTE_PIPELINE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPUComputePipelineDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA nullptr WGPU_COMMA WGPU_PROGRAMMABLE_STAGE_DESCRIPTOR_INIT WGPU_COMMA })
   --  unsupported macro: WGPU_RENDER_PIPELINE_DESCRIPTOR_INIT WGPU_MAKE_INIT_STRUCT(WGPURenderPipelineDescriptor, { nullptr WGPU_COMMA WGPU_STRING_VIEW_INIT WGPU_COMMA nullptr WGPU_COMMA WGPU_VERTEX_STATE_INIT WGPU_COMMA WGPU_PRIMITIVE_STATE_INIT WGPU_COMMA nullptr WGPU_COMMA WGPU_MULTISAMPLE_STATE_INIT WGPU_COMMA nullptr WGPU_COMMA })

  -- ==========================================================
  -- COPIED FROM: dawn/out/Debug/gen/include/dawn/webgpu.h
  -- ==========================================================
  -- BSD 3-Clause License
  -- Copyright (c) 2019, "WebGPU native" developers
  -- All rights reserved.
  -- Redistribution and use in source and binary forms, with or without
  -- modification, are permitted provided that the following conditions are met:
  -- 1. Redistributions of source code must retain the above copyright notice, this
  --    list of conditions and the following disclaimer.
  -- 2. Redistributions in binary form must reproduce the above copyright notice,
  --    this list of conditions and the following disclaimer in the documentation
  --    and/or other materials provided with the distribution.
  -- 3. Neither the name of the copyright holder nor the names of its
  --    contributors may be used to endorse or promote products derived from
  --    this software without specific prior written permission.
  -- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  -- AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  -- IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  -- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  -- FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  -- DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  -- SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  -- CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  -- OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  -- OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   subtype WGPUFlags is T_UInt64;  -- webgpu.h:118

	type T_WGPUBool is new Boolean
	with Convention => C, Size => 32;

   type T_WGPUAdapterImpl is null record;   -- incomplete struct

   type T_WGPUAdapter is access all T_WGPUAdapterImpl;  -- webgpu.h:121

   type WGPUBindGroupImpl is null record;   -- incomplete struct

   type WGPUBindGroup is access all WGPUBindGroupImpl;  -- webgpu.h:122

   type WGPUBindGroupLayoutImpl is null record;   -- incomplete struct

   type WGPUBindGroupLayout is access all WGPUBindGroupLayoutImpl;  -- webgpu.h:123

   type WGPUBufferImpl is null record;   -- incomplete struct

   type WGPUBuffer is access all WGPUBufferImpl;  -- webgpu.h:124

   type T_WGPUCommandBufferImpl is null record;   -- incomplete struct

   type T_WGPUCommandBuffer is access all T_WGPUCommandBufferImpl;  -- webgpu.h:125

   type T_WGPUCommandEncoderImpl is null record;   -- incomplete struct

   type T_WGPUCommandEncoder is access all T_WGPUCommandEncoderImpl;  -- webgpu.h:126

   type WGPUComputePassEncoderImpl is null record;   -- incomplete struct

   type WGPUComputePassEncoder is access all WGPUComputePassEncoderImpl;  -- webgpu.h:127

   type WGPUComputePipelineImpl is null record;   -- incomplete struct

   type WGPUComputePipeline is access all WGPUComputePipelineImpl;  -- webgpu.h:128

   type T_WGPUDeviceImpl is null record;   -- incomplete struct

   type T_WGPUDevice is access all T_WGPUDeviceImpl;  -- webgpu.h:129

   type WGPUExternalTextureImpl is null record;   -- incomplete struct

   type WGPUExternalTexture is access all WGPUExternalTextureImpl;  -- webgpu.h:130

   type T_WGPUInstanceImpl is null record;   -- incomplete struct

   type T_WGPUInstance is access all T_WGPUInstanceImpl;  -- webgpu.h:131

   type WGPUPipelineLayoutImpl is null record;   -- incomplete struct

   type WGPUPipelineLayout is access all WGPUPipelineLayoutImpl;  -- webgpu.h:132

   type WGPUQuerySetImpl is null record;   -- incomplete struct

   type WGPUQuerySet is access all WGPUQuerySetImpl;  -- webgpu.h:133

   type T_WGPUQueueImpl is null record;   -- incomplete struct

   type T_WGPUQueue is access all T_WGPUQueueImpl;  -- webgpu.h:134

   type WGPURenderBundleImpl is null record;   -- incomplete struct

   type WGPURenderBundle is access all WGPURenderBundleImpl;  -- webgpu.h:135

   type WGPURenderBundleEncoderImpl is null record;   -- incomplete struct

   type WGPURenderBundleEncoder is access all WGPURenderBundleEncoderImpl;  -- webgpu.h:136

   type WGPURenderPassEncoderImpl is null record;   -- incomplete struct

   type WGPURenderPassEncoder is access all WGPURenderPassEncoderImpl;  -- webgpu.h:137

   type WGPURenderPipelineImpl is null record;   -- incomplete struct

   type WGPURenderPipeline is access all WGPURenderPipelineImpl;  -- webgpu.h:138

   type WGPUSamplerImpl is null record;   -- incomplete struct

   type WGPUSampler is access all WGPUSamplerImpl;  -- webgpu.h:139

   type WGPUShaderModuleImpl is null record;   -- incomplete struct

   type WGPUShaderModule is access all WGPUShaderModuleImpl;  -- webgpu.h:140

   type WGPUSharedBufferMemoryImpl is null record;   -- incomplete struct

   type WGPUSharedBufferMemory is access all WGPUSharedBufferMemoryImpl;  -- webgpu.h:141

   type WGPUSharedFenceImpl is null record;   -- incomplete struct

   type WGPUSharedFence is access all WGPUSharedFenceImpl;  -- webgpu.h:142

   type WGPUSharedTextureMemoryImpl is null record;   -- incomplete struct

   type WGPUSharedTextureMemory is access all WGPUSharedTextureMemoryImpl;  -- webgpu.h:143

   type T_WGPUSurfaceImpl is null record;   -- incomplete struct

   type T_WGPUSurface is access all T_WGPUSurfaceImpl;  -- webgpu.h:144

   type WGPUTextureImpl is null record;   -- incomplete struct

   type WGPUTexture is access all WGPUTextureImpl;  -- webgpu.h:145

   type WGPUTextureViewImpl is null record;   -- incomplete struct

   type WGPUTextureView is access all WGPUTextureViewImpl;  -- webgpu.h:146

  -- Structure forward declarations
   subtype WGPUWGSLFeatureName is unsigned;
   WGPUWGSLFeatureName_WGPUWGSLFeatureName_ReadonlyAndReadwriteStorageTextures : constant WGPUWGSLFeatureName := 1;
   WGPUWGSLFeatureName_WGPUWGSLFeatureName_Packed4x8IntegerDotProduct : constant WGPUWGSLFeatureName := 2;
   WGPUWGSLFeatureName_WGPUWGSLFeatureName_UnrestrictedPointerParameters : constant WGPUWGSLFeatureName := 3;
   WGPUWGSLFeatureName_WGPUWGSLFeatureName_PointerCompositeAccess : constant WGPUWGSLFeatureName := 4;
   WGPUWGSLFeatureName_WGPUWGSLFeatureName_ChromiumTestingUnimplemented : constant WGPUWGSLFeatureName := 327680;
   WGPUWGSLFeatureName_WGPUWGSLFeatureName_ChromiumTestingUnsafeExperimental : constant WGPUWGSLFeatureName := 327681;
   WGPUWGSLFeatureName_WGPUWGSLFeatureName_ChromiumTestingExperimental : constant WGPUWGSLFeatureName := 327682;
   WGPUWGSLFeatureName_WGPUWGSLFeatureName_ChromiumTestingShippedWithKillswitch : constant WGPUWGSLFeatureName := 327683;
   WGPUWGSLFeatureName_WGPUWGSLFeatureName_ChromiumTestingShipped : constant WGPUWGSLFeatureName := 327684;
   WGPUWGSLFeatureName_WGPUWGSLFeatureName_Force32 : constant WGPUWGSLFeatureName := 2147483647;  -- webgpu.h:310

   subtype WGPUAdapterType is unsigned;
   WGPUAdapterType_WGPUAdapterType_DiscreteGPU : constant WGPUAdapterType := 1;
   WGPUAdapterType_WGPUAdapterType_IntegratedGPU : constant WGPUAdapterType := 2;
   WGPUAdapterType_WGPUAdapterType_CPU : constant WGPUAdapterType := 3;
   WGPUAdapterType_WGPUAdapterType_Unknown : constant WGPUAdapterType := 4;
   WGPUAdapterType_WGPUAdapterType_Force32 : constant WGPUAdapterType := 2147483647;  -- webgpu.h:322

   subtype WGPUAddressMode is unsigned;
   WGPUAddressMode_WGPUAddressMode_Undefined : constant WGPUAddressMode := 0;
   WGPUAddressMode_WGPUAddressMode_ClampToEdge : constant WGPUAddressMode := 1;
   WGPUAddressMode_WGPUAddressMode_Repeat : constant WGPUAddressMode := 2;
   WGPUAddressMode_WGPUAddressMode_MirrorRepeat : constant WGPUAddressMode := 3;
   WGPUAddressMode_WGPUAddressMode_Force32 : constant WGPUAddressMode := 2147483647;  -- webgpu.h:329

   subtype WGPUAlphaMode is unsigned;
   WGPUAlphaMode_WGPUAlphaMode_Opaque : constant WGPUAlphaMode := 1;
   WGPUAlphaMode_WGPUAlphaMode_Premultiplied : constant WGPUAlphaMode := 2;
   WGPUAlphaMode_WGPUAlphaMode_Unpremultiplied : constant WGPUAlphaMode := 3;
   WGPUAlphaMode_WGPUAlphaMode_Force32 : constant WGPUAlphaMode := 2147483647;  -- webgpu.h:336

   subtype WGPUBackendType is unsigned;
   WGPUBackendType_WGPUBackendType_Undefined : constant WGPUBackendType := 0;
   WGPUBackendType_WGPUBackendType_Null : constant WGPUBackendType := 1;
   WGPUBackendType_WGPUBackendType_WebGPU : constant WGPUBackendType := 2;
   WGPUBackendType_WGPUBackendType_D3D11 : constant WGPUBackendType := 3;
   WGPUBackendType_WGPUBackendType_D3D12 : constant WGPUBackendType := 4;
   WGPUBackendType_WGPUBackendType_Metal : constant WGPUBackendType := 5;
   WGPUBackendType_WGPUBackendType_Vulkan : constant WGPUBackendType := 6;
   WGPUBackendType_WGPUBackendType_OpenGL : constant WGPUBackendType := 7;
   WGPUBackendType_WGPUBackendType_OpenGLES : constant WGPUBackendType := 8;
   WGPUBackendType_WGPUBackendType_Force32 : constant WGPUBackendType := 2147483647;  -- webgpu.h:342

   subtype WGPUBlendFactor is unsigned;
   WGPUBlendFactor_WGPUBlendFactor_Undefined : constant WGPUBlendFactor := 0;
   WGPUBlendFactor_WGPUBlendFactor_Zero : constant WGPUBlendFactor := 1;
   WGPUBlendFactor_WGPUBlendFactor_One : constant WGPUBlendFactor := 2;
   WGPUBlendFactor_WGPUBlendFactor_Src : constant WGPUBlendFactor := 3;
   WGPUBlendFactor_WGPUBlendFactor_OneMinusSrc : constant WGPUBlendFactor := 4;
   WGPUBlendFactor_WGPUBlendFactor_SrcAlpha : constant WGPUBlendFactor := 5;
   WGPUBlendFactor_WGPUBlendFactor_OneMinusSrcAlpha : constant WGPUBlendFactor := 6;
   WGPUBlendFactor_WGPUBlendFactor_Dst : constant WGPUBlendFactor := 7;
   WGPUBlendFactor_WGPUBlendFactor_OneMinusDst : constant WGPUBlendFactor := 8;
   WGPUBlendFactor_WGPUBlendFactor_DstAlpha : constant WGPUBlendFactor := 9;
   WGPUBlendFactor_WGPUBlendFactor_OneMinusDstAlpha : constant WGPUBlendFactor := 10;
   WGPUBlendFactor_WGPUBlendFactor_SrcAlphaSaturated : constant WGPUBlendFactor := 11;
   WGPUBlendFactor_WGPUBlendFactor_Constant : constant WGPUBlendFactor := 12;
   WGPUBlendFactor_WGPUBlendFactor_OneMinusConstant : constant WGPUBlendFactor := 13;
   WGPUBlendFactor_WGPUBlendFactor_Src1 : constant WGPUBlendFactor := 14;
   WGPUBlendFactor_WGPUBlendFactor_OneMinusSrc1 : constant WGPUBlendFactor := 15;
   WGPUBlendFactor_WGPUBlendFactor_Src1Alpha : constant WGPUBlendFactor := 16;
   WGPUBlendFactor_WGPUBlendFactor_OneMinusSrc1Alpha : constant WGPUBlendFactor := 17;
   WGPUBlendFactor_WGPUBlendFactor_Force32 : constant WGPUBlendFactor := 2147483647;  -- webgpu.h:354

   subtype WGPUBlendOperation is unsigned;
   WGPUBlendOperation_WGPUBlendOperation_Undefined : constant WGPUBlendOperation := 0;
   WGPUBlendOperation_WGPUBlendOperation_Add : constant WGPUBlendOperation := 1;
   WGPUBlendOperation_WGPUBlendOperation_Subtract : constant WGPUBlendOperation := 2;
   WGPUBlendOperation_WGPUBlendOperation_ReverseSubtract : constant WGPUBlendOperation := 3;
   WGPUBlendOperation_WGPUBlendOperation_Min : constant WGPUBlendOperation := 4;
   WGPUBlendOperation_WGPUBlendOperation_Max : constant WGPUBlendOperation := 5;
   WGPUBlendOperation_WGPUBlendOperation_Force32 : constant WGPUBlendOperation := 2147483647;  -- webgpu.h:375

   subtype WGPUBufferBindingType is unsigned;
   WGPUBufferBindingType_WGPUBufferBindingType_Undefined : constant WGPUBufferBindingType := 0;
   WGPUBufferBindingType_WGPUBufferBindingType_Uniform : constant WGPUBufferBindingType := 1;
   WGPUBufferBindingType_WGPUBufferBindingType_Storage : constant WGPUBufferBindingType := 2;
   WGPUBufferBindingType_WGPUBufferBindingType_ReadOnlyStorage : constant WGPUBufferBindingType := 3;
   WGPUBufferBindingType_WGPUBufferBindingType_Force32 : constant WGPUBufferBindingType := 2147483647;  -- webgpu.h:384

   subtype WGPUBufferMapAsyncStatus is unsigned;
   WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_Success : constant WGPUBufferMapAsyncStatus := 1;
   WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_InstanceDropped : constant WGPUBufferMapAsyncStatus := 2;
   WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_ValidationError : constant WGPUBufferMapAsyncStatus := 3;
   WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_Unknown : constant WGPUBufferMapAsyncStatus := 4;
   WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_DeviceLost : constant WGPUBufferMapAsyncStatus := 5;
   WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_DestroyedBeforeCallback : constant WGPUBufferMapAsyncStatus := 6;
   WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_UnmappedBeforeCallback : constant WGPUBufferMapAsyncStatus := 7;
   WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_MappingAlreadyPending : constant WGPUBufferMapAsyncStatus := 8;
   WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_OffsetOutOfRange : constant WGPUBufferMapAsyncStatus := 9;
   WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_SizeOutOfRange : constant WGPUBufferMapAsyncStatus := 10;
   WGPUBufferMapAsyncStatus_WGPUBufferMapAsyncStatus_Force32 : constant WGPUBufferMapAsyncStatus := 2147483647;  -- webgpu.h:391

   subtype WGPUBufferMapState is unsigned;
   WGPUBufferMapState_WGPUBufferMapState_Unmapped : constant WGPUBufferMapState := 1;
   WGPUBufferMapState_WGPUBufferMapState_Pending : constant WGPUBufferMapState := 2;
   WGPUBufferMapState_WGPUBufferMapState_Mapped : constant WGPUBufferMapState := 3;
   WGPUBufferMapState_WGPUBufferMapState_Force32 : constant WGPUBufferMapState := 2147483647;  -- webgpu.h:404

   subtype T_Callback_Mode is unsigned;
   WGPUCallbackMode_WGPUCallbackMode_WaitAnyOnly : constant T_Callback_Mode := 1;
   WGPUCallbackMode_WGPUCallbackMode_AllowProcessEvents : constant T_Callback_Mode := 2;
   WGPUCallbackMode_WGPUCallbackMode_AllowSpontaneous : constant T_Callback_Mode := 3;
   WGPUCallbackMode_WGPUCallbackMode_Force32 : constant T_Callback_Mode := 2147483647;  -- webgpu.h:410

   subtype WGPUCompareFunction is unsigned;
   WGPUCompareFunction_WGPUCompareFunction_Undefined : constant WGPUCompareFunction := 0;
   WGPUCompareFunction_WGPUCompareFunction_Never : constant WGPUCompareFunction := 1;
   WGPUCompareFunction_WGPUCompareFunction_Less : constant WGPUCompareFunction := 2;
   WGPUCompareFunction_WGPUCompareFunction_Equal : constant WGPUCompareFunction := 3;
   WGPUCompareFunction_WGPUCompareFunction_LessEqual : constant WGPUCompareFunction := 4;
   WGPUCompareFunction_WGPUCompareFunction_Greater : constant WGPUCompareFunction := 5;
   WGPUCompareFunction_WGPUCompareFunction_NotEqual : constant WGPUCompareFunction := 6;
   WGPUCompareFunction_WGPUCompareFunction_GreaterEqual : constant WGPUCompareFunction := 7;
   WGPUCompareFunction_WGPUCompareFunction_Always : constant WGPUCompareFunction := 8;
   WGPUCompareFunction_WGPUCompareFunction_Force32 : constant WGPUCompareFunction := 2147483647;  -- webgpu.h:416

   subtype WGPUCompilationInfoRequestStatus is unsigned;
   WGPUCompilationInfoRequestStatus_WGPUCompilationInfoRequestStatus_Success : constant WGPUCompilationInfoRequestStatus := 1;
   WGPUCompilationInfoRequestStatus_WGPUCompilationInfoRequestStatus_InstanceDropped : constant WGPUCompilationInfoRequestStatus := 2;
   WGPUCompilationInfoRequestStatus_WGPUCompilationInfoRequestStatus_Error : constant WGPUCompilationInfoRequestStatus := 3;
   WGPUCompilationInfoRequestStatus_WGPUCompilationInfoRequestStatus_DeviceLost : constant WGPUCompilationInfoRequestStatus := 4;
   WGPUCompilationInfoRequestStatus_WGPUCompilationInfoRequestStatus_Unknown : constant WGPUCompilationInfoRequestStatus := 5;
   WGPUCompilationInfoRequestStatus_WGPUCompilationInfoRequestStatus_Force32 : constant WGPUCompilationInfoRequestStatus := 2147483647;  -- webgpu.h:428

   subtype WGPUCompilationMessageType is unsigned;
   WGPUCompilationMessageType_WGPUCompilationMessageType_Error : constant WGPUCompilationMessageType := 1;
   WGPUCompilationMessageType_WGPUCompilationMessageType_Warning : constant WGPUCompilationMessageType := 2;
   WGPUCompilationMessageType_WGPUCompilationMessageType_Info : constant WGPUCompilationMessageType := 3;
   WGPUCompilationMessageType_WGPUCompilationMessageType_Force32 : constant WGPUCompilationMessageType := 2147483647;  -- webgpu.h:436

   subtype WGPUCompositeAlphaMode is unsigned;
   WGPUCompositeAlphaMode_WGPUCompositeAlphaMode_Auto : constant WGPUCompositeAlphaMode := 0;
   WGPUCompositeAlphaMode_WGPUCompositeAlphaMode_Opaque : constant WGPUCompositeAlphaMode := 1;
   WGPUCompositeAlphaMode_WGPUCompositeAlphaMode_Premultiplied : constant WGPUCompositeAlphaMode := 2;
   WGPUCompositeAlphaMode_WGPUCompositeAlphaMode_Unpremultiplied : constant WGPUCompositeAlphaMode := 3;
   WGPUCompositeAlphaMode_WGPUCompositeAlphaMode_Inherit : constant WGPUCompositeAlphaMode := 4;
   WGPUCompositeAlphaMode_WGPUCompositeAlphaMode_Force32 : constant WGPUCompositeAlphaMode := 2147483647;  -- webgpu.h:442

   subtype WGPUCreatePipelineAsyncStatus is unsigned;
   WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_Success : constant WGPUCreatePipelineAsyncStatus := 1;
   WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_InstanceDropped : constant WGPUCreatePipelineAsyncStatus := 2;
   WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_ValidationError : constant WGPUCreatePipelineAsyncStatus := 3;
   WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_InternalError : constant WGPUCreatePipelineAsyncStatus := 4;
   WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_DeviceLost : constant WGPUCreatePipelineAsyncStatus := 5;
   WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_DeviceDestroyed : constant WGPUCreatePipelineAsyncStatus := 6;
   WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_Unknown : constant WGPUCreatePipelineAsyncStatus := 7;
   WGPUCreatePipelineAsyncStatus_WGPUCreatePipelineAsyncStatus_Force32 : constant WGPUCreatePipelineAsyncStatus := 2147483647;  -- webgpu.h:450

   subtype WGPUCullMode is unsigned;
   WGPUCullMode_WGPUCullMode_Undefined : constant WGPUCullMode := 0;
   WGPUCullMode_WGPUCullMode_None : constant WGPUCullMode := 1;
   WGPUCullMode_WGPUCullMode_Front : constant WGPUCullMode := 2;
   WGPUCullMode_WGPUCullMode_Back : constant WGPUCullMode := 3;
   WGPUCullMode_WGPUCullMode_Force32 : constant WGPUCullMode := 2147483647;  -- webgpu.h:460

   subtype T_Device_Lost_Reason is unsigned;
   WGPUDeviceLostReason_WGPUDeviceLostReason_Unknown : constant T_Device_Lost_Reason := 1;
   WGPUDeviceLostReason_WGPUDeviceLostReason_Destroyed : constant T_Device_Lost_Reason := 2;
   WGPUDeviceLostReason_WGPUDeviceLostReason_InstanceDropped : constant T_Device_Lost_Reason := 3;
   WGPUDeviceLostReason_WGPUDeviceLostReason_FailedCreation : constant T_Device_Lost_Reason := 4;
   WGPUDeviceLostReason_WGPUDeviceLostReason_Force32 : constant T_Device_Lost_Reason := 2147483647;  -- webgpu.h:467

   subtype WGPUErrorFilter is unsigned;
   WGPUErrorFilter_WGPUErrorFilter_Validation : constant WGPUErrorFilter := 1;
   WGPUErrorFilter_WGPUErrorFilter_OutOfMemory : constant WGPUErrorFilter := 2;
   WGPUErrorFilter_WGPUErrorFilter_Internal : constant WGPUErrorFilter := 3;
   WGPUErrorFilter_WGPUErrorFilter_Force32 : constant WGPUErrorFilter := 2147483647;  -- webgpu.h:474

   subtype T_Error_Kind is unsigned;
   WGPUErrorType_WGPUErrorType_NoError : constant T_Error_Kind := 1;
   WGPUErrorType_WGPUErrorType_Validation : constant T_Error_Kind := 2;
   WGPUErrorType_WGPUErrorType_OutOfMemory : constant T_Error_Kind := 3;
   WGPUErrorType_WGPUErrorType_Internal : constant T_Error_Kind := 4;
   WGPUErrorType_WGPUErrorType_Unknown : constant T_Error_Kind := 5;
   WGPUErrorType_WGPUErrorType_DeviceLost : constant T_Error_Kind := 6;
   WGPUErrorType_WGPUErrorType_Force32 : constant T_Error_Kind := 2147483647;  -- webgpu.h:480

   subtype WGPUExternalTextureRotation is unsigned;
   WGPUExternalTextureRotation_WGPUExternalTextureRotation_Rotate0Degrees : constant WGPUExternalTextureRotation := 1;
   WGPUExternalTextureRotation_WGPUExternalTextureRotation_Rotate90Degrees : constant WGPUExternalTextureRotation := 2;
   WGPUExternalTextureRotation_WGPUExternalTextureRotation_Rotate180Degrees : constant WGPUExternalTextureRotation := 3;
   WGPUExternalTextureRotation_WGPUExternalTextureRotation_Rotate270Degrees : constant WGPUExternalTextureRotation := 4;
   WGPUExternalTextureRotation_WGPUExternalTextureRotation_Force32 : constant WGPUExternalTextureRotation := 2147483647;  -- webgpu.h:489

   subtype T_Feature_Name is unsigned;
   WGPUFeatureName_WGPUFeatureName_DepthClipControl : constant T_Feature_Name := 1;
   WGPUFeatureName_WGPUFeatureName_Depth32FloatStencil8 : constant T_Feature_Name := 2;
   WGPUFeatureName_WGPUFeatureName_TimestampQuery : constant T_Feature_Name := 3;
   WGPUFeatureName_WGPUFeatureName_TextureCompressionBC : constant T_Feature_Name := 4;
   WGPUFeatureName_WGPUFeatureName_TextureCompressionETC2 : constant T_Feature_Name := 5;
   WGPUFeatureName_WGPUFeatureName_TextureCompressionASTC : constant T_Feature_Name := 6;
   WGPUFeatureName_WGPUFeatureName_IndirectFirstInstance : constant T_Feature_Name := 7;
   WGPUFeatureName_WGPUFeatureName_ShaderF16 : constant T_Feature_Name := 8;
   WGPUFeatureName_WGPUFeatureName_RG11B10UfloatRenderable : constant T_Feature_Name := 9;
   WGPUFeatureName_WGPUFeatureName_BGRA8UnormStorage : constant T_Feature_Name := 10;
   WGPUFeatureName_WGPUFeatureName_Float32Filterable : constant T_Feature_Name := 11;
   WGPUFeatureName_WGPUFeatureName_Float32Blendable : constant T_Feature_Name := 12;
   WGPUFeatureName_WGPUFeatureName_Subgroups : constant T_Feature_Name := 13;
   WGPUFeatureName_WGPUFeatureName_SubgroupsF16 : constant T_Feature_Name := 14;
   WGPUFeatureName_WGPUFeatureName_DawnInternalUsages : constant T_Feature_Name := 327680;
   WGPUFeatureName_WGPUFeatureName_DawnMultiPlanarFormats : constant T_Feature_Name := 327681;
   WGPUFeatureName_WGPUFeatureName_DawnNative : constant T_Feature_Name := 327682;
   WGPUFeatureName_WGPUFeatureName_ChromiumExperimentalTimestampQueryInsidePasses : constant T_Feature_Name := 327683;
   WGPUFeatureName_WGPUFeatureName_ImplicitDeviceSynchronization : constant T_Feature_Name := 327684;
   WGPUFeatureName_WGPUFeatureName_ChromiumExperimentalImmediateData : constant T_Feature_Name := 327685;
   WGPUFeatureName_WGPUFeatureName_TransientAttachments : constant T_Feature_Name := 327686;
   WGPUFeatureName_WGPUFeatureName_MSAARenderToSingleSampled : constant T_Feature_Name := 327687;
   WGPUFeatureName_WGPUFeatureName_DualSourceBlending : constant T_Feature_Name := 327688;
   WGPUFeatureName_WGPUFeatureName_D3D11MultithreadProtected : constant T_Feature_Name := 327689;
   WGPUFeatureName_WGPUFeatureName_ANGLETextureSharing : constant T_Feature_Name := 327690;
   WGPUFeatureName_WGPUFeatureName_ChromiumExperimentalSubgroups : constant T_Feature_Name := 327691;
   WGPUFeatureName_WGPUFeatureName_ChromiumExperimentalSubgroupUniformControlFlow : constant T_Feature_Name := 327692;
   WGPUFeatureName_WGPUFeatureName_PixelLocalStorageCoherent : constant T_Feature_Name := 327693;
   WGPUFeatureName_WGPUFeatureName_PixelLocalStorageNonCoherent : constant T_Feature_Name := 327694;
   WGPUFeatureName_WGPUFeatureName_Unorm16TextureFormats : constant T_Feature_Name := 327695;
   WGPUFeatureName_WGPUFeatureName_Snorm16TextureFormats : constant T_Feature_Name := 327696;
   WGPUFeatureName_WGPUFeatureName_MultiPlanarFormatExtendedUsages : constant T_Feature_Name := 327697;
   WGPUFeatureName_WGPUFeatureName_MultiPlanarFormatP010 : constant T_Feature_Name := 327698;
   WGPUFeatureName_WGPUFeatureName_HostMappedPointer : constant T_Feature_Name := 327699;
   WGPUFeatureName_WGPUFeatureName_MultiPlanarRenderTargets : constant T_Feature_Name := 327700;
   WGPUFeatureName_WGPUFeatureName_MultiPlanarFormatNv12a : constant T_Feature_Name := 327701;
   WGPUFeatureName_WGPUFeatureName_FramebufferFetch : constant T_Feature_Name := 327702;
   WGPUFeatureName_WGPUFeatureName_BufferMapExtendedUsages : constant T_Feature_Name := 327703;
   WGPUFeatureName_WGPUFeatureName_AdapterPropertiesMemoryHeaps : constant T_Feature_Name := 327704;
   WGPUFeatureName_WGPUFeatureName_AdapterPropertiesD3D : constant T_Feature_Name := 327705;
   WGPUFeatureName_WGPUFeatureName_AdapterPropertiesVk : constant T_Feature_Name := 327706;
   WGPUFeatureName_WGPUFeatureName_R8UnormStorage : constant T_Feature_Name := 327707;
   WGPUFeatureName_WGPUFeatureName_FormatCapabilities : constant T_Feature_Name := 327708;
   WGPUFeatureName_WGPUFeatureName_DrmFormatCapabilities : constant T_Feature_Name := 327709;
   WGPUFeatureName_WGPUFeatureName_Norm16TextureFormats : constant T_Feature_Name := 327710;
   WGPUFeatureName_WGPUFeatureName_MultiPlanarFormatNv16 : constant T_Feature_Name := 327711;
   WGPUFeatureName_WGPUFeatureName_MultiPlanarFormatNv24 : constant T_Feature_Name := 327712;
   WGPUFeatureName_WGPUFeatureName_MultiPlanarFormatP210 : constant T_Feature_Name := 327713;
   WGPUFeatureName_WGPUFeatureName_MultiPlanarFormatP410 : constant T_Feature_Name := 327714;
   WGPUFeatureName_WGPUFeatureName_SharedTextureMemoryVkDedicatedAllocation : constant T_Feature_Name := 327715;
   WGPUFeatureName_WGPUFeatureName_SharedTextureMemoryAHardwareBuffer : constant T_Feature_Name := 327716;
   WGPUFeatureName_WGPUFeatureName_SharedTextureMemoryDmaBuf : constant T_Feature_Name := 327717;
   WGPUFeatureName_WGPUFeatureName_SharedTextureMemoryOpaqueFD : constant T_Feature_Name := 327718;
   WGPUFeatureName_WGPUFeatureName_SharedTextureMemoryZirconHandle : constant T_Feature_Name := 327719;
   WGPUFeatureName_WGPUFeatureName_SharedTextureMemoryDXGISharedHandle : constant T_Feature_Name := 327720;
   WGPUFeatureName_WGPUFeatureName_SharedTextureMemoryD3D11Texture2D : constant T_Feature_Name := 327721;
   WGPUFeatureName_WGPUFeatureName_SharedTextureMemoryIOSurface : constant T_Feature_Name := 327722;
   WGPUFeatureName_WGPUFeatureName_SharedTextureMemoryEGLImage : constant T_Feature_Name := 327723;
   WGPUFeatureName_WGPUFeatureName_SharedFenceVkSemaphoreOpaqueFD : constant T_Feature_Name := 327724;
   WGPUFeatureName_WGPUFeatureName_SharedFenceSyncFD : constant T_Feature_Name := 327725;
   WGPUFeatureName_WGPUFeatureName_SharedFenceVkSemaphoreZirconHandle : constant T_Feature_Name := 327726;
   WGPUFeatureName_WGPUFeatureName_SharedFenceDXGISharedHandle : constant T_Feature_Name := 327727;
   WGPUFeatureName_WGPUFeatureName_SharedFenceMTLSharedEvent : constant T_Feature_Name := 327728;
   WGPUFeatureName_WGPUFeatureName_SharedBufferMemoryD3D12Resource : constant T_Feature_Name := 327729;
   WGPUFeatureName_WGPUFeatureName_StaticSamplers : constant T_Feature_Name := 327730;
   WGPUFeatureName_WGPUFeatureName_YCbCrVulkanSamplers : constant T_Feature_Name := 327731;
   WGPUFeatureName_WGPUFeatureName_ShaderModuleCompilationOptions : constant T_Feature_Name := 327732;
   WGPUFeatureName_WGPUFeatureName_DawnLoadResolveTexture : constant T_Feature_Name := 327733;
   WGPUFeatureName_WGPUFeatureName_DawnPartialLoadResolveTexture : constant T_Feature_Name := 327734;
   WGPUFeatureName_WGPUFeatureName_MultiDrawIndirect : constant T_Feature_Name := 327735;
   WGPUFeatureName_WGPUFeatureName_ClipDistances : constant T_Feature_Name := 327736;
   WGPUFeatureName_WGPUFeatureName_SharedFenceVkSemaphoreSyncFD : constant T_Feature_Name := 327737;
   WGPUFeatureName_WGPUFeatureName_Force32 : constant T_Feature_Name := 2147483647;  -- webgpu.h:496

   subtype WGPUFilterMode is unsigned;
   WGPUFilterMode_WGPUFilterMode_Undefined : constant WGPUFilterMode := 0;
   WGPUFilterMode_WGPUFilterMode_Nearest : constant WGPUFilterMode := 1;
   WGPUFilterMode_WGPUFilterMode_Linear : constant WGPUFilterMode := 2;
   WGPUFilterMode_WGPUFilterMode_Force32 : constant WGPUFilterMode := 2147483647;  -- webgpu.h:571

   subtype WGPUFrontFace is unsigned;
   WGPUFrontFace_WGPUFrontFace_Undefined : constant WGPUFrontFace := 0;
   WGPUFrontFace_WGPUFrontFace_CCW : constant WGPUFrontFace := 1;
   WGPUFrontFace_WGPUFrontFace_CW : constant WGPUFrontFace := 2;
   WGPUFrontFace_WGPUFrontFace_Force32 : constant WGPUFrontFace := 2147483647;  -- webgpu.h:577

   subtype WGPUIndexFormat is unsigned;
   WGPUIndexFormat_WGPUIndexFormat_Undefined : constant WGPUIndexFormat := 0;
   WGPUIndexFormat_WGPUIndexFormat_Uint16 : constant WGPUIndexFormat := 1;
   WGPUIndexFormat_WGPUIndexFormat_Uint32 : constant WGPUIndexFormat := 2;
   WGPUIndexFormat_WGPUIndexFormat_Force32 : constant WGPUIndexFormat := 2147483647;  -- webgpu.h:583

   subtype WGPULoadOp is unsigned;
   WGPULoadOp_WGPULoadOp_Undefined : constant WGPULoadOp := 0;
   WGPULoadOp_WGPULoadOp_Load : constant WGPULoadOp := 1;
   WGPULoadOp_WGPULoadOp_Clear : constant WGPULoadOp := 2;
   WGPULoadOp_WGPULoadOp_ExpandResolveTexture : constant WGPULoadOp := 327683;
   WGPULoadOp_WGPULoadOp_Force32 : constant WGPULoadOp := 2147483647;  -- webgpu.h:589

   subtype WGPULoggingType is unsigned;
   WGPULoggingType_WGPULoggingType_Verbose : constant WGPULoggingType := 1;
   WGPULoggingType_WGPULoggingType_Info : constant WGPULoggingType := 2;
   WGPULoggingType_WGPULoggingType_Warning : constant WGPULoggingType := 3;
   WGPULoggingType_WGPULoggingType_Error : constant WGPULoggingType := 4;
   WGPULoggingType_WGPULoggingType_Force32 : constant WGPULoggingType := 2147483647;  -- webgpu.h:596

   subtype WGPUMapAsyncStatus is unsigned;
   WGPUMapAsyncStatus_WGPUMapAsyncStatus_Success : constant WGPUMapAsyncStatus := 1;
   WGPUMapAsyncStatus_WGPUMapAsyncStatus_InstanceDropped : constant WGPUMapAsyncStatus := 2;
   WGPUMapAsyncStatus_WGPUMapAsyncStatus_Error : constant WGPUMapAsyncStatus := 3;
   WGPUMapAsyncStatus_WGPUMapAsyncStatus_Aborted : constant WGPUMapAsyncStatus := 4;
   WGPUMapAsyncStatus_WGPUMapAsyncStatus_Unknown : constant WGPUMapAsyncStatus := 5;
   WGPUMapAsyncStatus_WGPUMapAsyncStatus_Force32 : constant WGPUMapAsyncStatus := 2147483647;  -- webgpu.h:603

   subtype WGPUMipmapFilterMode is unsigned;
   WGPUMipmapFilterMode_WGPUMipmapFilterMode_Undefined : constant WGPUMipmapFilterMode := 0;
   WGPUMipmapFilterMode_WGPUMipmapFilterMode_Nearest : constant WGPUMipmapFilterMode := 1;
   WGPUMipmapFilterMode_WGPUMipmapFilterMode_Linear : constant WGPUMipmapFilterMode := 2;
   WGPUMipmapFilterMode_WGPUMipmapFilterMode_Force32 : constant WGPUMipmapFilterMode := 2147483647;  -- webgpu.h:611

   subtype WGPUOptionalBool is unsigned;
   WGPUOptionalBool_WGPUOptionalBool_False : constant WGPUOptionalBool := 0;
   WGPUOptionalBool_WGPUOptionalBool_True : constant WGPUOptionalBool := 1;
   WGPUOptionalBool_WGPUOptionalBool_Undefined : constant WGPUOptionalBool := 2;
   WGPUOptionalBool_WGPUOptionalBool_Force32 : constant WGPUOptionalBool := 2147483647;  -- webgpu.h:617

   subtype WGPUPopErrorScopeStatus is unsigned;
   WGPUPopErrorScopeStatus_WGPUPopErrorScopeStatus_Success : constant WGPUPopErrorScopeStatus := 1;
   WGPUPopErrorScopeStatus_WGPUPopErrorScopeStatus_InstanceDropped : constant WGPUPopErrorScopeStatus := 2;
   WGPUPopErrorScopeStatus_WGPUPopErrorScopeStatus_Force32 : constant WGPUPopErrorScopeStatus := 2147483647;  -- webgpu.h:623

   subtype WGPUPowerPreference is unsigned;
   WGPUPowerPreference_WGPUPowerPreference_Undefined : constant WGPUPowerPreference := 0;
   WGPUPowerPreference_WGPUPowerPreference_LowPower : constant WGPUPowerPreference := 1;
   WGPUPowerPreference_WGPUPowerPreference_HighPerformance : constant WGPUPowerPreference := 2;
   WGPUPowerPreference_WGPUPowerPreference_Force32 : constant WGPUPowerPreference := 2147483647;  -- webgpu.h:628

   subtype WGPUPresentMode is unsigned;
   WGPUPresentMode_WGPUPresentMode_Fifo : constant WGPUPresentMode := 1;
   WGPUPresentMode_WGPUPresentMode_FifoRelaxed : constant WGPUPresentMode := 2;
   WGPUPresentMode_WGPUPresentMode_Immediate : constant WGPUPresentMode := 3;
   WGPUPresentMode_WGPUPresentMode_Mailbox : constant WGPUPresentMode := 4;
   WGPUPresentMode_WGPUPresentMode_Force32 : constant WGPUPresentMode := 2147483647;  -- webgpu.h:634

   subtype WGPUPrimitiveTopology is unsigned;
   WGPUPrimitiveTopology_WGPUPrimitiveTopology_Undefined : constant WGPUPrimitiveTopology := 0;
   WGPUPrimitiveTopology_WGPUPrimitiveTopology_PointList : constant WGPUPrimitiveTopology := 1;
   WGPUPrimitiveTopology_WGPUPrimitiveTopology_LineList : constant WGPUPrimitiveTopology := 2;
   WGPUPrimitiveTopology_WGPUPrimitiveTopology_LineStrip : constant WGPUPrimitiveTopology := 3;
   WGPUPrimitiveTopology_WGPUPrimitiveTopology_TriangleList : constant WGPUPrimitiveTopology := 4;
   WGPUPrimitiveTopology_WGPUPrimitiveTopology_TriangleStrip : constant WGPUPrimitiveTopology := 5;
   WGPUPrimitiveTopology_WGPUPrimitiveTopology_Force32 : constant WGPUPrimitiveTopology := 2147483647;  -- webgpu.h:641

   subtype WGPUQueryType is unsigned;
   WGPUQueryType_WGPUQueryType_Occlusion : constant WGPUQueryType := 1;
   WGPUQueryType_WGPUQueryType_Timestamp : constant WGPUQueryType := 2;
   WGPUQueryType_WGPUQueryType_Force32 : constant WGPUQueryType := 2147483647;  -- webgpu.h:650

   subtype WGPUQueueWorkDoneStatus is unsigned;
   WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_Success : constant WGPUQueueWorkDoneStatus := 1;
   WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_InstanceDropped : constant WGPUQueueWorkDoneStatus := 2;
   WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_Error : constant WGPUQueueWorkDoneStatus := 3;
   WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_Unknown : constant WGPUQueueWorkDoneStatus := 4;
   WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_DeviceLost : constant WGPUQueueWorkDoneStatus := 5;
   WGPUQueueWorkDoneStatus_WGPUQueueWorkDoneStatus_Force32 : constant WGPUQueueWorkDoneStatus := 2147483647;  -- webgpu.h:655

	type T_Request_Adapter_Status is (
		E_Success,
		E_Instance_Dropped,
		E_Unavailable,
		E_Error,
		E_Unknown
	) with Convention => C, Size => 32;

	for T_Request_Adapter_Status use (
		E_Success          => 1,
		E_Instance_Dropped => 2,
		E_Unavailable      => 3,
		E_Error            => 4,
		E_Unknown          => 5
	);

	type T_Request_Device_Status is (
		E_Success,
		E_Instance_Dropped,
		E_Error,
		E_Unknown
	) with Convention => C, Size => 32;

	for T_Request_Device_Status use (
		E_Success          => 1,
		E_Instance_Dropped => 2,
		E_Error            => 3,
		E_Unknown          => 4
	);

   subtype T_WGPUSType is unsigned;
   WGPUSType_WGPUSType_ShaderSourceSPIRV : constant T_WGPUSType := 1;
   WGPUSType_WGPUSType_ShaderSourceWGSL : constant T_WGPUSType := 2;
   WGPUSType_WGPUSType_RenderPassMaxDrawCount : constant T_WGPUSType := 3;
   WGPUSType_WGPUSType_SurfaceSourceMetalLayer : constant T_WGPUSType := 4;
   WGPUSType_WGPUSType_SurfaceSourceWindowsHWND : constant T_WGPUSType := 5;
   WGPUSType_WGPUSType_SurfaceSourceXlibWindow : constant T_WGPUSType := 6;
   WGPUSType_WGPUSType_SurfaceSourceWaylandSurface : constant T_WGPUSType := 7;
   WGPUSType_WGPUSType_SurfaceSourceAndroidNativeWindow : constant T_WGPUSType := 8;
   WGPUSType_WGPUSType_SurfaceSourceXCBWindow : constant T_WGPUSType := 9;
   WGPUSType_WGPUSType_TextureBindingViewDimensionDescriptor : constant T_WGPUSType := 131072;
   WGPUSType_WGPUSType_SurfaceSourceCanvasHTMLSelector_Emscripten : constant T_WGPUSType := 262144;
   WGPUSType_WGPUSType_SurfaceDescriptorFromWindowsCoreWindow : constant T_WGPUSType := 327680;
   WGPUSType_WGPUSType_ExternalTextureBindingEntry : constant T_WGPUSType := 327681;
   WGPUSType_WGPUSType_ExternalTextureBindingLayout : constant T_WGPUSType := 327682;
   WGPUSType_WGPUSType_SurfaceDescriptorFromWindowsSwapChainPanel : constant T_WGPUSType := 327683;
   WGPUSType_WGPUSType_DawnTextureInternalUsageDescriptor : constant T_WGPUSType := 327684;
   WGPUSType_WGPUSType_DawnEncoderInternalUsageDescriptor : constant T_WGPUSType := 327685;
   WGPUSType_WGPUSType_DawnInstanceDescriptor : constant T_WGPUSType := 327686;
   WGPUSType_WGPUSType_DawnCacheDeviceDescriptor : constant T_WGPUSType := 327687;
   WGPUSType_WGPUSType_DawnAdapterPropertiesPowerPreference : constant T_WGPUSType := 327688;
   WGPUSType_WGPUSType_DawnBufferDescriptorErrorInfoFromWireClient : constant T_WGPUSType := 327689;
   WGPUSType_WGPUSType_DawnTogglesDescriptor : constant T_WGPUSType := 327690;
   WGPUSType_WGPUSType_DawnShaderModuleSPIRVOptionsDescriptor : constant T_WGPUSType := 327691;
   WGPUSType_WGPUSType_RequestAdapterOptionsLUID : constant T_WGPUSType := 327692;
   WGPUSType_WGPUSType_RequestAdapterOptionsGetGLProc : constant T_WGPUSType := 327693;
   WGPUSType_WGPUSType_RequestAdapterOptionsD3D11Device : constant T_WGPUSType := 327694;
   WGPUSType_WGPUSType_DawnRenderPassColorAttachmentRenderToSingleSampled : constant T_WGPUSType := 327695;
   WGPUSType_WGPUSType_RenderPassPixelLocalStorage : constant T_WGPUSType := 327696;
   WGPUSType_WGPUSType_PipelineLayoutPixelLocalStorage : constant T_WGPUSType := 327697;
   WGPUSType_WGPUSType_BufferHostMappedPointer : constant T_WGPUSType := 327698;
   WGPUSType_WGPUSType_DawnExperimentalSubgroupLimits : constant T_WGPUSType := 327699;
   WGPUSType_WGPUSType_AdapterPropertiesMemoryHeaps : constant T_WGPUSType := 327700;
   WGPUSType_WGPUSType_AdapterPropertiesD3D : constant T_WGPUSType := 327701;
   WGPUSType_WGPUSType_AdapterPropertiesVk : constant T_WGPUSType := 327702;
   WGPUSType_WGPUSType_DawnComputePipelineFullSubgroups : constant T_WGPUSType := 327703;
   WGPUSType_WGPUSType_DawnWireWGSLControl : constant T_WGPUSType := 327704;
   WGPUSType_WGPUSType_DawnWGSLBlocklist : constant T_WGPUSType := 327705;
   WGPUSType_WGPUSType_DrmFormatCapabilities : constant T_WGPUSType := 327706;
   WGPUSType_WGPUSType_ShaderModuleCompilationOptions : constant T_WGPUSType := 327707;
   WGPUSType_WGPUSType_ColorTargetStateExpandResolveTextureDawn : constant T_WGPUSType := 327708;
   WGPUSType_WGPUSType_RenderPassDescriptorExpandResolveRect : constant T_WGPUSType := 327709;
   WGPUSType_WGPUSType_SharedTextureMemoryVkDedicatedAllocationDescriptor : constant T_WGPUSType := 327710;
   WGPUSType_WGPUSType_SharedTextureMemoryAHardwareBufferDescriptor : constant T_WGPUSType := 327711;
   WGPUSType_WGPUSType_SharedTextureMemoryDmaBufDescriptor : constant T_WGPUSType := 327712;
   WGPUSType_WGPUSType_SharedTextureMemoryOpaqueFDDescriptor : constant T_WGPUSType := 327713;
   WGPUSType_WGPUSType_SharedTextureMemoryZirconHandleDescriptor : constant T_WGPUSType := 327714;
   WGPUSType_WGPUSType_SharedTextureMemoryDXGISharedHandleDescriptor : constant T_WGPUSType := 327715;
   WGPUSType_WGPUSType_SharedTextureMemoryD3D11Texture2DDescriptor : constant T_WGPUSType := 327716;
   WGPUSType_WGPUSType_SharedTextureMemoryIOSurfaceDescriptor : constant T_WGPUSType := 327717;
   WGPUSType_WGPUSType_SharedTextureMemoryEGLImageDescriptor : constant T_WGPUSType := 327718;
   WGPUSType_WGPUSType_SharedTextureMemoryInitializedBeginState : constant T_WGPUSType := 327719;
   WGPUSType_WGPUSType_SharedTextureMemoryInitializedEndState : constant T_WGPUSType := 327720;
   WGPUSType_WGPUSType_SharedTextureMemoryVkImageLayoutBeginState : constant T_WGPUSType := 327721;
   WGPUSType_WGPUSType_SharedTextureMemoryVkImageLayoutEndState : constant T_WGPUSType := 327722;
   WGPUSType_WGPUSType_SharedTextureMemoryD3DSwapchainBeginState : constant T_WGPUSType := 327723;
   WGPUSType_WGPUSType_SharedFenceVkSemaphoreOpaqueFDDescriptor : constant T_WGPUSType := 327724;
   WGPUSType_WGPUSType_SharedFenceVkSemaphoreOpaqueFDExportInfo : constant T_WGPUSType := 327725;
   WGPUSType_WGPUSType_SharedFenceSyncFDDescriptor : constant T_WGPUSType := 327726;
   WGPUSType_WGPUSType_SharedFenceSyncFDExportInfo : constant T_WGPUSType := 327727;
   WGPUSType_WGPUSType_SharedFenceVkSemaphoreZirconHandleDescriptor : constant T_WGPUSType := 327728;
   WGPUSType_WGPUSType_SharedFenceVkSemaphoreZirconHandleExportInfo : constant T_WGPUSType := 327729;
   WGPUSType_WGPUSType_SharedFenceDXGISharedHandleDescriptor : constant T_WGPUSType := 327730;
   WGPUSType_WGPUSType_SharedFenceDXGISharedHandleExportInfo : constant T_WGPUSType := 327731;
   WGPUSType_WGPUSType_SharedFenceMTLSharedEventDescriptor : constant T_WGPUSType := 327732;
   WGPUSType_WGPUSType_SharedFenceMTLSharedEventExportInfo : constant T_WGPUSType := 327733;
   WGPUSType_WGPUSType_SharedBufferMemoryD3D12ResourceDescriptor : constant T_WGPUSType := 327734;
   WGPUSType_WGPUSType_StaticSamplerBindingLayout : constant T_WGPUSType := 327735;
   WGPUSType_WGPUSType_YCbCrVkDescriptor : constant T_WGPUSType := 327736;
   WGPUSType_WGPUSType_SharedTextureMemoryAHardwareBufferProperties : constant T_WGPUSType := 327737;
   WGPUSType_WGPUSType_AHardwareBufferProperties : constant T_WGPUSType := 327738;
   WGPUSType_WGPUSType_DawnExperimentalImmediateDataLimits : constant T_WGPUSType := 327739;
   WGPUSType_WGPUSType_Force32 : constant T_WGPUSType := 2147483647;  -- webgpu.h:678

   subtype WGPUSamplerBindingType is unsigned;
   WGPUSamplerBindingType_WGPUSamplerBindingType_Undefined : constant WGPUSamplerBindingType := 0;
   WGPUSamplerBindingType_WGPUSamplerBindingType_Filtering : constant WGPUSamplerBindingType := 1;
   WGPUSamplerBindingType_WGPUSamplerBindingType_NonFiltering : constant WGPUSamplerBindingType := 2;
   WGPUSamplerBindingType_WGPUSamplerBindingType_Comparison : constant WGPUSamplerBindingType := 3;
   WGPUSamplerBindingType_WGPUSamplerBindingType_Force32 : constant WGPUSamplerBindingType := 2147483647;  -- webgpu.h:752

   subtype WGPUSharedFenceType is unsigned;
   WGPUSharedFenceType_WGPUSharedFenceType_VkSemaphoreOpaqueFD : constant WGPUSharedFenceType := 1;
   WGPUSharedFenceType_WGPUSharedFenceType_SyncFD : constant WGPUSharedFenceType := 2;
   WGPUSharedFenceType_WGPUSharedFenceType_VkSemaphoreZirconHandle : constant WGPUSharedFenceType := 3;
   WGPUSharedFenceType_WGPUSharedFenceType_DXGISharedHandle : constant WGPUSharedFenceType := 4;
   WGPUSharedFenceType_WGPUSharedFenceType_MTLSharedEvent : constant WGPUSharedFenceType := 5;
   WGPUSharedFenceType_WGPUSharedFenceType_Force32 : constant WGPUSharedFenceType := 2147483647;  -- webgpu.h:759

   subtype T_Status is unsigned;
   WGPUStatus_WGPUStatus_Success : constant T_Status := 1;
   WGPUStatus_WGPUStatus_Error : constant T_Status := 2;
   WGPUStatus_WGPUStatus_Force32 : constant T_Status := 2147483647;  -- webgpu.h:767

   subtype WGPUStencilOperation is unsigned;
   WGPUStencilOperation_WGPUStencilOperation_Undefined : constant WGPUStencilOperation := 0;
   WGPUStencilOperation_WGPUStencilOperation_Keep : constant WGPUStencilOperation := 1;
   WGPUStencilOperation_WGPUStencilOperation_Zero : constant WGPUStencilOperation := 2;
   WGPUStencilOperation_WGPUStencilOperation_Replace : constant WGPUStencilOperation := 3;
   WGPUStencilOperation_WGPUStencilOperation_Invert : constant WGPUStencilOperation := 4;
   WGPUStencilOperation_WGPUStencilOperation_IncrementClamp : constant WGPUStencilOperation := 5;
   WGPUStencilOperation_WGPUStencilOperation_DecrementClamp : constant WGPUStencilOperation := 6;
   WGPUStencilOperation_WGPUStencilOperation_IncrementWrap : constant WGPUStencilOperation := 7;
   WGPUStencilOperation_WGPUStencilOperation_DecrementWrap : constant WGPUStencilOperation := 8;
   WGPUStencilOperation_WGPUStencilOperation_Force32 : constant WGPUStencilOperation := 2147483647;  -- webgpu.h:772

   subtype WGPUStorageTextureAccess is unsigned;
   WGPUStorageTextureAccess_WGPUStorageTextureAccess_Undefined : constant WGPUStorageTextureAccess := 0;
   WGPUStorageTextureAccess_WGPUStorageTextureAccess_WriteOnly : constant WGPUStorageTextureAccess := 1;
   WGPUStorageTextureAccess_WGPUStorageTextureAccess_ReadOnly : constant WGPUStorageTextureAccess := 2;
   WGPUStorageTextureAccess_WGPUStorageTextureAccess_ReadWrite : constant WGPUStorageTextureAccess := 3;
   WGPUStorageTextureAccess_WGPUStorageTextureAccess_Force32 : constant WGPUStorageTextureAccess := 2147483647;  -- webgpu.h:784

   subtype WGPUStoreOp is unsigned;
   WGPUStoreOp_WGPUStoreOp_Undefined : constant WGPUStoreOp := 0;
   WGPUStoreOp_WGPUStoreOp_Store : constant WGPUStoreOp := 1;
   WGPUStoreOp_WGPUStoreOp_Discard : constant WGPUStoreOp := 2;
   WGPUStoreOp_WGPUStoreOp_Force32 : constant WGPUStoreOp := 2147483647;  -- webgpu.h:791

   subtype WGPUSurfaceGetCurrentTextureStatus is unsigned;
   WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_Success : constant WGPUSurfaceGetCurrentTextureStatus := 1;
   WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_Timeout : constant WGPUSurfaceGetCurrentTextureStatus := 2;
   WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_Outdated : constant WGPUSurfaceGetCurrentTextureStatus := 3;
   WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_Lost : constant WGPUSurfaceGetCurrentTextureStatus := 4;
   WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_OutOfMemory : constant WGPUSurfaceGetCurrentTextureStatus := 5;
   WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_DeviceLost : constant WGPUSurfaceGetCurrentTextureStatus := 6;
   WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_Error : constant WGPUSurfaceGetCurrentTextureStatus := 7;
   WGPUSurfaceGetCurrentTextureStatus_WGPUSurfaceGetCurrentTextureStatus_Force32 : constant WGPUSurfaceGetCurrentTextureStatus := 2147483647;  -- webgpu.h:797

   subtype WGPUTextureAspect is unsigned;
   WGPUTextureAspect_WGPUTextureAspect_Undefined : constant WGPUTextureAspect := 0;
   WGPUTextureAspect_WGPUTextureAspect_All : constant WGPUTextureAspect := 1;
   WGPUTextureAspect_WGPUTextureAspect_StencilOnly : constant WGPUTextureAspect := 2;
   WGPUTextureAspect_WGPUTextureAspect_DepthOnly : constant WGPUTextureAspect := 3;
   WGPUTextureAspect_WGPUTextureAspect_Plane0Only : constant WGPUTextureAspect := 327680;
   WGPUTextureAspect_WGPUTextureAspect_Plane1Only : constant WGPUTextureAspect := 327681;
   WGPUTextureAspect_WGPUTextureAspect_Plane2Only : constant WGPUTextureAspect := 327682;
   WGPUTextureAspect_WGPUTextureAspect_Force32 : constant WGPUTextureAspect := 2147483647;  -- webgpu.h:807

   subtype WGPUTextureDimension is unsigned;
   WGPUTextureDimension_WGPUTextureDimension_Undefined : constant WGPUTextureDimension := 0;
   WGPUTextureDimension_WGPUTextureDimension_1D : constant WGPUTextureDimension := 1;
   WGPUTextureDimension_WGPUTextureDimension_2D : constant WGPUTextureDimension := 2;
   WGPUTextureDimension_WGPUTextureDimension_3D : constant WGPUTextureDimension := 3;
   WGPUTextureDimension_WGPUTextureDimension_Force32 : constant WGPUTextureDimension := 2147483647;  -- webgpu.h:817

   subtype WGPUTextureFormat is unsigned;
   WGPUTextureFormat_WGPUTextureFormat_Undefined : constant WGPUTextureFormat := 0;
   WGPUTextureFormat_WGPUTextureFormat_R8Unorm : constant WGPUTextureFormat := 1;
   WGPUTextureFormat_WGPUTextureFormat_R8Snorm : constant WGPUTextureFormat := 2;
   WGPUTextureFormat_WGPUTextureFormat_R8Uint : constant WGPUTextureFormat := 3;
   WGPUTextureFormat_WGPUTextureFormat_R8Sint : constant WGPUTextureFormat := 4;
   WGPUTextureFormat_WGPUTextureFormat_R16Uint : constant WGPUTextureFormat := 5;
   WGPUTextureFormat_WGPUTextureFormat_R16Sint : constant WGPUTextureFormat := 6;
   WGPUTextureFormat_WGPUTextureFormat_R16Float : constant WGPUTextureFormat := 7;
   WGPUTextureFormat_WGPUTextureFormat_RG8Unorm : constant WGPUTextureFormat := 8;
   WGPUTextureFormat_WGPUTextureFormat_RG8Snorm : constant WGPUTextureFormat := 9;
   WGPUTextureFormat_WGPUTextureFormat_RG8Uint : constant WGPUTextureFormat := 10;
   WGPUTextureFormat_WGPUTextureFormat_RG8Sint : constant WGPUTextureFormat := 11;
   WGPUTextureFormat_WGPUTextureFormat_R32Float : constant WGPUTextureFormat := 12;
   WGPUTextureFormat_WGPUTextureFormat_R32Uint : constant WGPUTextureFormat := 13;
   WGPUTextureFormat_WGPUTextureFormat_R32Sint : constant WGPUTextureFormat := 14;
   WGPUTextureFormat_WGPUTextureFormat_RG16Uint : constant WGPUTextureFormat := 15;
   WGPUTextureFormat_WGPUTextureFormat_RG16Sint : constant WGPUTextureFormat := 16;
   WGPUTextureFormat_WGPUTextureFormat_RG16Float : constant WGPUTextureFormat := 17;
   WGPUTextureFormat_WGPUTextureFormat_RGBA8Unorm : constant WGPUTextureFormat := 18;
   WGPUTextureFormat_WGPUTextureFormat_RGBA8UnormSrgb : constant WGPUTextureFormat := 19;
   WGPUTextureFormat_WGPUTextureFormat_RGBA8Snorm : constant WGPUTextureFormat := 20;
   WGPUTextureFormat_WGPUTextureFormat_RGBA8Uint : constant WGPUTextureFormat := 21;
   WGPUTextureFormat_WGPUTextureFormat_RGBA8Sint : constant WGPUTextureFormat := 22;
   WGPUTextureFormat_WGPUTextureFormat_BGRA8Unorm : constant WGPUTextureFormat := 23;
   WGPUTextureFormat_WGPUTextureFormat_BGRA8UnormSrgb : constant WGPUTextureFormat := 24;
   WGPUTextureFormat_WGPUTextureFormat_RGB10A2Uint : constant WGPUTextureFormat := 25;
   WGPUTextureFormat_WGPUTextureFormat_RGB10A2Unorm : constant WGPUTextureFormat := 26;
   WGPUTextureFormat_WGPUTextureFormat_RG11B10Ufloat : constant WGPUTextureFormat := 27;
   WGPUTextureFormat_WGPUTextureFormat_RGB9E5Ufloat : constant WGPUTextureFormat := 28;
   WGPUTextureFormat_WGPUTextureFormat_RG32Float : constant WGPUTextureFormat := 29;
   WGPUTextureFormat_WGPUTextureFormat_RG32Uint : constant WGPUTextureFormat := 30;
   WGPUTextureFormat_WGPUTextureFormat_RG32Sint : constant WGPUTextureFormat := 31;
   WGPUTextureFormat_WGPUTextureFormat_RGBA16Uint : constant WGPUTextureFormat := 32;
   WGPUTextureFormat_WGPUTextureFormat_RGBA16Sint : constant WGPUTextureFormat := 33;
   WGPUTextureFormat_WGPUTextureFormat_RGBA16Float : constant WGPUTextureFormat := 34;
   WGPUTextureFormat_WGPUTextureFormat_RGBA32Float : constant WGPUTextureFormat := 35;
   WGPUTextureFormat_WGPUTextureFormat_RGBA32Uint : constant WGPUTextureFormat := 36;
   WGPUTextureFormat_WGPUTextureFormat_RGBA32Sint : constant WGPUTextureFormat := 37;
   WGPUTextureFormat_WGPUTextureFormat_Stencil8 : constant WGPUTextureFormat := 38;
   WGPUTextureFormat_WGPUTextureFormat_Depth16Unorm : constant WGPUTextureFormat := 39;
   WGPUTextureFormat_WGPUTextureFormat_Depth24Plus : constant WGPUTextureFormat := 40;
   WGPUTextureFormat_WGPUTextureFormat_Depth24PlusStencil8 : constant WGPUTextureFormat := 41;
   WGPUTextureFormat_WGPUTextureFormat_Depth32Float : constant WGPUTextureFormat := 42;
   WGPUTextureFormat_WGPUTextureFormat_Depth32FloatStencil8 : constant WGPUTextureFormat := 43;
   WGPUTextureFormat_WGPUTextureFormat_BC1RGBAUnorm : constant WGPUTextureFormat := 44;
   WGPUTextureFormat_WGPUTextureFormat_BC1RGBAUnormSrgb : constant WGPUTextureFormat := 45;
   WGPUTextureFormat_WGPUTextureFormat_BC2RGBAUnorm : constant WGPUTextureFormat := 46;
   WGPUTextureFormat_WGPUTextureFormat_BC2RGBAUnormSrgb : constant WGPUTextureFormat := 47;
   WGPUTextureFormat_WGPUTextureFormat_BC3RGBAUnorm : constant WGPUTextureFormat := 48;
   WGPUTextureFormat_WGPUTextureFormat_BC3RGBAUnormSrgb : constant WGPUTextureFormat := 49;
   WGPUTextureFormat_WGPUTextureFormat_BC4RUnorm : constant WGPUTextureFormat := 50;
   WGPUTextureFormat_WGPUTextureFormat_BC4RSnorm : constant WGPUTextureFormat := 51;
   WGPUTextureFormat_WGPUTextureFormat_BC5RGUnorm : constant WGPUTextureFormat := 52;
   WGPUTextureFormat_WGPUTextureFormat_BC5RGSnorm : constant WGPUTextureFormat := 53;
   WGPUTextureFormat_WGPUTextureFormat_BC6HRGBUfloat : constant WGPUTextureFormat := 54;
   WGPUTextureFormat_WGPUTextureFormat_BC6HRGBFloat : constant WGPUTextureFormat := 55;
   WGPUTextureFormat_WGPUTextureFormat_BC7RGBAUnorm : constant WGPUTextureFormat := 56;
   WGPUTextureFormat_WGPUTextureFormat_BC7RGBAUnormSrgb : constant WGPUTextureFormat := 57;
   WGPUTextureFormat_WGPUTextureFormat_ETC2RGB8Unorm : constant WGPUTextureFormat := 58;
   WGPUTextureFormat_WGPUTextureFormat_ETC2RGB8UnormSrgb : constant WGPUTextureFormat := 59;
   WGPUTextureFormat_WGPUTextureFormat_ETC2RGB8A1Unorm : constant WGPUTextureFormat := 60;
   WGPUTextureFormat_WGPUTextureFormat_ETC2RGB8A1UnormSrgb : constant WGPUTextureFormat := 61;
   WGPUTextureFormat_WGPUTextureFormat_ETC2RGBA8Unorm : constant WGPUTextureFormat := 62;
   WGPUTextureFormat_WGPUTextureFormat_ETC2RGBA8UnormSrgb : constant WGPUTextureFormat := 63;
   WGPUTextureFormat_WGPUTextureFormat_EACR11Unorm : constant WGPUTextureFormat := 64;
   WGPUTextureFormat_WGPUTextureFormat_EACR11Snorm : constant WGPUTextureFormat := 65;
   WGPUTextureFormat_WGPUTextureFormat_EACRG11Unorm : constant WGPUTextureFormat := 66;
   WGPUTextureFormat_WGPUTextureFormat_EACRG11Snorm : constant WGPUTextureFormat := 67;
   WGPUTextureFormat_WGPUTextureFormat_ASTC4x4Unorm : constant WGPUTextureFormat := 68;
   WGPUTextureFormat_WGPUTextureFormat_ASTC4x4UnormSrgb : constant WGPUTextureFormat := 69;
   WGPUTextureFormat_WGPUTextureFormat_ASTC5x4Unorm : constant WGPUTextureFormat := 70;
   WGPUTextureFormat_WGPUTextureFormat_ASTC5x4UnormSrgb : constant WGPUTextureFormat := 71;
   WGPUTextureFormat_WGPUTextureFormat_ASTC5x5Unorm : constant WGPUTextureFormat := 72;
   WGPUTextureFormat_WGPUTextureFormat_ASTC5x5UnormSrgb : constant WGPUTextureFormat := 73;
   WGPUTextureFormat_WGPUTextureFormat_ASTC6x5Unorm : constant WGPUTextureFormat := 74;
   WGPUTextureFormat_WGPUTextureFormat_ASTC6x5UnormSrgb : constant WGPUTextureFormat := 75;
   WGPUTextureFormat_WGPUTextureFormat_ASTC6x6Unorm : constant WGPUTextureFormat := 76;
   WGPUTextureFormat_WGPUTextureFormat_ASTC6x6UnormSrgb : constant WGPUTextureFormat := 77;
   WGPUTextureFormat_WGPUTextureFormat_ASTC8x5Unorm : constant WGPUTextureFormat := 78;
   WGPUTextureFormat_WGPUTextureFormat_ASTC8x5UnormSrgb : constant WGPUTextureFormat := 79;
   WGPUTextureFormat_WGPUTextureFormat_ASTC8x6Unorm : constant WGPUTextureFormat := 80;
   WGPUTextureFormat_WGPUTextureFormat_ASTC8x6UnormSrgb : constant WGPUTextureFormat := 81;
   WGPUTextureFormat_WGPUTextureFormat_ASTC8x8Unorm : constant WGPUTextureFormat := 82;
   WGPUTextureFormat_WGPUTextureFormat_ASTC8x8UnormSrgb : constant WGPUTextureFormat := 83;
   WGPUTextureFormat_WGPUTextureFormat_ASTC10x5Unorm : constant WGPUTextureFormat := 84;
   WGPUTextureFormat_WGPUTextureFormat_ASTC10x5UnormSrgb : constant WGPUTextureFormat := 85;
   WGPUTextureFormat_WGPUTextureFormat_ASTC10x6Unorm : constant WGPUTextureFormat := 86;
   WGPUTextureFormat_WGPUTextureFormat_ASTC10x6UnormSrgb : constant WGPUTextureFormat := 87;
   WGPUTextureFormat_WGPUTextureFormat_ASTC10x8Unorm : constant WGPUTextureFormat := 88;
   WGPUTextureFormat_WGPUTextureFormat_ASTC10x8UnormSrgb : constant WGPUTextureFormat := 89;
   WGPUTextureFormat_WGPUTextureFormat_ASTC10x10Unorm : constant WGPUTextureFormat := 90;
   WGPUTextureFormat_WGPUTextureFormat_ASTC10x10UnormSrgb : constant WGPUTextureFormat := 91;
   WGPUTextureFormat_WGPUTextureFormat_ASTC12x10Unorm : constant WGPUTextureFormat := 92;
   WGPUTextureFormat_WGPUTextureFormat_ASTC12x10UnormSrgb : constant WGPUTextureFormat := 93;
   WGPUTextureFormat_WGPUTextureFormat_ASTC12x12Unorm : constant WGPUTextureFormat := 94;
   WGPUTextureFormat_WGPUTextureFormat_ASTC12x12UnormSrgb : constant WGPUTextureFormat := 95;
   WGPUTextureFormat_WGPUTextureFormat_R16Unorm : constant WGPUTextureFormat := 327680;
   WGPUTextureFormat_WGPUTextureFormat_RG16Unorm : constant WGPUTextureFormat := 327681;
   WGPUTextureFormat_WGPUTextureFormat_RGBA16Unorm : constant WGPUTextureFormat := 327682;
   WGPUTextureFormat_WGPUTextureFormat_R16Snorm : constant WGPUTextureFormat := 327683;
   WGPUTextureFormat_WGPUTextureFormat_RG16Snorm : constant WGPUTextureFormat := 327684;
   WGPUTextureFormat_WGPUTextureFormat_RGBA16Snorm : constant WGPUTextureFormat := 327685;
   WGPUTextureFormat_WGPUTextureFormat_R8BG8Biplanar420Unorm : constant WGPUTextureFormat := 327686;
   WGPUTextureFormat_WGPUTextureFormat_R10X6BG10X6Biplanar420Unorm : constant WGPUTextureFormat := 327687;
   WGPUTextureFormat_WGPUTextureFormat_R8BG8A8Triplanar420Unorm : constant WGPUTextureFormat := 327688;
   WGPUTextureFormat_WGPUTextureFormat_R8BG8Biplanar422Unorm : constant WGPUTextureFormat := 327689;
   WGPUTextureFormat_WGPUTextureFormat_R8BG8Biplanar444Unorm : constant WGPUTextureFormat := 327690;
   WGPUTextureFormat_WGPUTextureFormat_R10X6BG10X6Biplanar422Unorm : constant WGPUTextureFormat := 327691;
   WGPUTextureFormat_WGPUTextureFormat_R10X6BG10X6Biplanar444Unorm : constant WGPUTextureFormat := 327692;
   WGPUTextureFormat_WGPUTextureFormat_External : constant WGPUTextureFormat := 327693;
   WGPUTextureFormat_WGPUTextureFormat_Force32 : constant WGPUTextureFormat := 2147483647;  -- webgpu.h:824

   subtype WGPUTextureSampleType is unsigned;
   WGPUTextureSampleType_WGPUTextureSampleType_Undefined : constant WGPUTextureSampleType := 0;
   WGPUTextureSampleType_WGPUTextureSampleType_Float : constant WGPUTextureSampleType := 1;
   WGPUTextureSampleType_WGPUTextureSampleType_UnfilterableFloat : constant WGPUTextureSampleType := 2;
   WGPUTextureSampleType_WGPUTextureSampleType_Depth : constant WGPUTextureSampleType := 3;
   WGPUTextureSampleType_WGPUTextureSampleType_Sint : constant WGPUTextureSampleType := 4;
   WGPUTextureSampleType_WGPUTextureSampleType_Uint : constant WGPUTextureSampleType := 5;
   WGPUTextureSampleType_WGPUTextureSampleType_Force32 : constant WGPUTextureSampleType := 2147483647;  -- webgpu.h:937

   subtype WGPUTextureViewDimension is unsigned;
   WGPUTextureViewDimension_WGPUTextureViewDimension_Undefined : constant WGPUTextureViewDimension := 0;
   WGPUTextureViewDimension_WGPUTextureViewDimension_1D : constant WGPUTextureViewDimension := 1;
   WGPUTextureViewDimension_WGPUTextureViewDimension_2D : constant WGPUTextureViewDimension := 2;
   WGPUTextureViewDimension_WGPUTextureViewDimension_2DArray : constant WGPUTextureViewDimension := 3;
   WGPUTextureViewDimension_WGPUTextureViewDimension_Cube : constant WGPUTextureViewDimension := 4;
   WGPUTextureViewDimension_WGPUTextureViewDimension_CubeArray : constant WGPUTextureViewDimension := 5;
   WGPUTextureViewDimension_WGPUTextureViewDimension_3D : constant WGPUTextureViewDimension := 6;
   WGPUTextureViewDimension_WGPUTextureViewDimension_Force32 : constant WGPUTextureViewDimension := 2147483647;  -- webgpu.h:946

   subtype WGPUVertexFormat is unsigned;
   WGPUVertexFormat_WGPUVertexFormat_Uint8 : constant WGPUVertexFormat := 1;
   WGPUVertexFormat_WGPUVertexFormat_Uint8x2 : constant WGPUVertexFormat := 2;
   WGPUVertexFormat_WGPUVertexFormat_Uint8x4 : constant WGPUVertexFormat := 3;
   WGPUVertexFormat_WGPUVertexFormat_Sint8 : constant WGPUVertexFormat := 4;
   WGPUVertexFormat_WGPUVertexFormat_Sint8x2 : constant WGPUVertexFormat := 5;
   WGPUVertexFormat_WGPUVertexFormat_Sint8x4 : constant WGPUVertexFormat := 6;
   WGPUVertexFormat_WGPUVertexFormat_Unorm8 : constant WGPUVertexFormat := 7;
   WGPUVertexFormat_WGPUVertexFormat_Unorm8x2 : constant WGPUVertexFormat := 8;
   WGPUVertexFormat_WGPUVertexFormat_Unorm8x4 : constant WGPUVertexFormat := 9;
   WGPUVertexFormat_WGPUVertexFormat_Snorm8 : constant WGPUVertexFormat := 10;
   WGPUVertexFormat_WGPUVertexFormat_Snorm8x2 : constant WGPUVertexFormat := 11;
   WGPUVertexFormat_WGPUVertexFormat_Snorm8x4 : constant WGPUVertexFormat := 12;
   WGPUVertexFormat_WGPUVertexFormat_Uint16 : constant WGPUVertexFormat := 13;
   WGPUVertexFormat_WGPUVertexFormat_Uint16x2 : constant WGPUVertexFormat := 14;
   WGPUVertexFormat_WGPUVertexFormat_Uint16x4 : constant WGPUVertexFormat := 15;
   WGPUVertexFormat_WGPUVertexFormat_Sint16 : constant WGPUVertexFormat := 16;
   WGPUVertexFormat_WGPUVertexFormat_Sint16x2 : constant WGPUVertexFormat := 17;
   WGPUVertexFormat_WGPUVertexFormat_Sint16x4 : constant WGPUVertexFormat := 18;
   WGPUVertexFormat_WGPUVertexFormat_Unorm16 : constant WGPUVertexFormat := 19;
   WGPUVertexFormat_WGPUVertexFormat_Unorm16x2 : constant WGPUVertexFormat := 20;
   WGPUVertexFormat_WGPUVertexFormat_Unorm16x4 : constant WGPUVertexFormat := 21;
   WGPUVertexFormat_WGPUVertexFormat_Snorm16 : constant WGPUVertexFormat := 22;
   WGPUVertexFormat_WGPUVertexFormat_Snorm16x2 : constant WGPUVertexFormat := 23;
   WGPUVertexFormat_WGPUVertexFormat_Snorm16x4 : constant WGPUVertexFormat := 24;
   WGPUVertexFormat_WGPUVertexFormat_Float16 : constant WGPUVertexFormat := 25;
   WGPUVertexFormat_WGPUVertexFormat_Float16x2 : constant WGPUVertexFormat := 26;
   WGPUVertexFormat_WGPUVertexFormat_Float16x4 : constant WGPUVertexFormat := 27;
   WGPUVertexFormat_WGPUVertexFormat_Float32 : constant WGPUVertexFormat := 28;
   WGPUVertexFormat_WGPUVertexFormat_Float32x2 : constant WGPUVertexFormat := 29;
   WGPUVertexFormat_WGPUVertexFormat_Float32x3 : constant WGPUVertexFormat := 30;
   WGPUVertexFormat_WGPUVertexFormat_Float32x4 : constant WGPUVertexFormat := 31;
   WGPUVertexFormat_WGPUVertexFormat_Uint32 : constant WGPUVertexFormat := 32;
   WGPUVertexFormat_WGPUVertexFormat_Uint32x2 : constant WGPUVertexFormat := 33;
   WGPUVertexFormat_WGPUVertexFormat_Uint32x3 : constant WGPUVertexFormat := 34;
   WGPUVertexFormat_WGPUVertexFormat_Uint32x4 : constant WGPUVertexFormat := 35;
   WGPUVertexFormat_WGPUVertexFormat_Sint32 : constant WGPUVertexFormat := 36;
   WGPUVertexFormat_WGPUVertexFormat_Sint32x2 : constant WGPUVertexFormat := 37;
   WGPUVertexFormat_WGPUVertexFormat_Sint32x3 : constant WGPUVertexFormat := 38;
   WGPUVertexFormat_WGPUVertexFormat_Sint32x4 : constant WGPUVertexFormat := 39;
   WGPUVertexFormat_WGPUVertexFormat_Unorm10_10_10_2 : constant WGPUVertexFormat := 40;
   WGPUVertexFormat_WGPUVertexFormat_Unorm8x4BGRA : constant WGPUVertexFormat := 41;
   WGPUVertexFormat_WGPUVertexFormat_Force32 : constant WGPUVertexFormat := 2147483647;  -- webgpu.h:956

   subtype WGPUVertexStepMode is unsigned;
   WGPUVertexStepMode_WGPUVertexStepMode_Undefined : constant WGPUVertexStepMode := 0;
   WGPUVertexStepMode_WGPUVertexStepMode_VertexBufferNotUsed : constant WGPUVertexStepMode := 1;
   WGPUVertexStepMode_WGPUVertexStepMode_Vertex : constant WGPUVertexStepMode := 2;
   WGPUVertexStepMode_WGPUVertexStepMode_Instance : constant WGPUVertexStepMode := 3;
   WGPUVertexStepMode_WGPUVertexStepMode_Force32 : constant WGPUVertexStepMode := 2147483647;  -- webgpu.h:1000

   subtype WGPUWaitStatus is unsigned;
   WGPUWaitStatus_WGPUWaitStatus_Success : constant WGPUWaitStatus := 1;
   WGPUWaitStatus_WGPUWaitStatus_TimedOut : constant WGPUWaitStatus := 2;
   WGPUWaitStatus_WGPUWaitStatus_UnsupportedTimeout : constant WGPUWaitStatus := 3;
   WGPUWaitStatus_WGPUWaitStatus_UnsupportedCount : constant WGPUWaitStatus := 4;
   WGPUWaitStatus_WGPUWaitStatus_UnsupportedMixedSources : constant WGPUWaitStatus := 5;
   WGPUWaitStatus_WGPUWaitStatus_Unknown : constant WGPUWaitStatus := 6;
   WGPUWaitStatus_WGPUWaitStatus_Force32 : constant WGPUWaitStatus := 2147483647;  -- webgpu.h:1007

   subtype WGPUBufferUsage is WGPUFlags;  -- webgpu.h:1017

   WGPUBufferUsage_None : aliased constant WGPUBufferUsage  -- webgpu.h:1018
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL20WGPUBufferUsage_None";

   WGPUBufferUsage_MapRead : aliased constant WGPUBufferUsage  -- webgpu.h:1019
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL23WGPUBufferUsage_MapRead";

   WGPUBufferUsage_MapWrite : aliased constant WGPUBufferUsage  -- webgpu.h:1020
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL24WGPUBufferUsage_MapWrite";

   WGPUBufferUsage_CopySrc : aliased constant WGPUBufferUsage  -- webgpu.h:1021
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL23WGPUBufferUsage_CopySrc";

   WGPUBufferUsage_CopyDst : aliased constant WGPUBufferUsage  -- webgpu.h:1022
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL23WGPUBufferUsage_CopyDst";

   WGPUBufferUsage_Index : aliased constant WGPUBufferUsage  -- webgpu.h:1023
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL21WGPUBufferUsage_Index";

   WGPUBufferUsage_Vertex : aliased constant WGPUBufferUsage  -- webgpu.h:1024
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL22WGPUBufferUsage_Vertex";

   WGPUBufferUsage_Uniform : aliased constant WGPUBufferUsage  -- webgpu.h:1025
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL23WGPUBufferUsage_Uniform";

   WGPUBufferUsage_Storage : aliased constant WGPUBufferUsage  -- webgpu.h:1026
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL23WGPUBufferUsage_Storage";

   WGPUBufferUsage_Indirect : aliased constant WGPUBufferUsage  -- webgpu.h:1027
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL24WGPUBufferUsage_Indirect";

   WGPUBufferUsage_QueryResolve : aliased constant WGPUBufferUsage  -- webgpu.h:1028
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL28WGPUBufferUsage_QueryResolve";

   subtype WGPUColorWriteMask is WGPUFlags;  -- webgpu.h:1029

   WGPUColorWriteMask_None : aliased constant WGPUColorWriteMask  -- webgpu.h:1030
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL23WGPUColorWriteMask_None";

   WGPUColorWriteMask_Red : aliased constant WGPUColorWriteMask  -- webgpu.h:1031
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL22WGPUColorWriteMask_Red";

   WGPUColorWriteMask_Green : aliased constant WGPUColorWriteMask  -- webgpu.h:1032
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL24WGPUColorWriteMask_Green";

   WGPUColorWriteMask_Blue : aliased constant WGPUColorWriteMask  -- webgpu.h:1033
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL23WGPUColorWriteMask_Blue";

   WGPUColorWriteMask_Alpha : aliased constant WGPUColorWriteMask  -- webgpu.h:1034
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL24WGPUColorWriteMask_Alpha";

   WGPUColorWriteMask_All : aliased constant WGPUColorWriteMask  -- webgpu.h:1035
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL22WGPUColorWriteMask_All";

   subtype WGPUHeapProperty is WGPUFlags;  -- webgpu.h:1036

   WGPUHeapProperty_DeviceLocal : aliased constant WGPUHeapProperty  -- webgpu.h:1037
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL28WGPUHeapProperty_DeviceLocal";

   WGPUHeapProperty_HostVisible : aliased constant WGPUHeapProperty  -- webgpu.h:1038
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL28WGPUHeapProperty_HostVisible";

   WGPUHeapProperty_HostCoherent : aliased constant WGPUHeapProperty  -- webgpu.h:1039
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL29WGPUHeapProperty_HostCoherent";

   WGPUHeapProperty_HostUncached : aliased constant WGPUHeapProperty  -- webgpu.h:1040
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL29WGPUHeapProperty_HostUncached";

   WGPUHeapProperty_HostCached : aliased constant WGPUHeapProperty  -- webgpu.h:1041
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL27WGPUHeapProperty_HostCached";

   subtype WGPUMapMode is WGPUFlags;  -- webgpu.h:1042

   WGPUMapMode_None : aliased constant WGPUMapMode  -- webgpu.h:1043
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL16WGPUMapMode_None";

   WGPUMapMode_Read : aliased constant WGPUMapMode  -- webgpu.h:1044
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL16WGPUMapMode_Read";

   WGPUMapMode_Write : aliased constant WGPUMapMode  -- webgpu.h:1045
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL17WGPUMapMode_Write";

   subtype WGPUShaderStage is WGPUFlags;  -- webgpu.h:1046

   WGPUShaderStage_None : aliased constant WGPUShaderStage  -- webgpu.h:1047
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL20WGPUShaderStage_None";

   WGPUShaderStage_Vertex : aliased constant WGPUShaderStage  -- webgpu.h:1048
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL22WGPUShaderStage_Vertex";

   WGPUShaderStage_Fragment : aliased constant WGPUShaderStage  -- webgpu.h:1049
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL24WGPUShaderStage_Fragment";

   WGPUShaderStage_Compute : aliased constant WGPUShaderStage  -- webgpu.h:1050
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL23WGPUShaderStage_Compute";

   subtype WGPUTextureUsage is WGPUFlags;  -- webgpu.h:1051

   WGPUTextureUsage_None : aliased constant WGPUTextureUsage  -- webgpu.h:1052
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL21WGPUTextureUsage_None";

   WGPUTextureUsage_CopySrc : aliased constant WGPUTextureUsage  -- webgpu.h:1053
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL24WGPUTextureUsage_CopySrc";

   WGPUTextureUsage_CopyDst : aliased constant WGPUTextureUsage  -- webgpu.h:1054
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL24WGPUTextureUsage_CopyDst";

   WGPUTextureUsage_TextureBinding : aliased constant WGPUTextureUsage  -- webgpu.h:1055
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL31WGPUTextureUsage_TextureBinding";

   WGPUTextureUsage_StorageBinding : aliased constant WGPUTextureUsage  -- webgpu.h:1056
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL31WGPUTextureUsage_StorageBinding";

   WGPUTextureUsage_RenderAttachment : aliased constant WGPUTextureUsage  -- webgpu.h:1057
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL33WGPUTextureUsage_RenderAttachment";

   WGPUTextureUsage_TransientAttachment : aliased constant WGPUTextureUsage  -- webgpu.h:1058
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL36WGPUTextureUsage_TransientAttachment";

   WGPUTextureUsage_StorageAttachment : aliased constant WGPUTextureUsage  -- webgpu.h:1059
   with Import => True,
        Convention => CPP,
        External_Name => "_ZL34WGPUTextureUsage_StorageAttachment";

   type WGPUBufferMapCallback is access procedure (arg1 : WGPUBufferMapAsyncStatus; arg2 : T_Address)
   with Convention => C;  -- webgpu.h:1060

   type WGPUCallback is access procedure (arg1 : T_Address)
   with Convention => C;  -- webgpu.h:1061

   type WGPUCompilationInfo;
   type WGPUCompilationInfoCallback is access procedure
        (arg1 : WGPUCompilationInfoRequestStatus;
         arg2 : access constant WGPUCompilationInfo;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:1062

   type T_WGPUStringView;
   type WGPUCreateComputePipelineAsyncCallback is access procedure
        (arg1 : WGPUCreatePipelineAsyncStatus;
         arg2 : WGPUComputePipeline;
         arg3 : T_WGPUStringView;
         arg4 : T_Address)
   with Convention => C;  -- webgpu.h:1063

   type WGPUCreateRenderPipelineAsyncCallback is access procedure
        (arg1 : WGPUCreatePipelineAsyncStatus;
         arg2 : WGPURenderPipeline;
         arg3 : T_WGPUStringView;
         arg4 : T_Address)
   with Convention => C;  -- webgpu.h:1064

   type WGPUDawnLoadCacheDataFunction is access function
        (arg1 : T_Address;
         arg2 : T_Size;
         arg3 : T_Address;
         arg4 : T_Size;
         arg5 : T_Address) return T_Size
   with Convention => C;  -- webgpu.h:1065

   type WGPUDawnStoreCacheDataFunction is access procedure
        (arg1 : T_Address;
         arg2 : T_Size;
         arg3 : T_Address;
         arg4 : T_Size;
         arg5 : T_Address)
   with Convention => C;  -- webgpu.h:1066

   type T_WGPUDeviceLostCallback_DEPRECATED is access procedure
        (arg1 : T_Device_Lost_Reason;
         arg2 : T_WGPUStringView;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:1067

   type T_WGPUDeviceLostCallback is access procedure
        (arg1 : T_WGPUDevice;
         arg2 : T_Device_Lost_Reason;
         arg3 : T_WGPUStringView;
         arg4 : T_Address)
   with Convention => C;  -- webgpu.h:1068

   type T_WGPUErrorCallback is access procedure
        (arg1 : T_Error_Kind;
         arg2 : T_WGPUStringView;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:1069

   type WGPULoggingCallback is access procedure
        (arg1 : WGPULoggingType;
         arg2 : T_WGPUStringView;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:1070

   type WGPUPopErrorScopeCallback is access procedure
        (arg1 : WGPUPopErrorScopeStatus;
         arg2 : T_Error_Kind;
         arg3 : T_WGPUStringView;
         arg4 : T_Address)
   with Convention => C;  -- webgpu.h:1071

   type WGPUProc is access procedure
   with Convention => C;  -- webgpu.h:1072

   type WGPUQueueWorkDoneCallback is access procedure (arg1 : WGPUQueueWorkDoneStatus; arg2 : T_Address)
   with Convention => C;  -- webgpu.h:1073

   type WGPURequestAdapterCallback is access procedure
        (arg1 : T_Request_Adapter_Status;
         arg2 : T_WGPUAdapter;
         arg3 : T_WGPUStringView;
         arg4 : T_Address)
   with Convention => C;  -- webgpu.h:1074

   type T_WGPURequestDeviceCallback is access procedure
        (arg1 : T_Request_Device_Status;
         arg2 : T_WGPUDevice;
         arg3 : T_WGPUStringView;
         arg4 : T_Address)
   with Convention => C;  -- webgpu.h:1075

  -- Callback function pointers
   type WGPUBufferMapCallback2 is access procedure
        (arg1 : WGPUMapAsyncStatus;
         arg2 : T_WGPUStringView;
         arg3 : T_Address;
         arg4 : T_Address)
   with Convention => C;  -- webgpu.h:1078

   type WGPUCompilationInfoCallback2 is access procedure
        (arg1 : WGPUCompilationInfoRequestStatus;
         arg2 : access constant WGPUCompilationInfo;
         arg3 : T_Address;
         arg4 : T_Address)
   with Convention => C;  -- webgpu.h:1079

   type WGPUCreateComputePipelineAsyncCallback2 is access procedure
        (arg1 : WGPUCreatePipelineAsyncStatus;
         arg2 : WGPUComputePipeline;
         arg3 : T_WGPUStringView;
         arg4 : T_Address;
         arg5 : T_Address)
   with Convention => C;  -- webgpu.h:1080

   type WGPUCreateRenderPipelineAsyncCallback2 is access procedure
        (arg1 : WGPUCreatePipelineAsyncStatus;
         arg2 : WGPURenderPipeline;
         arg3 : T_WGPUStringView;
         arg4 : T_Address;
         arg5 : T_Address)
   with Convention => C;  -- webgpu.h:1081

   type T_WGPUDeviceLostCallback2 is access procedure
        (arg1 : T_WGPUDevice;
         arg2 : T_Device_Lost_Reason;
         arg3 : T_WGPUStringView;
         arg4 : T_Address;
         arg5 : T_Address)
   with Convention => C;  -- webgpu.h:1082

   type WGPUPopErrorScopeCallback2 is access procedure
        (arg1 : WGPUPopErrorScopeStatus;
         arg2 : T_Error_Kind;
         arg3 : T_WGPUStringView;
         arg4 : T_Address;
         arg5 : T_Address)
   with Convention => C;  -- webgpu.h:1083

   type WGPUQueueWorkDoneCallback2 is access procedure
        (arg1 : WGPUQueueWorkDoneStatus;
         arg2 : T_Address;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:1084

   type WGPURequestAdapterCallback2 is access procedure
        (arg1 : T_Request_Adapter_Status;
         arg2 : T_WGPUAdapter;
         arg3 : T_WGPUStringView;
         arg4 : T_Address;
         arg5 : T_Address)
   with Convention => C;  -- webgpu.h:1085

   type WGPURequestDeviceCallback2 is access procedure
        (arg1 : T_Request_Device_Status;
         arg2 : T_WGPUDevice;
         arg3 : T_WGPUStringView;
         arg4 : T_Address;
         arg5 : T_Address)
   with Convention => C;  -- webgpu.h:1086

   type T_WGPUUncapturedErrorCallback is access procedure (
		device    : in T_WGPUDevice;
		kind      : in T_Error_Kind;
		message   : in T_WGPUStringView;
		userdata1 : in T_Address;
		userdata2 : in T_Address
   ) with Convention => C;  -- webgpu.h:1087

   type T_WGPUChainedStruct;
   type T_WGPUChainedStruct is record
      next : access constant T_WGPUChainedStruct;  -- webgpu.h:1090
      sType : aliased T_WGPUSType;  -- webgpu.h:1091
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1089

   type T_WGPUChainedStructOut;
   type T_WGPUChainedStructOut is record
      next : access T_WGPUChainedStructOut;  -- webgpu.h:1095
      sType : aliased T_WGPUSType;  -- webgpu.h:1096
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1094

   type WGPUBufferMapCallbackInfo2 is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1103
      mode : aliased T_Callback_Mode;  -- webgpu.h:1104
      callback : WGPUBufferMapCallback2;  -- webgpu.h:1105
      userdata1 : T_Address;  -- webgpu.h:1106
      userdata2 : T_Address;  -- webgpu.h:1107
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1102

   type WGPUCompilationInfoCallbackInfo2 is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1119
      mode : aliased T_Callback_Mode;  -- webgpu.h:1120
      callback : WGPUCompilationInfoCallback2;  -- webgpu.h:1121
      userdata1 : T_Address;  -- webgpu.h:1122
      userdata2 : T_Address;  -- webgpu.h:1123
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1118

   type WGPUCreateComputePipelineAsyncCallbackInfo2 is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1135
      mode : aliased T_Callback_Mode;  -- webgpu.h:1136
      callback : WGPUCreateComputePipelineAsyncCallback2;  -- webgpu.h:1137
      userdata1 : T_Address;  -- webgpu.h:1138
      userdata2 : T_Address;  -- webgpu.h:1139
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1134

   type WGPUCreateRenderPipelineAsyncCallbackInfo2 is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1151
      mode : aliased T_Callback_Mode;  -- webgpu.h:1152
      callback : WGPUCreateRenderPipelineAsyncCallback2;  -- webgpu.h:1153
      userdata1 : T_Address;  -- webgpu.h:1154
      userdata2 : T_Address;  -- webgpu.h:1155
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1150

	type T_WGPUDeviceLostCallbackInfo2 is record
		nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1167
		mode        : aliased T_Callback_Mode;  -- webgpu.h:1168
		callback    : T_WGPUDeviceLostCallback2;  -- webgpu.h:1169
		userdata1   : T_Address;  -- webgpu.h:1170
		userdata2   : T_Address;  -- webgpu.h:1171
	end record
	with Convention => C_Pass_By_Copy;  -- webgpu.h:1166

   type WGPUPopErrorScopeCallbackInfo2 is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1183
      mode : aliased T_Callback_Mode;  -- webgpu.h:1184
      callback : WGPUPopErrorScopeCallback2;  -- webgpu.h:1185
      userdata1 : T_Address;  -- webgpu.h:1186
      userdata2 : T_Address;  -- webgpu.h:1187
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1182

   type WGPUQueueWorkDoneCallbackInfo2 is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1199
      mode : aliased T_Callback_Mode;  -- webgpu.h:1200
      callback : WGPUQueueWorkDoneCallback2;  -- webgpu.h:1201
      userdata1 : T_Address;  -- webgpu.h:1202
      userdata2 : T_Address;  -- webgpu.h:1203
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1198

   type WGPURequestAdapterCallbackInfo2 is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1215
      mode : aliased T_Callback_Mode;  -- webgpu.h:1216
      callback : WGPURequestAdapterCallback2;  -- webgpu.h:1217
      userdata1 : T_Address;  -- webgpu.h:1218
      userdata2 : T_Address;  -- webgpu.h:1219
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1214

   type WGPURequestDeviceCallbackInfo2 is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1231
      mode : aliased T_Callback_Mode;  -- webgpu.h:1232
      callback : WGPURequestDeviceCallback2;  -- webgpu.h:1233
      userdata1 : T_Address;  -- webgpu.h:1234
      userdata2 : T_Address;  -- webgpu.h:1235
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1230

	type T_WGPUUncapturedErrorCallbackInfo2 is record
		nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1247
		callback    : T_WGPUUncapturedErrorCallback;  -- webgpu.h:1248
		userdata1   : T_Address;  -- webgpu.h:1249
		userdata2   : T_Address;  -- webgpu.h:1250
	end record
	with Convention => C_Pass_By_Copy;  -- webgpu.h:1246

   type WGPUINTERNAL_u_HAVE_EMDAWNWEBGPU_HEADER is record
      unused : aliased T_WGPUBool;  -- webgpu.h:1262
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1261

  -- Can be chained in WGPUAdapterInfo
   type WGPUAdapterPropertiesD3D is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:1271
      shaderModel : aliased T_UInt32;  -- webgpu.h:1272
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1270

  -- Can be chained in WGPUAdapterInfo
   type WGPUAdapterPropertiesVk is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:1282
      driverVersion : aliased T_UInt32;  -- webgpu.h:1283
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1281

   type WGPUBindGroupEntry is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1292
      binding : aliased T_UInt32;  -- webgpu.h:1293
      buffer : WGPUBuffer;  -- webgpu.h:1294
      offset : aliased T_UInt64;  -- webgpu.h:1295
      size : aliased T_UInt64;  -- webgpu.h:1296
      sampler : WGPUSampler;  -- webgpu.h:1297
      textureView : WGPUTextureView;  -- webgpu.h:1298
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1291

   type WGPUBlendComponent is record
      operation : aliased WGPUBlendOperation;  -- webgpu.h:1312
      srcFactor : aliased WGPUBlendFactor;  -- webgpu.h:1313
      dstFactor : aliased WGPUBlendFactor;  -- webgpu.h:1314
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1311

   type WGPUBufferBindingLayout is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1324
      c_type : aliased WGPUBufferBindingType;  -- webgpu.h:1325
      hasDynamicOffset : aliased T_WGPUBool;  -- webgpu.h:1326
      minBindingSize : aliased T_UInt64;  -- webgpu.h:1327
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1323

  -- Can be chained in WGPUBufferDescriptor
   type WGPUBufferHostMappedPointer is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1339
      pointer : T_Address;  -- webgpu.h:1340
      disposeCallback : WGPUCallback;  -- webgpu.h:1341
      userdata : T_Address;  -- webgpu.h:1342
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1338

   type WGPUBufferMapCallbackInfo is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1353
      mode : aliased T_Callback_Mode;  -- webgpu.h:1354
      callback : WGPUBufferMapCallback;  -- webgpu.h:1355
      userdata : T_Address;  -- webgpu.h:1356
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1352

   type WGPUColor is record
      r : aliased double;  -- webgpu.h:1367
      g : aliased double;  -- webgpu.h:1368
      b : aliased double;  -- webgpu.h:1369
      a : aliased double;  -- webgpu.h:1370
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1366

  -- Can be chained in WGPUColorTargetState
   type WGPUColorTargetStateExpandResolveTextureDawn is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1382
      enabled : aliased T_WGPUBool;  -- webgpu.h:1383
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1381

   type WGPUCompilationInfoCallbackInfo is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1392
      mode : aliased T_Callback_Mode;  -- webgpu.h:1393
      callback : WGPUCompilationInfoCallback;  -- webgpu.h:1394
      userdata : T_Address;  -- webgpu.h:1395
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1391

   type WGPUComputePassTimestampWrites is record
      querySet : WGPUQuerySet;  -- webgpu.h:1406
      beginningOfPassWriteIndex : aliased T_UInt32;  -- webgpu.h:1407
      endOfPassWriteIndex : aliased T_UInt32;  -- webgpu.h:1408
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1405

   type WGPUCopyTextureForBrowserOptions is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1418
      flipY : aliased T_WGPUBool;  -- webgpu.h:1419
      needsColorSpaceConversion : aliased T_WGPUBool;  -- webgpu.h:1420
      srcAlphaMode : aliased WGPUAlphaMode;  -- webgpu.h:1421
      srcTransferFunctionParameters : access float;  -- webgpu.h:1422
      conversionMatrix : access float;  -- webgpu.h:1423
      dstTransferFunctionParameters : access float;  -- webgpu.h:1424
      dstAlphaMode : aliased WGPUAlphaMode;  -- webgpu.h:1425
      internalUsage : aliased T_WGPUBool;  -- webgpu.h:1426
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1417

   type WGPUCreateComputePipelineAsyncCallbackInfo is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1442
      mode : aliased T_Callback_Mode;  -- webgpu.h:1443
      callback : WGPUCreateComputePipelineAsyncCallback;  -- webgpu.h:1444
      userdata : T_Address;  -- webgpu.h:1445
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1441

   type WGPUCreateRenderPipelineAsyncCallbackInfo is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1456
      mode : aliased T_Callback_Mode;  -- webgpu.h:1457
      callback : WGPUCreateRenderPipelineAsyncCallback;  -- webgpu.h:1458
      userdata : T_Address;  -- webgpu.h:1459
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1455

  -- Can be chained in T_WGPUInstanceDescriptor
   type WGPUDawnWGSLBlocklist is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1471
      blocklistedFeatureCount : aliased T_Size;  -- webgpu.h:1472
      blocklistedFeatures : T_Address;  -- webgpu.h:1473
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1470

  -- Can be chained in WGPUAdapterInfo
   type WGPUDawnAdapterPropertiesPowerPreference is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:1484
      powerPreference : aliased WGPUPowerPreference;  -- webgpu.h:1485
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1483

  -- Can be chained in WGPUBufferDescriptor
   type WGPUDawnBufferDescriptorErrorInfoFromWireClient is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1495
      outOfMemory : aliased T_WGPUBool;  -- webgpu.h:1496
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1494

  -- Can be chained in WGPUComputePipelineDescriptor
   type WGPUDawnComputePipelineFullSubgroups is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1506
      requiresFullSubgroups : aliased T_WGPUBool;  -- webgpu.h:1507
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1505

  -- Can be chained in T_WGPUCommandEncoderDescriptor
   type WGPUDawnEncoderInternalUsageDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1517
      useInternalUsages : aliased T_WGPUBool;  -- webgpu.h:1518
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1516

  -- Can be chained in T_WGPUSupportedLimits
   type WGPUDawnExperimentalImmediateDataLimits is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:1528
      maxImmediateDataRangeByteSize : aliased T_UInt32;  -- webgpu.h:1529
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1527

  -- Can be chained in T_WGPUSupportedLimits
   type WGPUDawnExperimentalSubgroupLimits is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:1539
      minSubgroupSize : aliased T_UInt32;  -- webgpu.h:1540
      maxSubgroupSize : aliased T_UInt32;  -- webgpu.h:1541
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1538

  -- Can be chained in WGPURenderPassColorAttachment
   type WGPUDawnRenderPassColorAttachmentRenderToSingleSampled is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1552
      implicitSampleCount : aliased T_UInt32;  -- webgpu.h:1553
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1551

  -- Can be chained in WGPUShaderModuleDescriptor
   type WGPUDawnShaderModuleSPIRVOptionsDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1563
      allowNonUniformDerivatives : aliased T_WGPUBool;  -- webgpu.h:1564
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1562

  -- Can be chained in WGPUTextureDescriptor
   type WGPUDawnTextureInternalUsageDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1574
      internalUsage : aliased WGPUTextureUsage;  -- webgpu.h:1575
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1573

  -- Can be chained in T_WGPUInstanceDescriptor
  -- Can be chained in T_WGPURequestAdapterOptions
  -- Can be chained in T_WGPUDeviceDescriptor
   type WGPUDawnTogglesDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1587
      enabledToggleCount : aliased T_Size;  -- webgpu.h:1588
      enabledToggles : T_Address;  -- webgpu.h:1589
      disabledToggleCount : aliased T_Size;  -- webgpu.h:1590
      disabledToggles : T_Address;  -- webgpu.h:1591
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1586

  -- Can be chained in T_WGPUInstanceDescriptor
   type WGPUDawnWireWGSLControl is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1604
      enableExperimental : aliased T_WGPUBool;  -- webgpu.h:1605
      enableUnsafe : aliased T_WGPUBool;  -- webgpu.h:1606
      enableTesting : aliased T_WGPUBool;  -- webgpu.h:1607
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1603

   type T_WGPUDeviceLostCallbackInfo is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1618
      mode        : aliased T_Callback_Mode;  -- webgpu.h:1619
      callback    : T_WGPUDeviceLostCallback;  -- webgpu.h:1620
      userdata    : T_Address;  -- webgpu.h:1621
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1617

   type WGPUDrmFormatProperties is record
      modifier : aliased T_UInt64;  -- webgpu.h:1632
      modifierPlaneCount : aliased T_UInt32;  -- webgpu.h:1633
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1631

   type WGPUExtent2D is record
      width : aliased T_UInt32;  -- webgpu.h:1642
      height : aliased T_UInt32;  -- webgpu.h:1643
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1641

   type WGPUExtent3D is record
      width : aliased T_UInt32;  -- webgpu.h:1652
      height : aliased T_UInt32;  -- webgpu.h:1653
      depthOrArrayLayers : aliased T_UInt32;  -- webgpu.h:1654
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1651

  -- Can be chained in WGPUBindGroupEntry
   type WGPUExternalTextureBindingEntry is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1665
      externalTexture : WGPUExternalTexture;  -- webgpu.h:1666
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1664

  -- Can be chained in WGPUBindGroupLayoutEntry
   type WGPUExternalTextureBindingLayout is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1676
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1675

   type WGPUFormatCapabilities is record
      nextInChain : access T_WGPUChainedStructOut;  -- webgpu.h:1684
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1683

   type WGPUFuture is record
      id : aliased T_UInt64;  -- webgpu.h:1692
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1691

   type WGPUInstanceFeatures is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1700
      timedWaitAnyEnable : aliased T_WGPUBool;  -- webgpu.h:1701
      timedWaitAnyMaxCount : aliased T_Size;  -- webgpu.h:1702
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1699

	type T_Device_Limits is record
		Max_Texture_Dimension1D                         : aliased T_UInt32 := 0;
		Max_Texture_Dimension2D                         : aliased T_UInt32 := 0;
		Max_Texture_Dimension3D                         : aliased T_UInt32 := 0;
		Max_Texture_Array_Layers                        : aliased T_UInt32 := 0;
		Max_Bind_Groups                                 : aliased T_UInt32 := 0;
		Max_Bind_Groups_Plus_Vertex_Buffers             : aliased T_UInt32 := 0;
		Max_Bindings_Per_Bind_Group                     : aliased T_UInt32 := 0;
		Max_Dynamic_Uniform_Buffers_Per_Pipeline_Layout : aliased T_UInt32 := 0;
		Max_Dynamic_Storage_Buffers_Per_Pipeline_Layout : aliased T_UInt32 := 0;
		Max_Sampled_Textures_Per_Shader_Stage           : aliased T_UInt32 := 0;
		Max_Samplers_Per_Shader_Stage                   : aliased T_UInt32 := 0;
		Max_Storage_Buffers_Per_Shader_Stage            : aliased T_UInt32 := 0;
		Max_Storage_Textures_Per_Shader_Stage           : aliased T_UInt32 := 0;
		Max_Uniform_Buffers_Per_Shader_Stage            : aliased T_UInt32 := 0;
		Max_Uniform_Buffer_Binding_Size                 : aliased T_UInt64 := 0;
		Max_Storage_Buffer_Binding_Size                 : aliased T_UInt64 := 0;
		Min_Uniform_Buffer_Offset_Alignment             : aliased T_UInt32 := 0;
		Min_Storage_Buffer_Offset_Alignment             : aliased T_UInt32 := 0;
		Max_Vertex_Buffers                              : aliased T_UInt32 := 0;
		Max_Buffer_Size                                 : aliased T_UInt64 := 0;
		Max_Vertex_Attributes                           : aliased T_UInt32 := 0;
		Max_Vertex_Buffer_Array_Stride                  : aliased T_UInt32 := 0;
		Max_Inter_Stage_Shader_Components               : aliased T_UInt32 := 0;
		Max_Inter_Stage_Shader_Variables                : aliased T_UInt32 := 0;
		Max_Color_Attachments                           : aliased T_UInt32 := 0;
		Max_Color_Attachment_Bytes_Per_Sample           : aliased T_UInt32 := 0;
		Max_Compute_Workgroup_Storage_Size              : aliased T_UInt32 := 0;
		Max_Compute_Invocations_Per_Workgroup           : aliased T_UInt32 := 0;
		Max_Compute_Workgroup_Size_X                    : aliased T_UInt32 := 0;
		Max_Compute_Workgroup_Size_Y                    : aliased T_UInt32 := 0;
		Max_Compute_Workgroup_Size_Z                    : aliased T_UInt32 := 0;
		Max_Compute_Workgroups_Per_Dimension            : aliased T_UInt32 := 0;
	end record
	with Convention => C_Pass_By_Copy;

   type WGPUMemoryHeapInfo is record
      properties : aliased WGPUHeapProperty;  -- webgpu.h:1782
      size : aliased T_UInt64;  -- webgpu.h:1783
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1781

   type WGPUMultisampleState is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1792
      count : aliased T_UInt32;  -- webgpu.h:1793
      mask : aliased T_UInt32;  -- webgpu.h:1794
      alphaToCoverageEnabled : aliased T_WGPUBool;  -- webgpu.h:1795
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1791

   type WGPUOrigin2D is record
      x : aliased T_UInt32;  -- webgpu.h:1806
      y : aliased T_UInt32;  -- webgpu.h:1807
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1805

   type WGPUOrigin3D is record
      x : aliased T_UInt32;  -- webgpu.h:1816
      y : aliased T_UInt32;  -- webgpu.h:1817
      z : aliased T_UInt32;  -- webgpu.h:1818
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1815

   type WGPUPipelineLayoutStorageAttachment is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1828
      offset : aliased T_UInt64;  -- webgpu.h:1829
      format : aliased WGPUTextureFormat;  -- webgpu.h:1830
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1827

   type WGPUPopErrorScopeCallbackInfo is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1840
      mode : aliased T_Callback_Mode;  -- webgpu.h:1841
      callback : WGPUPopErrorScopeCallback;  -- webgpu.h:1842
      oldCallback : T_WGPUErrorCallback;  -- webgpu.h:1843
      userdata : T_Address;  -- webgpu.h:1844
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1839

   type WGPUPrimitiveState is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1856
      topology : aliased WGPUPrimitiveTopology;  -- webgpu.h:1857
      stripIndexFormat : aliased WGPUIndexFormat;  -- webgpu.h:1858
      frontFace : aliased WGPUFrontFace;  -- webgpu.h:1859
      cullMode : aliased WGPUCullMode;  -- webgpu.h:1860
      unclippedDepth : aliased T_WGPUBool;  -- webgpu.h:1861
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1855

   type WGPUQueueWorkDoneCallbackInfo is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1874
      mode : aliased T_Callback_Mode;  -- webgpu.h:1875
      callback : WGPUQueueWorkDoneCallback;  -- webgpu.h:1876
      userdata : T_Address;  -- webgpu.h:1877
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1873

   type WGPURenderPassDepthStencilAttachment is record
      view : WGPUTextureView;  -- webgpu.h:1888
      depthLoadOp : aliased WGPULoadOp;  -- webgpu.h:1889
      depthStoreOp : aliased WGPUStoreOp;  -- webgpu.h:1890
      depthClearValue : aliased float;  -- webgpu.h:1891
      depthReadOnly : aliased T_WGPUBool;  -- webgpu.h:1892
      stencilLoadOp : aliased WGPULoadOp;  -- webgpu.h:1893
      stencilStoreOp : aliased WGPUStoreOp;  -- webgpu.h:1894
      stencilClearValue : aliased T_UInt32;  -- webgpu.h:1895
      stencilReadOnly : aliased T_WGPUBool;  -- webgpu.h:1896
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1887

  -- Can be chained in WGPURenderPassDescriptor
   type WGPURenderPassDescriptorExpandResolveRect is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1913
      x : aliased T_UInt32;  -- webgpu.h:1914
      y : aliased T_UInt32;  -- webgpu.h:1915
      width : aliased T_UInt32;  -- webgpu.h:1916
      height : aliased T_UInt32;  -- webgpu.h:1917
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1912

  -- Can be chained in WGPURenderPassDescriptor
   type WGPURenderPassMaxDrawCount is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:1930
      maxDrawCount : aliased T_UInt64;  -- webgpu.h:1931
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1929

   type WGPURenderPassTimestampWrites is record
      querySet : WGPUQuerySet;  -- webgpu.h:1940
      beginningOfPassWriteIndex : aliased T_UInt32;  -- webgpu.h:1941
      endOfPassWriteIndex : aliased T_UInt32;  -- webgpu.h:1942
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1939

   type WGPURequestAdapterCallbackInfo is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1952
      mode : aliased T_Callback_Mode;  -- webgpu.h:1953
      callback : WGPURequestAdapterCallback;  -- webgpu.h:1954
      userdata : T_Address;  -- webgpu.h:1955
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1951

   type T_WGPURequestAdapterOptions is record
      nextInChain          : access constant T_WGPUChainedStruct;  -- webgpu.h:1966
      compatibleSurface    : T_WGPUSurface;  -- webgpu.h:1967
      powerPreference      : aliased WGPUPowerPreference;  -- webgpu.h:1968
      backendType          : aliased WGPUBackendType;  -- webgpu.h:1969
      forceFallbackAdapter : aliased T_WGPUBool;  -- webgpu.h:1970
      compatibilityMode    : aliased T_WGPUBool;  -- webgpu.h:1971
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1965

   type WGPURequestDeviceCallbackInfo is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1984
      mode : aliased T_Callback_Mode;  -- webgpu.h:1985
      callback : T_WGPURequestDeviceCallback;  -- webgpu.h:1986
      userdata : T_Address;  -- webgpu.h:1987
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1983

   type WGPUSamplerBindingLayout is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:1998
      c_type : aliased WGPUSamplerBindingType;  -- webgpu.h:1999
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:1997

  -- Can be chained in WGPUShaderModuleDescriptor
   type WGPUShaderModuleCompilationOptions is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2009
      strictMath : aliased T_WGPUBool;  -- webgpu.h:2010
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2008

  -- Can be chained in WGPUShaderModuleDescriptor
   type WGPUShaderSourceSPIRV is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2020
      codeSize : aliased T_UInt32;  -- webgpu.h:2021
      code : access T_UInt32;  -- webgpu.h:2022
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2019

   type WGPUSharedBufferMemoryBeginAccessDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2032
      initialized : aliased T_WGPUBool;  -- webgpu.h:2033
      fenceCount : aliased T_Size;  -- webgpu.h:2034
      fences : T_Address;  -- webgpu.h:2035
      signaledValues : access T_UInt64;  -- webgpu.h:2036
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2031

   type WGPUSharedBufferMemoryEndAccessState is record
      nextInChain : access T_WGPUChainedStructOut;  -- webgpu.h:2048
      initialized : aliased T_WGPUBool;  -- webgpu.h:2049
      fenceCount : aliased T_Size;  -- webgpu.h:2050
      fences : T_Address;  -- webgpu.h:2051
      signaledValues : access T_UInt64;  -- webgpu.h:2052
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2047

   type WGPUSharedBufferMemoryProperties is record
      nextInChain : access T_WGPUChainedStructOut;  -- webgpu.h:2064
      usage : aliased WGPUBufferUsage;  -- webgpu.h:2065
      size : aliased T_UInt64;  -- webgpu.h:2066
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2063

  -- Can be chained in WGPUSharedFenceDescriptor
   type WGPUSharedFenceDXGISharedHandleDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2077
      handle : T_Address;  -- webgpu.h:2078
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2076

  -- Can be chained in T_WGPUSharedFenceExportInfo
   type WGPUSharedFenceDXGISharedHandleExportInfo is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:2088
      handle : T_Address;  -- webgpu.h:2089
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2087

  -- Can be chained in WGPUSharedFenceDescriptor
   type WGPUSharedFenceMTLSharedEventDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2099
      sharedEvent : T_Address;  -- webgpu.h:2100
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2098

  -- Can be chained in T_WGPUSharedFenceExportInfo
   type WGPUSharedFenceMTLSharedEventExportInfo is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:2110
      sharedEvent : T_Address;  -- webgpu.h:2111
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2109

   type T_WGPUSharedFenceExportInfo is record
      nextInChain : access T_WGPUChainedStructOut;  -- webgpu.h:2120
      c_type : aliased WGPUSharedFenceType;  -- webgpu.h:2121
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2119

  -- Can be chained in WGPUSharedFenceDescriptor
   type WGPUSharedFenceSyncFDDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2131
      handle : aliased int;  -- webgpu.h:2132
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2130

  -- Can be chained in T_WGPUSharedFenceExportInfo
   type WGPUSharedFenceSyncFDExportInfo is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:2142
      handle : aliased int;  -- webgpu.h:2143
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2141

  -- Can be chained in WGPUSharedFenceDescriptor
   type WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2153
      handle : aliased int;  -- webgpu.h:2154
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2152

  -- Can be chained in T_WGPUSharedFenceExportInfo
   type WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:2164
      handle : aliased int;  -- webgpu.h:2165
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2163

  -- Can be chained in WGPUSharedFenceDescriptor
   type WGPUSharedFenceVkSemaphoreZirconHandleDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2175
      handle : aliased T_UInt32;  -- webgpu.h:2176
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2174

  -- Can be chained in T_WGPUSharedFenceExportInfo
   type WGPUSharedFenceVkSemaphoreZirconHandleExportInfo is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:2186
      handle : aliased T_UInt32;  -- webgpu.h:2187
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2185

  -- Can be chained in WGPUSharedTextureMemoryBeginAccessDescriptor
   type WGPUSharedTextureMemoryD3DSwapchainBeginState is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2197
      isSwapchain : aliased T_WGPUBool;  -- webgpu.h:2198
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2196

  -- Can be chained in WGPUSharedTextureMemoryDescriptor
   type WGPUSharedTextureMemoryDXGISharedHandleDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2208
      handle : T_Address;  -- webgpu.h:2209
      useKeyedMutex : aliased T_WGPUBool;  -- webgpu.h:2210
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2207

  -- Can be chained in WGPUSharedTextureMemoryDescriptor
   type WGPUSharedTextureMemoryEGLImageDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2221
      image : T_Address;  -- webgpu.h:2222
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2220

  -- Can be chained in WGPUSharedTextureMemoryDescriptor
   type WGPUSharedTextureMemoryIOSurfaceDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2232
      ioSurface : T_Address;  -- webgpu.h:2233
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2231

  -- Can be chained in WGPUSharedTextureMemoryDescriptor
   type WGPUSharedTextureMemoryAHardwareBufferDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2243
      handle : T_Address;  -- webgpu.h:2244
      useExternalFormat : aliased T_WGPUBool;  -- webgpu.h:2245
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2242

   type WGPUSharedTextureMemoryBeginAccessDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2255
      concurrentRead : aliased T_WGPUBool;  -- webgpu.h:2256
      initialized : aliased T_WGPUBool;  -- webgpu.h:2257
      fenceCount : aliased T_Size;  -- webgpu.h:2258
      fences : T_Address;  -- webgpu.h:2259
      signaledValues : access T_UInt64;  -- webgpu.h:2260
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2254

   type WGPUSharedTextureMemoryDmaBufPlane is record
      fd : aliased int;  -- webgpu.h:2273
      offset : aliased T_UInt64;  -- webgpu.h:2274
      stride : aliased T_UInt32;  -- webgpu.h:2275
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2272

   type WGPUSharedTextureMemoryEndAccessState is record
      nextInChain : access T_WGPUChainedStructOut;  -- webgpu.h:2285
      initialized : aliased T_WGPUBool;  -- webgpu.h:2286
      fenceCount : aliased T_Size;  -- webgpu.h:2287
      fences : T_Address;  -- webgpu.h:2288
      signaledValues : access T_UInt64;  -- webgpu.h:2289
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2284

  -- Can be chained in WGPUSharedTextureMemoryDescriptor
   type WGPUSharedTextureMemoryOpaqueFDDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2302
      vkImageCreateInfo : T_Address;  -- webgpu.h:2303
      memoryFD : aliased int;  -- webgpu.h:2304
      memoryTypeIndex : aliased T_UInt32;  -- webgpu.h:2305
      allocationSize : aliased T_UInt64;  -- webgpu.h:2306
      dedicatedAllocation : aliased T_WGPUBool;  -- webgpu.h:2307
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2301

  -- Can be chained in WGPUSharedTextureMemoryDescriptor
   type WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2321
      dedicatedAllocation : aliased T_WGPUBool;  -- webgpu.h:2322
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2320

  -- Can be chained in WGPUSharedTextureMemoryBeginAccessDescriptor
   type WGPUSharedTextureMemoryVkImageLayoutBeginState is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2332
      oldLayout : aliased bits_stdint_intn_h.int32_t;  -- webgpu.h:2333
      newLayout : aliased bits_stdint_intn_h.int32_t;  -- webgpu.h:2334
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2331

  -- Can be chained in WGPUSharedTextureMemoryEndAccessState
   type WGPUSharedTextureMemoryVkImageLayoutEndState is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:2345
      oldLayout : aliased bits_stdint_intn_h.int32_t;  -- webgpu.h:2346
      newLayout : aliased bits_stdint_intn_h.int32_t;  -- webgpu.h:2347
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2344

  -- Can be chained in WGPUSharedTextureMemoryDescriptor
   type WGPUSharedTextureMemoryZirconHandleDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2358
      memoryFD : aliased T_UInt32;  -- webgpu.h:2359
      allocationSize : aliased T_UInt64;  -- webgpu.h:2360
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2357

  -- Can be chained in WGPUBindGroupLayoutEntry
   type WGPUStaticSamplerBindingLayout is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2371
      sampler : WGPUSampler;  -- webgpu.h:2372
      sampledTextureBinding : aliased T_UInt32;  -- webgpu.h:2373
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2370

   type WGPUStencilFaceState is record
      compare : aliased WGPUCompareFunction;  -- webgpu.h:2383
      failOp : aliased WGPUStencilOperation;  -- webgpu.h:2384
      depthFailOp : aliased WGPUStencilOperation;  -- webgpu.h:2385
      passOp : aliased WGPUStencilOperation;  -- webgpu.h:2386
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2382

   type WGPUStorageTextureBindingLayout is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2397
      c_access : aliased WGPUStorageTextureAccess;  -- webgpu.h:2398
      format : aliased WGPUTextureFormat;  -- webgpu.h:2399
      viewDimension : aliased WGPUTextureViewDimension;  -- webgpu.h:2400
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2396

   type T_WGPUStringView is record
      data : T_Chars_Ptr;  -- webgpu.h:2411
      length : aliased T_Size;  -- webgpu.h:2412
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2410

   type WGPUSupportedFeatures is record
      featureCount : aliased T_Size;  -- webgpu.h:2421
      features : access T_Feature_Name;  -- webgpu.h:2422
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2420

   type WGPUSurfaceCapabilities is record
      nextInChain : access T_WGPUChainedStructOut;  -- webgpu.h:2431
      usages : aliased WGPUTextureUsage;  -- webgpu.h:2432
      formatCount : aliased T_Size;  -- webgpu.h:2433
      formats : access WGPUTextureFormat;  -- webgpu.h:2434
      presentModeCount : aliased T_Size;  -- webgpu.h:2435
      presentModes : access WGPUPresentMode;  -- webgpu.h:2436
      alphaModeCount : aliased T_Size;  -- webgpu.h:2437
      alphaModes : access WGPUCompositeAlphaMode;  -- webgpu.h:2438
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2430

   type WGPUSurfaceConfiguration is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2453
      device : T_WGPUDevice;  -- webgpu.h:2454
      format : aliased WGPUTextureFormat;  -- webgpu.h:2455
      usage : aliased WGPUTextureUsage;  -- webgpu.h:2456
      viewFormatCount : aliased T_Size;  -- webgpu.h:2457
      viewFormats : access WGPUTextureFormat;  -- webgpu.h:2458
      alphaMode : aliased WGPUCompositeAlphaMode;  -- webgpu.h:2459
      width : aliased T_UInt32;  -- webgpu.h:2460
      height : aliased T_UInt32;  -- webgpu.h:2461
      presentMode : aliased WGPUPresentMode;  -- webgpu.h:2462
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2452

  -- Can be chained in WGPUSurfaceDescriptor
   type WGPUSurfaceDescriptorFromWindowsCoreWindow is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2480
      coreWindow : T_Address;  -- webgpu.h:2481
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2479

  -- Can be chained in WGPUSurfaceDescriptor
   type WGPUSurfaceDescriptorFromWindowsSwapChainPanel is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2491
      swapChainPanel : T_Address;  -- webgpu.h:2492
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2490

  -- Can be chained in WGPUSurfaceDescriptor
   type WGPUSurfaceSourceXCBWindow is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2502
      connection : T_Address;  -- webgpu.h:2503
      window : aliased T_UInt32;  -- webgpu.h:2504
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2501

  -- Can be chained in WGPUSurfaceDescriptor
   type WGPUSurfaceSourceAndroidNativeWindow is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2515
      window : T_Address;  -- webgpu.h:2516
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2514

  -- Can be chained in WGPUSurfaceDescriptor
   type WGPUSurfaceSourceMetalLayer is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2526
      layer : T_Address;  -- webgpu.h:2527
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2525

  -- Can be chained in WGPUSurfaceDescriptor
   type WGPUSurfaceSourceWaylandSurface is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2537
      display : T_Address;  -- webgpu.h:2538
      surface : T_Address;  -- webgpu.h:2539
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2536

  -- Can be chained in WGPUSurfaceDescriptor
   type WGPUSurfaceSourceWindowsHWND is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2550
      hinstance : T_Address;  -- webgpu.h:2551
      hwnd : T_Address;  -- webgpu.h:2552
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2549

  -- Can be chained in WGPUSurfaceDescriptor
   type WGPUSurfaceSourceXlibWindow is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2563
      display : T_Address;  -- webgpu.h:2564
      window : aliased T_UInt64;  -- webgpu.h:2565
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2562

   type WGPUSurfaceTexture is record
      texture : WGPUTexture;  -- webgpu.h:2575
      suboptimal : aliased T_WGPUBool;  -- webgpu.h:2576
      status : aliased WGPUSurfaceGetCurrentTextureStatus;  -- webgpu.h:2577
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2574

   type WGPUTextureBindingLayout is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2587
      sampleType : aliased WGPUTextureSampleType;  -- webgpu.h:2588
      viewDimension : aliased WGPUTextureViewDimension;  -- webgpu.h:2589
      multisampled : aliased T_WGPUBool;  -- webgpu.h:2590
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2586

  -- Can be chained in WGPUTextureDescriptor
   type WGPUTextureBindingViewDimensionDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2602
      textureBindingViewDimension : aliased WGPUTextureViewDimension;  -- webgpu.h:2603
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2601

   type WGPUTextureDataLayout is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2612
      offset : aliased T_UInt64;  -- webgpu.h:2613
      bytesPerRow : aliased T_UInt32;  -- webgpu.h:2614
      rowsPerImage : aliased T_UInt32;  -- webgpu.h:2615
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2611

	type T_WGPUUncapturedErrorCallbackInfo is record
		nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2626
		callback    : T_WGPUErrorCallback;  -- webgpu.h:2627
		userdata    : T_Address;  -- webgpu.h:2628
	end record
	with Convention => C_Pass_By_Copy;  -- webgpu.h:2625

   type WGPUVertexAttribute is record
      format : aliased WGPUVertexFormat;  -- webgpu.h:2638
      offset : aliased T_UInt64;  -- webgpu.h:2639
      shaderLocation : aliased T_UInt32;  -- webgpu.h:2640
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2637

  -- Can be chained in WGPUSamplerDescriptor
  -- Can be chained in WGPUTextureViewDescriptor
   type WGPUYCbCrVkDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2652
      vkFormat : aliased T_UInt32;  -- webgpu.h:2653
      vkYCbCrModel : aliased T_UInt32;  -- webgpu.h:2654
      vkYCbCrRange : aliased T_UInt32;  -- webgpu.h:2655
      vkComponentSwizzleRed : aliased T_UInt32;  -- webgpu.h:2656
      vkComponentSwizzleGreen : aliased T_UInt32;  -- webgpu.h:2657
      vkComponentSwizzleBlue : aliased T_UInt32;  -- webgpu.h:2658
      vkComponentSwizzleAlpha : aliased T_UInt32;  -- webgpu.h:2659
      vkXChromaOffset : aliased T_UInt32;  -- webgpu.h:2660
      vkYChromaOffset : aliased T_UInt32;  -- webgpu.h:2661
      vkChromaFilter : aliased WGPUFilterMode;  -- webgpu.h:2662
      forceExplicitReconstruction : aliased T_WGPUBool;  -- webgpu.h:2663
      externalFormat : aliased T_UInt64;  -- webgpu.h:2664
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2651

   type WGPUAHardwareBufferProperties is record
      yCbCrInfo : aliased WGPUYCbCrVkDescriptor;  -- webgpu.h:2684
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2683

   type WGPUAdapterInfo is record
      nextInChain : access T_WGPUChainedStructOut;  -- webgpu.h:2692
      vendor : aliased T_WGPUStringView;  -- webgpu.h:2693
      architecture : aliased T_WGPUStringView;  -- webgpu.h:2694
      device : aliased T_WGPUStringView;  -- webgpu.h:2695
      description : aliased T_WGPUStringView;  -- webgpu.h:2696
      backendType : aliased WGPUBackendType;  -- webgpu.h:2697
      adapterType : aliased WGPUAdapterType;  -- webgpu.h:2698
      vendorID : aliased T_UInt32;  -- webgpu.h:2699
      deviceID : aliased T_UInt32;  -- webgpu.h:2700
      compatibilityMode : aliased T_WGPUBool;  -- webgpu.h:2701
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2691

  -- Can be chained in WGPUAdapterInfo
   type WGPUAdapterPropertiesMemoryHeaps is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:2719
      heapCount : aliased T_Size;  -- webgpu.h:2720
      heapInfo : access constant WGPUMemoryHeapInfo;  -- webgpu.h:2721
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2718

   type WGPUBindGroupDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2731
      label : aliased T_WGPUStringView;  -- webgpu.h:2732
      layout : WGPUBindGroupLayout;  -- webgpu.h:2733
      entryCount : aliased T_Size;  -- webgpu.h:2734
      entries : access constant WGPUBindGroupEntry;  -- webgpu.h:2735
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2730

   type WGPUBindGroupLayoutEntry is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2747
      binding : aliased T_UInt32;  -- webgpu.h:2748
      visibility : aliased WGPUShaderStage;  -- webgpu.h:2749
      buffer : aliased WGPUBufferBindingLayout;  -- webgpu.h:2750
      sampler : aliased WGPUSamplerBindingLayout;  -- webgpu.h:2751
      texture : aliased WGPUTextureBindingLayout;  -- webgpu.h:2752
      storageTexture : aliased WGPUStorageTextureBindingLayout;  -- webgpu.h:2753
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2746

   type WGPUBlendState is record
      color : aliased WGPUBlendComponent;  -- webgpu.h:2767
      alpha : aliased WGPUBlendComponent;  -- webgpu.h:2768
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2766

   type WGPUBufferDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2777
      label : aliased T_WGPUStringView;  -- webgpu.h:2778
      usage : aliased WGPUBufferUsage;  -- webgpu.h:2779
      size : aliased T_UInt64;  -- webgpu.h:2780
      mappedAtCreation : aliased T_WGPUBool;  -- webgpu.h:2781
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2776

   type WGPUCommandBufferDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2793
      label : aliased T_WGPUStringView;  -- webgpu.h:2794
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2792

   type T_WGPUCommandEncoderDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2803
      label : aliased T_WGPUStringView;  -- webgpu.h:2804
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2802

   type WGPUCompilationMessage is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2813
      message : aliased T_WGPUStringView;  -- webgpu.h:2814
      c_type : aliased WGPUCompilationMessageType;  -- webgpu.h:2815
      lineNum : aliased T_UInt64;  -- webgpu.h:2816
      linePos : aliased T_UInt64;  -- webgpu.h:2817
      offset : aliased T_UInt64;  -- webgpu.h:2818
      length : aliased T_UInt64;  -- webgpu.h:2819
      utf16LinePos : aliased T_UInt64;  -- webgpu.h:2820
      utf16Offset : aliased T_UInt64;  -- webgpu.h:2821
      utf16Length : aliased T_UInt64;  -- webgpu.h:2822
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2812

   type WGPUComputePassDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2839
      label : aliased T_WGPUStringView;  -- webgpu.h:2840
      timestampWrites : access constant WGPUComputePassTimestampWrites;  -- webgpu.h:2841
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2838

   type WGPUConstantEntry is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2851
      key : aliased T_WGPUStringView;  -- webgpu.h:2852
      value : aliased double;  -- webgpu.h:2853
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2850

  -- Can be chained in T_WGPUDeviceDescriptor
   type WGPUDawnCacheDeviceDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:2864
      isolationKey : aliased T_WGPUStringView;  -- webgpu.h:2865
      loadDataFunction : WGPUDawnLoadCacheDataFunction;  -- webgpu.h:2866
      storeDataFunction : WGPUDawnStoreCacheDataFunction;  -- webgpu.h:2867
      functionUserdata : T_Address;  -- webgpu.h:2868
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2863

   type WGPUDepthStencilState is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2880
      format : aliased WGPUTextureFormat;  -- webgpu.h:2881
      depthWriteEnabled : aliased WGPUOptionalBool;  -- webgpu.h:2882
      depthCompare : aliased WGPUCompareFunction;  -- webgpu.h:2883
      stencilFront : aliased WGPUStencilFaceState;  -- webgpu.h:2884
      stencilBack : aliased WGPUStencilFaceState;  -- webgpu.h:2885
      stencilReadMask : aliased T_UInt32;  -- webgpu.h:2886
      stencilWriteMask : aliased T_UInt32;  -- webgpu.h:2887
      depthBias : aliased bits_stdint_intn_h.int32_t;  -- webgpu.h:2888
      depthBiasSlopeScale : aliased float;  -- webgpu.h:2889
      depthBiasClamp : aliased float;  -- webgpu.h:2890
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2879

  -- Can be chained in WGPUFormatCapabilities
   type WGPUDrmFormatCapabilities is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:2909
      propertiesCount : aliased T_Size;  -- webgpu.h:2910
      properties : access constant WGPUDrmFormatProperties;  -- webgpu.h:2911
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2908

   type WGPUExternalTextureDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2921
      label : aliased T_WGPUStringView;  -- webgpu.h:2922
      plane0 : WGPUTextureView;  -- webgpu.h:2923
      plane1 : WGPUTextureView;  -- webgpu.h:2924
      visibleOrigin : aliased WGPUOrigin2D;  -- webgpu.h:2925
      visibleSize : aliased WGPUExtent2D;  -- webgpu.h:2926
      cropOrigin : aliased WGPUOrigin2D;  -- webgpu.h:2927
      cropSize : aliased WGPUExtent2D;  -- webgpu.h:2928
      apparentSize : aliased WGPUExtent2D;  -- webgpu.h:2929
      doYuvToRgbConversionOnly : aliased T_WGPUBool;  -- webgpu.h:2930
      yuvToRgbConversionMatrix : access float;  -- webgpu.h:2931
      srcTransferFunctionParameters : access float;  -- webgpu.h:2932
      dstTransferFunctionParameters : access float;  -- webgpu.h:2933
      gamutConversionMatrix : access float;  -- webgpu.h:2934
      mirrored : aliased T_WGPUBool;  -- webgpu.h:2935
      rotation : aliased WGPUExternalTextureRotation;  -- webgpu.h:2936
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2920

   type WGPUFutureWaitInfo is record
      future : aliased WGPUFuture;  -- webgpu.h:2959
      completed : aliased T_WGPUBool;  -- webgpu.h:2960
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2958

   type WGPUImageCopyBuffer is record
      layout : aliased WGPUTextureDataLayout;  -- webgpu.h:2969
      buffer : WGPUBuffer;  -- webgpu.h:2970
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2968

   type WGPUImageCopyExternalTexture is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:2979
      externalTexture : WGPUExternalTexture;  -- webgpu.h:2980
      origin : aliased WGPUOrigin3D;  -- webgpu.h:2981
      naturalSize : aliased WGPUExtent2D;  -- webgpu.h:2982
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2978

   type WGPUImageCopyTexture is record
      texture : WGPUTexture;  -- webgpu.h:2993
      mipLevel : aliased T_UInt32;  -- webgpu.h:2994
      origin : aliased WGPUOrigin3D;  -- webgpu.h:2995
      aspect : aliased WGPUTextureAspect;  -- webgpu.h:2996
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:2992

   type T_WGPUInstanceDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3007
      features : aliased WGPUInstanceFeatures;  -- webgpu.h:3008
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3006

   type WGPUPipelineLayoutDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3017
      label : aliased T_WGPUStringView;  -- webgpu.h:3018
      bindGroupLayoutCount : aliased T_Size;  -- webgpu.h:3019
      bindGroupLayouts : T_Address;  -- webgpu.h:3020
      immediateDataRangeByteSize : aliased T_UInt32;  -- webgpu.h:3021
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3016

  -- Can be chained in WGPUPipelineLayoutDescriptor
   type WGPUPipelineLayoutPixelLocalStorage is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:3034
      totalPixelLocalStorageSize : aliased T_UInt64;  -- webgpu.h:3035
      storageAttachmentCount : aliased T_Size;  -- webgpu.h:3036
      storageAttachments : access constant WGPUPipelineLayoutStorageAttachment;  -- webgpu.h:3037
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3033

   type WGPUQuerySetDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3048
      label : aliased T_WGPUStringView;  -- webgpu.h:3049
      c_type : aliased WGPUQueryType;  -- webgpu.h:3050
      count : aliased T_UInt32;  -- webgpu.h:3051
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3047

   type T_WGPUQueueDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3062
      label : aliased T_WGPUStringView;  -- webgpu.h:3063
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3061

   type WGPURenderBundleDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3072
      label : aliased T_WGPUStringView;  -- webgpu.h:3073
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3071

   type WGPURenderBundleEncoderDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3082
      label : aliased T_WGPUStringView;  -- webgpu.h:3083
      colorFormatCount : aliased T_Size;  -- webgpu.h:3084
      colorFormats : access WGPUTextureFormat;  -- webgpu.h:3085
      depthStencilFormat : aliased WGPUTextureFormat;  -- webgpu.h:3086
      sampleCount : aliased T_UInt32;  -- webgpu.h:3087
      depthReadOnly : aliased T_WGPUBool;  -- webgpu.h:3088
      stencilReadOnly : aliased T_WGPUBool;  -- webgpu.h:3089
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3081

   type WGPURenderPassColorAttachment is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3104
      view : WGPUTextureView;  -- webgpu.h:3105
      depthSlice : aliased T_UInt32;  -- webgpu.h:3106
      resolveTarget : WGPUTextureView;  -- webgpu.h:3107
      loadOp : aliased WGPULoadOp;  -- webgpu.h:3108
      storeOp : aliased WGPUStoreOp;  -- webgpu.h:3109
      clearValue : aliased WGPUColor;  -- webgpu.h:3110
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3103

   type WGPURenderPassStorageAttachment is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3124
      offset : aliased T_UInt64;  -- webgpu.h:3125
      storage : WGPUTextureView;  -- webgpu.h:3126
      loadOp : aliased WGPULoadOp;  -- webgpu.h:3127
      storeOp : aliased WGPUStoreOp;  -- webgpu.h:3128
      clearValue : aliased WGPUColor;  -- webgpu.h:3129
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3123

	type T_WGPURequiredLimits is record
		nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3142
		limits      : aliased T_Device_Limits;  -- webgpu.h:3143
	end record
	with Convention => C_Pass_By_Copy;  -- webgpu.h:3141

   type WGPUSamplerDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3152
      label : aliased T_WGPUStringView;  -- webgpu.h:3153
      addressModeU : aliased WGPUAddressMode;  -- webgpu.h:3154
      addressModeV : aliased WGPUAddressMode;  -- webgpu.h:3155
      addressModeW : aliased WGPUAddressMode;  -- webgpu.h:3156
      magFilter : aliased WGPUFilterMode;  -- webgpu.h:3157
      minFilter : aliased WGPUFilterMode;  -- webgpu.h:3158
      mipmapFilter : aliased WGPUMipmapFilterMode;  -- webgpu.h:3159
      lodMinClamp : aliased float;  -- webgpu.h:3160
      lodMaxClamp : aliased float;  -- webgpu.h:3161
      compare : aliased WGPUCompareFunction;  -- webgpu.h:3162
      maxAnisotropy : aliased bits_stdint_uintn_h.uint16_t;  -- webgpu.h:3163
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3151

   type WGPUShaderModuleDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3182
      label : aliased T_WGPUStringView;  -- webgpu.h:3183
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3181

  -- Can be chained in WGPUShaderModuleDescriptor
   type WGPUShaderSourceWGSL is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:3193
      code : aliased T_WGPUStringView;  -- webgpu.h:3194
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3192

   type WGPUSharedBufferMemoryDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3203
      label : aliased T_WGPUStringView;  -- webgpu.h:3204
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3202

   type WGPUSharedFenceDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3213
      label : aliased T_WGPUStringView;  -- webgpu.h:3214
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3212

  -- Can be chained in WGPUSharedTextureMemoryProperties
   type WGPUSharedTextureMemoryAHardwareBufferProperties is record
      chain : aliased T_WGPUChainedStructOut;  -- webgpu.h:3224
      yCbCrInfo : aliased WGPUYCbCrVkDescriptor;  -- webgpu.h:3225
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3223

   type WGPUSharedTextureMemoryDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3234
      label : aliased T_WGPUStringView;  -- webgpu.h:3235
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3233

  -- Can be chained in WGPUSharedTextureMemoryDescriptor
   type WGPUSharedTextureMemoryDmaBufDescriptor is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:3245
      size : aliased WGPUExtent3D;  -- webgpu.h:3246
      drmFormat : aliased T_UInt32;  -- webgpu.h:3247
      drmModifier : aliased T_UInt64;  -- webgpu.h:3248
      planeCount : aliased T_Size;  -- webgpu.h:3249
      planes : access constant WGPUSharedTextureMemoryDmaBufPlane;  -- webgpu.h:3250
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3244

   type WGPUSharedTextureMemoryProperties is record
      nextInChain : access T_WGPUChainedStructOut;  -- webgpu.h:3263
      usage : aliased WGPUTextureUsage;  -- webgpu.h:3264
      size : aliased WGPUExtent3D;  -- webgpu.h:3265
      format : aliased WGPUTextureFormat;  -- webgpu.h:3266
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3262

   type T_WGPUSupportedLimits is record
      nextInChain : access T_WGPUChainedStructOut;  -- webgpu.h:3277
      limits : aliased T_Device_Limits;  -- webgpu.h:3278
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3276

   type WGPUSurfaceDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3287
      label : aliased T_WGPUStringView;  -- webgpu.h:3288
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3286

  -- Can be chained in WGPUSurfaceDescriptor
   type WGPUSurfaceSourceCanvasHTMLSelector_Emscripten is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:3298
      selector : aliased T_WGPUStringView;  -- webgpu.h:3299
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3297

   type WGPUTextureDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3308
      label : aliased T_WGPUStringView;  -- webgpu.h:3309
      usage : aliased WGPUTextureUsage;  -- webgpu.h:3310
      dimension : aliased WGPUTextureDimension;  -- webgpu.h:3311
      size : aliased WGPUExtent3D;  -- webgpu.h:3312
      format : aliased WGPUTextureFormat;  -- webgpu.h:3313
      mipLevelCount : aliased T_UInt32;  -- webgpu.h:3314
      sampleCount : aliased T_UInt32;  -- webgpu.h:3315
      viewFormatCount : aliased T_Size;  -- webgpu.h:3316
      viewFormats : access WGPUTextureFormat;  -- webgpu.h:3317
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3307

   type WGPUTextureViewDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3334
      label : aliased T_WGPUStringView;  -- webgpu.h:3335
      format : aliased WGPUTextureFormat;  -- webgpu.h:3336
      dimension : aliased WGPUTextureViewDimension;  -- webgpu.h:3337
      baseMipLevel : aliased T_UInt32;  -- webgpu.h:3338
      mipLevelCount : aliased T_UInt32;  -- webgpu.h:3339
      baseArrayLayer : aliased T_UInt32;  -- webgpu.h:3340
      arrayLayerCount : aliased T_UInt32;  -- webgpu.h:3341
      aspect : aliased WGPUTextureAspect;  -- webgpu.h:3342
      usage : aliased WGPUTextureUsage;  -- webgpu.h:3343
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3333

   type WGPUVertexBufferLayout is record
      arrayStride : aliased T_UInt64;  -- webgpu.h:3360
      stepMode : aliased WGPUVertexStepMode;  -- webgpu.h:3361
      attributeCount : aliased T_Size;  -- webgpu.h:3362
      attributes : access constant WGPUVertexAttribute;  -- webgpu.h:3363
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3359

   type WGPUBindGroupLayoutDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3374
      label : aliased T_WGPUStringView;  -- webgpu.h:3375
      entryCount : aliased T_Size;  -- webgpu.h:3376
      entries : access constant WGPUBindGroupLayoutEntry;  -- webgpu.h:3377
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3373

   type WGPUColorTargetState is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3388
      format : aliased WGPUTextureFormat;  -- webgpu.h:3389
      blend : access constant WGPUBlendState;  -- webgpu.h:3390
      writeMask : aliased WGPUColorWriteMask;  -- webgpu.h:3391
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3387

   type WGPUCompilationInfo is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3402
      messageCount : aliased T_Size;  -- webgpu.h:3403
      messages : access constant WGPUCompilationMessage;  -- webgpu.h:3404
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3401

	type T_WGPUDeviceDescriptor is record
		nextInChain                  : access constant T_WGPUChainedStruct;  -- webgpu.h:3414
		label                        : aliased T_WGPUStringView;  -- webgpu.h:3415
		requiredFeatureCount         : aliased T_Size;  -- webgpu.h:3416
		requiredFeatures             : access T_Feature_Name;  -- webgpu.h:3417
		requiredLimits               : access constant T_WGPURequiredLimits;  -- webgpu.h:3418
		defaultQueue                 : aliased T_WGPUQueueDescriptor;  -- webgpu.h:3419
		deviceLostCallback           : T_Address; -- DEPRECATED (see Device.cpp) - use deviceLostCallbackInfo instead
		deviceLostUserdata           : T_Address; -- DEPRECATED (see Device.cpp) - use deviceLostCallbackInfo instead
		deviceLostCallbackInfo       : aliased T_WGPUDeviceLostCallbackInfo;  -- webgpu.h:3422
		uncapturedErrorCallbackInfo  : aliased T_WGPUUncapturedErrorCallbackInfo;  -- webgpu.h:3423
		deviceLostCallbackInfo2      : aliased T_WGPUDeviceLostCallbackInfo2;  -- webgpu.h:3424
		uncapturedErrorCallbackInfo2 : aliased T_WGPUUncapturedErrorCallbackInfo2;  -- webgpu.h:3425
	end record
	with Convention => C_Pass_By_Copy;  -- webgpu.h:3413

   type WGPUProgrammableStageDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3444
      module : WGPUShaderModule;  -- webgpu.h:3445
      entryPoint : aliased T_WGPUStringView;  -- webgpu.h:3446
      constantCount : aliased T_Size;  -- webgpu.h:3447
      constants : access constant WGPUConstantEntry;  -- webgpu.h:3448
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3443

   type WGPURenderPassDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3460
      label : aliased T_WGPUStringView;  -- webgpu.h:3461
      colorAttachmentCount : aliased T_Size;  -- webgpu.h:3462
      colorAttachments : access constant WGPURenderPassColorAttachment;  -- webgpu.h:3463
      depthStencilAttachment : access constant WGPURenderPassDepthStencilAttachment;  -- webgpu.h:3464
      occlusionQuerySet : WGPUQuerySet;  -- webgpu.h:3465
      timestampWrites : access constant WGPURenderPassTimestampWrites;  -- webgpu.h:3466
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3459

  -- Can be chained in WGPURenderPassDescriptor
   type WGPURenderPassPixelLocalStorage is record
      chain : aliased T_WGPUChainedStruct;  -- webgpu.h:3481
      totalPixelLocalStorageSize : aliased T_UInt64;  -- webgpu.h:3482
      storageAttachmentCount : aliased T_Size;  -- webgpu.h:3483
      storageAttachments : access constant WGPURenderPassStorageAttachment;  -- webgpu.h:3484
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3480

   type WGPUVertexState is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3495
      module : WGPUShaderModule;  -- webgpu.h:3496
      entryPoint : aliased T_WGPUStringView;  -- webgpu.h:3497
      constantCount : aliased T_Size;  -- webgpu.h:3498
      constants : access constant WGPUConstantEntry;  -- webgpu.h:3499
      bufferCount : aliased T_Size;  -- webgpu.h:3500
      buffers : access constant WGPUVertexBufferLayout;  -- webgpu.h:3501
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3494

   type WGPUComputePipelineDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3515
      label : aliased T_WGPUStringView;  -- webgpu.h:3516
      layout : WGPUPipelineLayout;  -- webgpu.h:3517
      compute : aliased WGPUProgrammableStageDescriptor;  -- webgpu.h:3518
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3514

   type WGPUFragmentState is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3529
      module : WGPUShaderModule;  -- webgpu.h:3530
      entryPoint : aliased T_WGPUStringView;  -- webgpu.h:3531
      constantCount : aliased T_Size;  -- webgpu.h:3532
      constants : access constant WGPUConstantEntry;  -- webgpu.h:3533
      targetCount : aliased T_Size;  -- webgpu.h:3534
      targets : access constant WGPUColorTargetState;  -- webgpu.h:3535
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3528

   type WGPURenderPipelineDescriptor is record
      nextInChain : access constant T_WGPUChainedStruct;  -- webgpu.h:3549
      label : aliased T_WGPUStringView;  -- webgpu.h:3550
      layout : WGPUPipelineLayout;  -- webgpu.h:3551
      vertex : aliased WGPUVertexState;  -- webgpu.h:3552
      primitive : aliased WGPUPrimitiveState;  -- webgpu.h:3553
      depthStencil : access constant WGPUDepthStencilState;  -- webgpu.h:3554
      multisample : aliased WGPUMultisampleState;  -- webgpu.h:3555
      fragment : access constant WGPUFragmentState;  -- webgpu.h:3556
   end record
   with Convention => C_Pass_By_Copy;  -- webgpu.h:3548

  -- WGPURenderPassDescriptorMaxDrawCount is deprecated.
  -- Use WGPURenderPassMaxDrawCount instead.
   subtype WGPURenderPassDescriptorMaxDrawCount is WGPURenderPassMaxDrawCount;  -- webgpu.h:3572

  -- WGPUShaderModuleSPIRVDescriptor is deprecated.
  -- Use WGPUShaderSourceSPIRV instead.
   subtype WGPUShaderModuleSPIRVDescriptor is WGPUShaderSourceSPIRV;  -- webgpu.h:3576

  -- WGPUShaderModuleWGSLDescriptor is deprecated.
  -- Use WGPUShaderSourceWGSL instead.
   subtype WGPUShaderModuleWGSLDescriptor is WGPUShaderSourceWGSL;  -- webgpu.h:3580

  -- WGPUSharedFenceVkSemaphoreSyncFDDescriptor is deprecated.
  -- Use WGPUSharedFenceSyncFDDescriptor instead.
   subtype WGPUSharedFenceVkSemaphoreSyncFDDescriptor is WGPUSharedFenceSyncFDDescriptor;  -- webgpu.h:3584

  -- WGPUSharedFenceVkSemaphoreSyncFDExportInfo is deprecated.
  -- Use WGPUSharedFenceSyncFDExportInfo instead.
   subtype WGPUSharedFenceVkSemaphoreSyncFDExportInfo is WGPUSharedFenceSyncFDExportInfo;  -- webgpu.h:3588

  -- WGPUSurfaceDescriptorFromAndroidNativeWindow is deprecated.
  -- Use WGPUSurfaceSourceAndroidNativeWindow instead.
   subtype WGPUSurfaceDescriptorFromAndroidNativeWindow is WGPUSurfaceSourceAndroidNativeWindow;  -- webgpu.h:3592

  -- WGPUSurfaceDescriptorFromCanvasHTMLSelector is deprecated.
  -- Use WGPUSurfaceSourceCanvasHTMLSelector_Emscripten instead.
   subtype WGPUSurfaceDescriptorFromCanvasHTMLSelector is WGPUSurfaceSourceCanvasHTMLSelector_Emscripten;  -- webgpu.h:3596

  -- WGPUSurfaceDescriptorFromMetalLayer is deprecated.
  -- Use WGPUSurfaceSourceMetalLayer instead.
   subtype WGPUSurfaceDescriptorFromMetalLayer is WGPUSurfaceSourceMetalLayer;  -- webgpu.h:3600

  -- WGPUSurfaceDescriptorFromWaylandSurface is deprecated.
  -- Use WGPUSurfaceSourceWaylandSurface instead.
   subtype WGPUSurfaceDescriptorFromWaylandSurface is WGPUSurfaceSourceWaylandSurface;  -- webgpu.h:3604

  -- WGPUSurfaceDescriptorFromWindowsHWND is deprecated.
  -- Use WGPUSurfaceSourceWindowsHWND instead.
   subtype WGPUSurfaceDescriptorFromWindowsHWND is WGPUSurfaceSourceWindowsHWND;  -- webgpu.h:3608

  -- WGPUSurfaceDescriptorFromXcbWindow is deprecated.
  -- Use WGPUSurfaceSourceXCBWindow instead.
   subtype WGPUSurfaceDescriptorFromXcbWindow is WGPUSurfaceSourceXCBWindow;  -- webgpu.h:3612

  -- WGPUSurfaceDescriptorFromXlibWindow is deprecated.
  -- Use WGPUSurfaceSourceXlibWindow instead.
   subtype WGPUSurfaceDescriptorFromXlibWindow is WGPUSurfaceSourceXlibWindow;  -- webgpu.h:3616

  -- TODO(374150686): Remove these Emscripten specific declarations from the
  -- header once they are fully deprecated.
   type WGPUProcAdapterInfoFreeMembers is access procedure (arg1 : WGPUAdapterInfo)
   with Convention => C;  -- webgpu.h:3630

   type WGPUProcAdapterPropertiesMemoryHeapsFreeMembers is access procedure (arg1 : WGPUAdapterPropertiesMemoryHeaps)
   with Convention => C;  -- webgpu.h:3631

   type WGPUProcCreateInstance is access function (arg1 : access constant T_WGPUInstanceDescriptor) return T_WGPUInstance
   with Convention => C;  -- webgpu.h:3632

   type WGPUProcDrmFormatCapabilitiesFreeMembers is access procedure (arg1 : WGPUDrmFormatCapabilities)
   with Convention => C;  -- webgpu.h:3633

   type WGPUProcGetInstanceFeatures is access function (arg1 : access WGPUInstanceFeatures) return T_Status
   with Convention => C;  -- webgpu.h:3634

   type WGPUProcGetProcAddress is access function (arg1 : T_WGPUStringView) return WGPUProc
   with Convention => C;  -- webgpu.h:3635

   type WGPUProcSharedBufferMemoryEndAccessStateFreeMembers is access procedure (arg1 : WGPUSharedBufferMemoryEndAccessState)
   with Convention => C;  -- webgpu.h:3636

   type WGPUProcSharedTextureMemoryEndAccessStateFreeMembers is access procedure (arg1 : WGPUSharedTextureMemoryEndAccessState)
   with Convention => C;  -- webgpu.h:3637

   type WGPUProcSupportedFeaturesFreeMembers is access procedure (arg1 : WGPUSupportedFeatures)
   with Convention => C;  -- webgpu.h:3638

   type WGPUProcSurfaceCapabilitiesFreeMembers is access procedure (arg1 : WGPUSurfaceCapabilities)
   with Convention => C;  -- webgpu.h:3639

  -- Procs of Adapter
   type WGPUProcAdapterCreateDevice is access function (arg1 : T_WGPUAdapter; arg2 : access constant T_WGPUDeviceDescriptor) return T_WGPUDevice
   with Convention => C;  -- webgpu.h:3642

   type WGPUProcAdapterEnumerateFeatures is access function (arg1 : T_WGPUAdapter; arg2 : access T_Feature_Name) return T_Size
   with Convention => C;  -- webgpu.h:3643

   type WGPUProcAdapterGetFeatures is access procedure (arg1 : T_WGPUAdapter; arg2 : access WGPUSupportedFeatures)
   with Convention => C;  -- webgpu.h:3644

   type WGPUProcAdapterGetFormatCapabilities is access function
        (arg1 : T_WGPUAdapter;
         arg2 : WGPUTextureFormat;
         arg3 : access WGPUFormatCapabilities) return T_Status
   with Convention => C;  -- webgpu.h:3645

   type WGPUProcAdapterGetInfo is access function (arg1 : T_WGPUAdapter; arg2 : access WGPUAdapterInfo) return T_Status
   with Convention => C;  -- webgpu.h:3646

   type WGPUProcAdapterGetInstance is access function (arg1 : T_WGPUAdapter) return T_WGPUInstance
   with Convention => C;  -- webgpu.h:3647

   type WGPUProcAdapterGetLimits is access function (arg1 : T_WGPUAdapter; arg2 : access T_WGPUSupportedLimits) return T_Status
   with Convention => C;  -- webgpu.h:3648

   type WGPUProcAdapterHasFeature is access function (arg1 : T_WGPUAdapter; arg2 : T_Feature_Name) return T_WGPUBool
   with Convention => C;  -- webgpu.h:3649

   type WGPUProcAdapterRequestDevice is access procedure
        (arg1 : T_WGPUAdapter;
         arg2 : access constant T_WGPUDeviceDescriptor;
         arg3 : T_WGPURequestDeviceCallback;
         arg4 : T_Address)
   with Convention => C;  -- webgpu.h:3650

   type WGPUProcAdapterRequestDevice2 is access function
        (arg1 : T_WGPUAdapter;
         arg2 : access constant T_WGPUDeviceDescriptor;
         arg3 : WGPURequestDeviceCallbackInfo2) return WGPUFuture
   with Convention => C;  -- webgpu.h:3651

   type WGPUProcAdapterRequestDeviceF is access function
        (arg1 : T_WGPUAdapter;
         arg2 : access constant T_WGPUDeviceDescriptor;
         arg3 : WGPURequestDeviceCallbackInfo) return WGPUFuture
   with Convention => C;  -- webgpu.h:3652

   type WGPUProcAdapterAddRef is access procedure (arg1 : T_WGPUAdapter)
   with Convention => C;  -- webgpu.h:3653

   type WGPUProcAdapterRelease is access procedure (arg1 : T_WGPUAdapter)
   with Convention => C;  -- webgpu.h:3654

  -- Procs of BindGroup
   type WGPUProcBindGroupSetLabel is access procedure (arg1 : WGPUBindGroup; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3657

   type WGPUProcBindGroupAddRef is access procedure (arg1 : WGPUBindGroup)
   with Convention => C;  -- webgpu.h:3658

   type WGPUProcBindGroupRelease is access procedure (arg1 : WGPUBindGroup)
   with Convention => C;  -- webgpu.h:3659

  -- Procs of BindGroupLayout
   type WGPUProcBindGroupLayoutSetLabel is access procedure (arg1 : WGPUBindGroupLayout; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3662

   type WGPUProcBindGroupLayoutAddRef is access procedure (arg1 : WGPUBindGroupLayout)
   with Convention => C;  -- webgpu.h:3663

   type WGPUProcBindGroupLayoutRelease is access procedure (arg1 : WGPUBindGroupLayout)
   with Convention => C;  -- webgpu.h:3664

  -- Procs of Buffer
   type WGPUProcBufferDestroy is access procedure (arg1 : WGPUBuffer)
   with Convention => C;  -- webgpu.h:3667

   type WGPUProcBufferGetConstMappedRange is access function
        (arg1 : WGPUBuffer;
         arg2 : T_Size;
         arg3 : T_Size) return T_Address
   with Convention => C;  -- webgpu.h:3668

   type WGPUProcBufferGetMapState is access function (arg1 : WGPUBuffer) return WGPUBufferMapState
   with Convention => C;  -- webgpu.h:3669

   type WGPUProcBufferGetMappedRange is access function
        (arg1 : WGPUBuffer;
         arg2 : T_Size;
         arg3 : T_Size) return T_Address
   with Convention => C;  -- webgpu.h:3670

   type WGPUProcBufferGetSize is access function (arg1 : WGPUBuffer) return T_UInt64
   with Convention => C;  -- webgpu.h:3671

   type WGPUProcBufferGetUsage is access function (arg1 : WGPUBuffer) return WGPUBufferUsage
   with Convention => C;  -- webgpu.h:3672

   type WGPUProcBufferMapAsync is access procedure
        (arg1 : WGPUBuffer;
         arg2 : WGPUMapMode;
         arg3 : T_Size;
         arg4 : T_Size;
         arg5 : WGPUBufferMapCallback;
         arg6 : T_Address)
   with Convention => C;  -- webgpu.h:3673

   type WGPUProcBufferMapAsync2 is access function
        (arg1 : WGPUBuffer;
         arg2 : WGPUMapMode;
         arg3 : T_Size;
         arg4 : T_Size;
         arg5 : WGPUBufferMapCallbackInfo2) return WGPUFuture
   with Convention => C;  -- webgpu.h:3674

   type WGPUProcBufferMapAsyncF is access function
        (arg1 : WGPUBuffer;
         arg2 : WGPUMapMode;
         arg3 : T_Size;
         arg4 : T_Size;
         arg5 : WGPUBufferMapCallbackInfo) return WGPUFuture
   with Convention => C;  -- webgpu.h:3675

   type WGPUProcBufferSetLabel is access procedure (arg1 : WGPUBuffer; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3676

   type WGPUProcBufferUnmap is access procedure (arg1 : WGPUBuffer)
   with Convention => C;  -- webgpu.h:3677

   type WGPUProcBufferAddRef is access procedure (arg1 : WGPUBuffer)
   with Convention => C;  -- webgpu.h:3678

   type WGPUProcBufferRelease is access procedure (arg1 : WGPUBuffer)
   with Convention => C;  -- webgpu.h:3679

  -- Procs of CommandBuffer
   type WGPUProcCommandBufferSetLabel is access procedure (arg1 : T_WGPUCommandBuffer; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3682

   type WGPUProcCommandBufferAddRef is access procedure (arg1 : T_WGPUCommandBuffer)
   with Convention => C;  -- webgpu.h:3683

   type WGPUProcCommandBufferRelease is access procedure (arg1 : T_WGPUCommandBuffer)
   with Convention => C;  -- webgpu.h:3684

  -- Procs of CommandEncoder
   type WGPUProcCommandEncoderBeginComputePass is access function (arg1 : T_WGPUCommandEncoder; arg2 : access constant WGPUComputePassDescriptor) return WGPUComputePassEncoder
   with Convention => C;  -- webgpu.h:3687

   type WGPUProcCommandEncoderBeginRenderPass is access function (arg1 : T_WGPUCommandEncoder; arg2 : access constant WGPURenderPassDescriptor) return WGPURenderPassEncoder
   with Convention => C;  -- webgpu.h:3688

   type WGPUProcCommandEncoderClearBuffer is access procedure
        (arg1 : T_WGPUCommandEncoder;
         arg2 : WGPUBuffer;
         arg3 : T_UInt64;
         arg4 : T_UInt64)
   with Convention => C;  -- webgpu.h:3689

   type WGPUProcCommandEncoderCopyBufferToBuffer is access procedure
        (arg1 : T_WGPUCommandEncoder;
         arg2 : WGPUBuffer;
         arg3 : T_UInt64;
         arg4 : WGPUBuffer;
         arg5 : T_UInt64;
         arg6 : T_UInt64)
   with Convention => C;  -- webgpu.h:3690

   type WGPUProcCommandEncoderCopyBufferToTexture is access procedure
        (arg1 : T_WGPUCommandEncoder;
         arg2 : access constant WGPUImageCopyBuffer;
         arg3 : access constant WGPUImageCopyTexture;
         arg4 : access constant WGPUExtent3D)
   with Convention => C;  -- webgpu.h:3691

   type WGPUProcCommandEncoderCopyTextureToBuffer is access procedure
        (arg1 : T_WGPUCommandEncoder;
         arg2 : access constant WGPUImageCopyTexture;
         arg3 : access constant WGPUImageCopyBuffer;
         arg4 : access constant WGPUExtent3D)
   with Convention => C;  -- webgpu.h:3692

   type WGPUProcCommandEncoderCopyTextureToTexture is access procedure
        (arg1 : T_WGPUCommandEncoder;
         arg2 : access constant WGPUImageCopyTexture;
         arg3 : access constant WGPUImageCopyTexture;
         arg4 : access constant WGPUExtent3D)
   with Convention => C;  -- webgpu.h:3693

   type WGPUProcCommandEncoderFinish is access function (arg1 : T_WGPUCommandEncoder; arg2 : access constant WGPUCommandBufferDescriptor) return T_WGPUCommandBuffer
   with Convention => C;  -- webgpu.h:3694

   type WGPUProcCommandEncoderInjectValidationError is access procedure (arg1 : T_WGPUCommandEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3695

   type WGPUProcCommandEncoderInsertDebugMarker is access procedure (arg1 : T_WGPUCommandEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3696

   type WGPUProcCommandEncoderPopDebugGroup is access procedure (arg1 : T_WGPUCommandEncoder)
   with Convention => C;  -- webgpu.h:3697

   type WGPUProcCommandEncoderPushDebugGroup is access procedure (arg1 : T_WGPUCommandEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3698

   type WGPUProcCommandEncoderResolveQuerySet is access procedure
        (arg1 : T_WGPUCommandEncoder;
         arg2 : WGPUQuerySet;
         arg3 : T_UInt32;
         arg4 : T_UInt32;
         arg5 : WGPUBuffer;
         arg6 : T_UInt64)
   with Convention => C;  -- webgpu.h:3699

   type WGPUProcCommandEncoderSetLabel is access procedure (arg1 : T_WGPUCommandEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3700

   type WGPUProcCommandEncoderWriteBuffer is access procedure
        (arg1 : T_WGPUCommandEncoder;
         arg2 : WGPUBuffer;
         arg3 : T_UInt64;
         arg4 : access bits_stdint_uintn_h.uint8_t;
         arg5 : T_UInt64)
   with Convention => C;  -- webgpu.h:3701

   type WGPUProcCommandEncoderWriteTimestamp is access procedure
        (arg1 : T_WGPUCommandEncoder;
         arg2 : WGPUQuerySet;
         arg3 : T_UInt32)
   with Convention => C;  -- webgpu.h:3702

   type WGPUProcCommandEncoderAddRef is access procedure (arg1 : T_WGPUCommandEncoder)
   with Convention => C;  -- webgpu.h:3703

   type WGPUProcCommandEncoderRelease is access procedure (arg1 : T_WGPUCommandEncoder)
   with Convention => C;  -- webgpu.h:3704

  -- Procs of ComputePassEncoder
   type WGPUProcComputePassEncoderDispatchWorkgroups is access procedure
        (arg1 : WGPUComputePassEncoder;
         arg2 : T_UInt32;
         arg3 : T_UInt32;
         arg4 : T_UInt32)
   with Convention => C;  -- webgpu.h:3707

   type WGPUProcComputePassEncoderDispatchWorkgroupsIndirect is access procedure
        (arg1 : WGPUComputePassEncoder;
         arg2 : WGPUBuffer;
         arg3 : T_UInt64)
   with Convention => C;  -- webgpu.h:3708

   type WGPUProcComputePassEncoderEnd is access procedure (arg1 : WGPUComputePassEncoder)
   with Convention => C;  -- webgpu.h:3709

   type WGPUProcComputePassEncoderInsertDebugMarker is access procedure (arg1 : WGPUComputePassEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3710

   type WGPUProcComputePassEncoderPopDebugGroup is access procedure (arg1 : WGPUComputePassEncoder)
   with Convention => C;  -- webgpu.h:3711

   type WGPUProcComputePassEncoderPushDebugGroup is access procedure (arg1 : WGPUComputePassEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3712

   type WGPUProcComputePassEncoderSetBindGroup is access procedure
        (arg1 : WGPUComputePassEncoder;
         arg2 : T_UInt32;
         arg3 : WGPUBindGroup;
         arg4 : T_Size;
         arg5 : access T_UInt32)
   with Convention => C;  -- webgpu.h:3713

   type WGPUProcComputePassEncoderSetLabel is access procedure (arg1 : WGPUComputePassEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3714

   type WGPUProcComputePassEncoderSetPipeline is access procedure (arg1 : WGPUComputePassEncoder; arg2 : WGPUComputePipeline)
   with Convention => C;  -- webgpu.h:3715

   type WGPUProcComputePassEncoderWriteTimestamp is access procedure
        (arg1 : WGPUComputePassEncoder;
         arg2 : WGPUQuerySet;
         arg3 : T_UInt32)
   with Convention => C;  -- webgpu.h:3716

   type WGPUProcComputePassEncoderAddRef is access procedure (arg1 : WGPUComputePassEncoder)
   with Convention => C;  -- webgpu.h:3717

   type WGPUProcComputePassEncoderRelease is access procedure (arg1 : WGPUComputePassEncoder)
   with Convention => C;  -- webgpu.h:3718

  -- Procs of ComputePipeline
   type WGPUProcComputePipelineGetBindGroupLayout is access function (arg1 : WGPUComputePipeline; arg2 : T_UInt32) return WGPUBindGroupLayout
   with Convention => C;  -- webgpu.h:3721

   type WGPUProcComputePipelineSetLabel is access procedure (arg1 : WGPUComputePipeline; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3722

   type WGPUProcComputePipelineAddRef is access procedure (arg1 : WGPUComputePipeline)
   with Convention => C;  -- webgpu.h:3723

   type WGPUProcComputePipelineRelease is access procedure (arg1 : WGPUComputePipeline)
   with Convention => C;  -- webgpu.h:3724

  -- Procs of Device
   type WGPUProcDeviceCreateBindGroup is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUBindGroupDescriptor) return WGPUBindGroup
   with Convention => C;  -- webgpu.h:3727

   type WGPUProcDeviceCreateBindGroupLayout is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUBindGroupLayoutDescriptor) return WGPUBindGroupLayout
   with Convention => C;  -- webgpu.h:3728

   type WGPUProcDeviceCreateBuffer is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUBufferDescriptor) return WGPUBuffer
   with Convention => C;  -- webgpu.h:3729

   type WGPUProcDeviceCreateCommandEncoder is access function (arg1 : T_WGPUDevice; arg2 : access constant T_WGPUCommandEncoderDescriptor) return T_WGPUCommandEncoder
   with Convention => C;  -- webgpu.h:3730

   type WGPUProcDeviceCreateComputePipeline is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUComputePipelineDescriptor) return WGPUComputePipeline
   with Convention => C;  -- webgpu.h:3731

   type WGPUProcDeviceCreateComputePipelineAsync is access procedure
        (arg1 : T_WGPUDevice;
         arg2 : access constant WGPUComputePipelineDescriptor;
         arg3 : WGPUCreateComputePipelineAsyncCallback;
         arg4 : T_Address)
   with Convention => C;  -- webgpu.h:3732

   type WGPUProcDeviceCreateComputePipelineAsync2 is access function
        (arg1 : T_WGPUDevice;
         arg2 : access constant WGPUComputePipelineDescriptor;
         arg3 : WGPUCreateComputePipelineAsyncCallbackInfo2) return WGPUFuture
   with Convention => C;  -- webgpu.h:3733

   type WGPUProcDeviceCreateComputePipelineAsyncF is access function
        (arg1 : T_WGPUDevice;
         arg2 : access constant WGPUComputePipelineDescriptor;
         arg3 : WGPUCreateComputePipelineAsyncCallbackInfo) return WGPUFuture
   with Convention => C;  -- webgpu.h:3734

   type WGPUProcDeviceCreateErrorBuffer is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUBufferDescriptor) return WGPUBuffer
   with Convention => C;  -- webgpu.h:3735

   type WGPUProcDeviceCreateErrorExternalTexture is access function (arg1 : T_WGPUDevice) return WGPUExternalTexture
   with Convention => C;  -- webgpu.h:3736

   type WGPUProcDeviceCreateErrorShaderModule is access function
        (arg1 : T_WGPUDevice;
         arg2 : access constant WGPUShaderModuleDescriptor;
         arg3 : T_WGPUStringView) return WGPUShaderModule
   with Convention => C;  -- webgpu.h:3737

   type WGPUProcDeviceCreateErrorTexture is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUTextureDescriptor) return WGPUTexture
   with Convention => C;  -- webgpu.h:3738

   type WGPUProcDeviceCreateExternalTexture is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUExternalTextureDescriptor) return WGPUExternalTexture
   with Convention => C;  -- webgpu.h:3739

   type WGPUProcDeviceCreatePipelineLayout is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUPipelineLayoutDescriptor) return WGPUPipelineLayout
   with Convention => C;  -- webgpu.h:3740

   type WGPUProcDeviceCreateQuerySet is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUQuerySetDescriptor) return WGPUQuerySet
   with Convention => C;  -- webgpu.h:3741

   type WGPUProcDeviceCreateRenderBundleEncoder is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPURenderBundleEncoderDescriptor) return WGPURenderBundleEncoder
   with Convention => C;  -- webgpu.h:3742

   type WGPUProcDeviceCreateRenderPipeline is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPURenderPipelineDescriptor) return WGPURenderPipeline
   with Convention => C;  -- webgpu.h:3743

   type WGPUProcDeviceCreateRenderPipelineAsync is access procedure
        (arg1 : T_WGPUDevice;
         arg2 : access constant WGPURenderPipelineDescriptor;
         arg3 : WGPUCreateRenderPipelineAsyncCallback;
         arg4 : T_Address)
   with Convention => C;  -- webgpu.h:3744

   type WGPUProcDeviceCreateRenderPipelineAsync2 is access function
        (arg1 : T_WGPUDevice;
         arg2 : access constant WGPURenderPipelineDescriptor;
         arg3 : WGPUCreateRenderPipelineAsyncCallbackInfo2) return WGPUFuture
   with Convention => C;  -- webgpu.h:3745

   type WGPUProcDeviceCreateRenderPipelineAsyncF is access function
        (arg1 : T_WGPUDevice;
         arg2 : access constant WGPURenderPipelineDescriptor;
         arg3 : WGPUCreateRenderPipelineAsyncCallbackInfo) return WGPUFuture
   with Convention => C;  -- webgpu.h:3746

   type WGPUProcDeviceCreateSampler is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUSamplerDescriptor) return WGPUSampler
   with Convention => C;  -- webgpu.h:3747

   type WGPUProcDeviceCreateShaderModule is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUShaderModuleDescriptor) return WGPUShaderModule
   with Convention => C;  -- webgpu.h:3748

   type WGPUProcDeviceCreateTexture is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUTextureDescriptor) return WGPUTexture
   with Convention => C;  -- webgpu.h:3749

   type WGPUProcDeviceDestroy is access procedure (arg1 : T_WGPUDevice)
   with Convention => C;  -- webgpu.h:3750

   type WGPUProcDeviceEnumerateFeatures is access function (arg1 : T_WGPUDevice; arg2 : access T_Feature_Name) return T_Size
   with Convention => C;  -- webgpu.h:3751

   type WGPUProcDeviceForceLoss is access procedure
        (arg1 : T_WGPUDevice;
         arg2 : T_Device_Lost_Reason;
         arg3 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3752

   type WGPUProcDeviceGetAHardwareBufferProperties is access function
        (arg1 : T_WGPUDevice;
         arg2 : T_Address;
         arg3 : access WGPUAHardwareBufferProperties) return T_Status
   with Convention => C;  -- webgpu.h:3753

   type WGPUProcDeviceGetAdapter is access function (arg1 : T_WGPUDevice) return T_WGPUAdapter
   with Convention => C;  -- webgpu.h:3754

   type WGPUProcDeviceGetFeatures is access procedure (arg1 : T_WGPUDevice; arg2 : access WGPUSupportedFeatures)
   with Convention => C;  -- webgpu.h:3755

   type WGPUProcDeviceGetLimits is access function (arg1 : T_WGPUDevice; arg2 : access T_WGPUSupportedLimits) return T_Status
   with Convention => C;  -- webgpu.h:3756

   type WGPUProcDeviceGetLostFuture is access function (arg1 : T_WGPUDevice) return WGPUFuture
   with Convention => C;  -- webgpu.h:3757

   type WGPUProcDeviceGetQueue is access function (arg1 : T_WGPUDevice) return T_WGPUQueue
   with Convention => C;  -- webgpu.h:3758

   type WGPUProcDeviceHasFeature is access function (arg1 : T_WGPUDevice; arg2 : T_Feature_Name) return T_WGPUBool
   with Convention => C;  -- webgpu.h:3759

   type WGPUProcDeviceImportSharedBufferMemory is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUSharedBufferMemoryDescriptor) return WGPUSharedBufferMemory
   with Convention => C;  -- webgpu.h:3760

   type WGPUProcDeviceImportSharedFence is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUSharedFenceDescriptor) return WGPUSharedFence
   with Convention => C;  -- webgpu.h:3761

   type WGPUProcDeviceImportSharedTextureMemory is access function (arg1 : T_WGPUDevice; arg2 : access constant WGPUSharedTextureMemoryDescriptor) return WGPUSharedTextureMemory
   with Convention => C;  -- webgpu.h:3762

   type WGPUProcDeviceInjectError is access procedure
        (arg1 : T_WGPUDevice;
         arg2 : T_Error_Kind;
         arg3 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3763

   type WGPUProcDevicePopErrorScope is access procedure
        (arg1 : T_WGPUDevice;
         arg2 : T_WGPUErrorCallback;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:3764

   type WGPUProcDevicePopErrorScope2 is access function (arg1 : T_WGPUDevice; arg2 : WGPUPopErrorScopeCallbackInfo2) return WGPUFuture
   with Convention => C;  -- webgpu.h:3765

   type WGPUProcDevicePopErrorScopeF is access function (arg1 : T_WGPUDevice; arg2 : WGPUPopErrorScopeCallbackInfo) return WGPUFuture
   with Convention => C;  -- webgpu.h:3766

   type WGPUProcDevicePushErrorScope is access procedure (arg1 : T_WGPUDevice; arg2 : WGPUErrorFilter)
   with Convention => C;  -- webgpu.h:3767

   type WGPUProcDeviceSetDeviceLostCallback is access procedure
        (arg1 : T_WGPUDevice;
         arg2 : T_WGPUDeviceLostCallback_DEPRECATED;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:3768

   type WGPUProcDeviceSetLabel is access procedure (arg1 : T_WGPUDevice; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3769

   type WGPUProcDeviceSetLoggingCallback is access procedure
        (arg1 : T_WGPUDevice;
         arg2 : WGPULoggingCallback;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:3770

   type WGPUProcDeviceSetUncapturedErrorCallback is access procedure
        (arg1 : T_WGPUDevice;
         arg2 : T_WGPUErrorCallback;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:3771

   type WGPUProcDeviceTick is access procedure (arg1 : T_WGPUDevice)
   with Convention => C;  -- webgpu.h:3772

   type WGPUProcDeviceValidateTextureDescriptor is access procedure (arg1 : T_WGPUDevice; arg2 : access constant WGPUTextureDescriptor)
   with Convention => C;  -- webgpu.h:3773

   type WGPUProcDeviceAddRef is access procedure (arg1 : T_WGPUDevice)
   with Convention => C;  -- webgpu.h:3774

   type WGPUProcDeviceRelease is access procedure (arg1 : T_WGPUDevice)
   with Convention => C;  -- webgpu.h:3775

  -- Procs of ExternalTexture
   type WGPUProcExternalTextureDestroy is access procedure (arg1 : WGPUExternalTexture)
   with Convention => C;  -- webgpu.h:3778

   type WGPUProcExternalTextureExpire is access procedure (arg1 : WGPUExternalTexture)
   with Convention => C;  -- webgpu.h:3779

   type WGPUProcExternalTextureRefresh is access procedure (arg1 : WGPUExternalTexture)
   with Convention => C;  -- webgpu.h:3780

   type WGPUProcExternalTextureSetLabel is access procedure (arg1 : WGPUExternalTexture; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3781

   type WGPUProcExternalTextureAddRef is access procedure (arg1 : WGPUExternalTexture)
   with Convention => C;  -- webgpu.h:3782

   type WGPUProcExternalTextureRelease is access procedure (arg1 : WGPUExternalTexture)
   with Convention => C;  -- webgpu.h:3783

  -- Procs of Instance
   type WGPUProcInstanceCreateSurface is access function (arg1 : T_WGPUInstance; arg2 : access constant WGPUSurfaceDescriptor) return T_WGPUSurface
   with Convention => C;  -- webgpu.h:3786

   type WGPUProcInstanceEnumerateWGSLLanguageFeatures is access function (arg1 : T_WGPUInstance; arg2 : access WGPUWGSLFeatureName) return T_Size
   with Convention => C;  -- webgpu.h:3787

   type WGPUProcInstanceHasWGSLLanguageFeature is access function (arg1 : T_WGPUInstance; arg2 : WGPUWGSLFeatureName) return T_WGPUBool
   with Convention => C;  -- webgpu.h:3788

   type WGPUProcInstanceProcessEvents is access procedure (arg1 : T_WGPUInstance)
   with Convention => C;  -- webgpu.h:3789

   type WGPUProcInstanceRequestAdapter is access procedure
        (arg1 : T_WGPUInstance;
         arg2 : access constant T_WGPURequestAdapterOptions;
         arg3 : WGPURequestAdapterCallback;
         arg4 : T_Address)
   with Convention => C;  -- webgpu.h:3790

   type WGPUProcInstanceRequestAdapter2 is access function
        (arg1 : T_WGPUInstance;
         arg2 : access constant T_WGPURequestAdapterOptions;
         arg3 : WGPURequestAdapterCallbackInfo2) return WGPUFuture
   with Convention => C;  -- webgpu.h:3791

   type WGPUProcInstanceRequestAdapterF is access function
        (arg1 : T_WGPUInstance;
         arg2 : access constant T_WGPURequestAdapterOptions;
         arg3 : WGPURequestAdapterCallbackInfo) return WGPUFuture
   with Convention => C;  -- webgpu.h:3792

   type WGPUProcInstanceWaitAny is access function
        (arg1 : T_WGPUInstance;
         arg2 : T_Size;
         arg3 : access WGPUFutureWaitInfo;
         arg4 : T_UInt64) return WGPUWaitStatus
   with Convention => C;  -- webgpu.h:3793

   type WGPUProcInstanceAddRef is access procedure (arg1 : T_WGPUInstance)
   with Convention => C;  -- webgpu.h:3794

   type WGPUProcInstanceRelease is access procedure (arg1 : T_WGPUInstance)
   with Convention => C;  -- webgpu.h:3795

  -- Procs of PipelineLayout
   type WGPUProcPipelineLayoutSetLabel is access procedure (arg1 : WGPUPipelineLayout; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3798

   type WGPUProcPipelineLayoutAddRef is access procedure (arg1 : WGPUPipelineLayout)
   with Convention => C;  -- webgpu.h:3799

   type WGPUProcPipelineLayoutRelease is access procedure (arg1 : WGPUPipelineLayout)
   with Convention => C;  -- webgpu.h:3800

  -- Procs of QuerySet
   type WGPUProcQuerySetDestroy is access procedure (arg1 : WGPUQuerySet)
   with Convention => C;  -- webgpu.h:3803

   type WGPUProcQuerySetGetCount is access function (arg1 : WGPUQuerySet) return T_UInt32
   with Convention => C;  -- webgpu.h:3804

   type WGPUProcQuerySetGetType is access function (arg1 : WGPUQuerySet) return WGPUQueryType
   with Convention => C;  -- webgpu.h:3805

   type WGPUProcQuerySetSetLabel is access procedure (arg1 : WGPUQuerySet; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3806

   type WGPUProcQuerySetAddRef is access procedure (arg1 : WGPUQuerySet)
   with Convention => C;  -- webgpu.h:3807

   type WGPUProcQuerySetRelease is access procedure (arg1 : WGPUQuerySet)
   with Convention => C;  -- webgpu.h:3808

  -- Procs of Queue
   type WGPUProcQueueCopyExternalTextureForBrowser is access procedure
        (arg1 : T_WGPUQueue;
         arg2 : access constant WGPUImageCopyExternalTexture;
         arg3 : access constant WGPUImageCopyTexture;
         arg4 : access constant WGPUExtent3D;
         arg5 : access constant WGPUCopyTextureForBrowserOptions)
   with Convention => C;  -- webgpu.h:3811

   type WGPUProcQueueCopyTextureForBrowser is access procedure
        (arg1 : T_WGPUQueue;
         arg2 : access constant WGPUImageCopyTexture;
         arg3 : access constant WGPUImageCopyTexture;
         arg4 : access constant WGPUExtent3D;
         arg5 : access constant WGPUCopyTextureForBrowserOptions)
   with Convention => C;  -- webgpu.h:3812

   type WGPUProcQueueOnSubmittedWorkDone is access procedure
        (arg1 : T_WGPUQueue;
         arg2 : WGPUQueueWorkDoneCallback;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:3813

   type WGPUProcQueueOnSubmittedWorkDone2 is access function (arg1 : T_WGPUQueue; arg2 : WGPUQueueWorkDoneCallbackInfo2) return WGPUFuture
   with Convention => C;  -- webgpu.h:3814

   type WGPUProcQueueOnSubmittedWorkDoneF is access function (arg1 : T_WGPUQueue; arg2 : WGPUQueueWorkDoneCallbackInfo) return WGPUFuture
   with Convention => C;  -- webgpu.h:3815

   type WGPUProcQueueSetLabel is access procedure (arg1 : T_WGPUQueue; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3816

   type WGPUProcQueueSubmit is access procedure
        (arg1 : T_WGPUQueue;
         arg2 : T_Size;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:3817

   type WGPUProcQueueWriteBuffer is access procedure
        (arg1 : T_WGPUQueue;
         arg2 : WGPUBuffer;
         arg3 : T_UInt64;
         arg4 : T_Address;
         arg5 : T_Size)
   with Convention => C;  -- webgpu.h:3818

   type WGPUProcQueueWriteTexture is access procedure
        (arg1 : T_WGPUQueue;
         arg2 : access constant WGPUImageCopyTexture;
         arg3 : T_Address;
         arg4 : T_Size;
         arg5 : access constant WGPUTextureDataLayout;
         arg6 : access constant WGPUExtent3D)
   with Convention => C;  -- webgpu.h:3819

   type WGPUProcQueueAddRef is access procedure (arg1 : T_WGPUQueue)
   with Convention => C;  -- webgpu.h:3820

   type WGPUProcQueueRelease is access procedure (arg1 : T_WGPUQueue)
   with Convention => C;  -- webgpu.h:3821

  -- Procs of RenderBundle
   type WGPUProcRenderBundleSetLabel is access procedure (arg1 : WGPURenderBundle; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3824

   type WGPUProcRenderBundleAddRef is access procedure (arg1 : WGPURenderBundle)
   with Convention => C;  -- webgpu.h:3825

   type WGPUProcRenderBundleRelease is access procedure (arg1 : WGPURenderBundle)
   with Convention => C;  -- webgpu.h:3826

  -- Procs of RenderBundleEncoder
   type WGPUProcRenderBundleEncoderDraw is access procedure
        (arg1 : WGPURenderBundleEncoder;
         arg2 : T_UInt32;
         arg3 : T_UInt32;
         arg4 : T_UInt32;
         arg5 : T_UInt32)
   with Convention => C;  -- webgpu.h:3829

   type WGPUProcRenderBundleEncoderDrawIndexed is access procedure
        (arg1 : WGPURenderBundleEncoder;
         arg2 : T_UInt32;
         arg3 : T_UInt32;
         arg4 : T_UInt32;
         arg5 : bits_stdint_intn_h.int32_t;
         arg6 : T_UInt32)
   with Convention => C;  -- webgpu.h:3830

   type WGPUProcRenderBundleEncoderDrawIndexedIndirect is access procedure
        (arg1 : WGPURenderBundleEncoder;
         arg2 : WGPUBuffer;
         arg3 : T_UInt64)
   with Convention => C;  -- webgpu.h:3831

   type WGPUProcRenderBundleEncoderDrawIndirect is access procedure
        (arg1 : WGPURenderBundleEncoder;
         arg2 : WGPUBuffer;
         arg3 : T_UInt64)
   with Convention => C;  -- webgpu.h:3832

   type WGPUProcRenderBundleEncoderFinish is access function (arg1 : WGPURenderBundleEncoder; arg2 : access constant WGPURenderBundleDescriptor) return WGPURenderBundle
   with Convention => C;  -- webgpu.h:3833

   type WGPUProcRenderBundleEncoderInsertDebugMarker is access procedure (arg1 : WGPURenderBundleEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3834

   type WGPUProcRenderBundleEncoderPopDebugGroup is access procedure (arg1 : WGPURenderBundleEncoder)
   with Convention => C;  -- webgpu.h:3835

   type WGPUProcRenderBundleEncoderPushDebugGroup is access procedure (arg1 : WGPURenderBundleEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3836

   type WGPUProcRenderBundleEncoderSetBindGroup is access procedure
        (arg1 : WGPURenderBundleEncoder;
         arg2 : T_UInt32;
         arg3 : WGPUBindGroup;
         arg4 : T_Size;
         arg5 : access T_UInt32)
   with Convention => C;  -- webgpu.h:3837

   type WGPUProcRenderBundleEncoderSetIndexBuffer is access procedure
        (arg1 : WGPURenderBundleEncoder;
         arg2 : WGPUBuffer;
         arg3 : WGPUIndexFormat;
         arg4 : T_UInt64;
         arg5 : T_UInt64)
   with Convention => C;  -- webgpu.h:3838

   type WGPUProcRenderBundleEncoderSetLabel is access procedure (arg1 : WGPURenderBundleEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3839

   type WGPUProcRenderBundleEncoderSetPipeline is access procedure (arg1 : WGPURenderBundleEncoder; arg2 : WGPURenderPipeline)
   with Convention => C;  -- webgpu.h:3840

   type WGPUProcRenderBundleEncoderSetVertexBuffer is access procedure
        (arg1 : WGPURenderBundleEncoder;
         arg2 : T_UInt32;
         arg3 : WGPUBuffer;
         arg4 : T_UInt64;
         arg5 : T_UInt64)
   with Convention => C;  -- webgpu.h:3841

   type WGPUProcRenderBundleEncoderAddRef is access procedure (arg1 : WGPURenderBundleEncoder)
   with Convention => C;  -- webgpu.h:3842

   type WGPUProcRenderBundleEncoderRelease is access procedure (arg1 : WGPURenderBundleEncoder)
   with Convention => C;  -- webgpu.h:3843

  -- Procs of RenderPassEncoder
   type WGPUProcRenderPassEncoderBeginOcclusionQuery is access procedure (arg1 : WGPURenderPassEncoder; arg2 : T_UInt32)
   with Convention => C;  -- webgpu.h:3846

   type WGPUProcRenderPassEncoderDraw is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : T_UInt32;
         arg3 : T_UInt32;
         arg4 : T_UInt32;
         arg5 : T_UInt32)
   with Convention => C;  -- webgpu.h:3847

   type WGPUProcRenderPassEncoderDrawIndexed is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : T_UInt32;
         arg3 : T_UInt32;
         arg4 : T_UInt32;
         arg5 : bits_stdint_intn_h.int32_t;
         arg6 : T_UInt32)
   with Convention => C;  -- webgpu.h:3848

   type WGPUProcRenderPassEncoderDrawIndexedIndirect is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : WGPUBuffer;
         arg3 : T_UInt64)
   with Convention => C;  -- webgpu.h:3849

   type WGPUProcRenderPassEncoderDrawIndirect is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : WGPUBuffer;
         arg3 : T_UInt64)
   with Convention => C;  -- webgpu.h:3850

   type WGPUProcRenderPassEncoderEnd is access procedure (arg1 : WGPURenderPassEncoder)
   with Convention => C;  -- webgpu.h:3851

   type WGPUProcRenderPassEncoderEndOcclusionQuery is access procedure (arg1 : WGPURenderPassEncoder)
   with Convention => C;  -- webgpu.h:3852

   type WGPUProcRenderPassEncoderExecuteBundles is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : T_Size;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:3853

   type WGPUProcRenderPassEncoderInsertDebugMarker is access procedure (arg1 : WGPURenderPassEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3854

   type WGPUProcRenderPassEncoderMultiDrawIndexedIndirect is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : WGPUBuffer;
         arg3 : T_UInt64;
         arg4 : T_UInt32;
         arg5 : WGPUBuffer;
         arg6 : T_UInt64)
   with Convention => C;  -- webgpu.h:3855

   type WGPUProcRenderPassEncoderMultiDrawIndirect is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : WGPUBuffer;
         arg3 : T_UInt64;
         arg4 : T_UInt32;
         arg5 : WGPUBuffer;
         arg6 : T_UInt64)
   with Convention => C;  -- webgpu.h:3856

   type WGPUProcRenderPassEncoderPixelLocalStorageBarrier is access procedure (arg1 : WGPURenderPassEncoder)
   with Convention => C;  -- webgpu.h:3857

   type WGPUProcRenderPassEncoderPopDebugGroup is access procedure (arg1 : WGPURenderPassEncoder)
   with Convention => C;  -- webgpu.h:3858

   type WGPUProcRenderPassEncoderPushDebugGroup is access procedure (arg1 : WGPURenderPassEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3859

   type WGPUProcRenderPassEncoderSetBindGroup is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : T_UInt32;
         arg3 : WGPUBindGroup;
         arg4 : T_Size;
         arg5 : access T_UInt32)
   with Convention => C;  -- webgpu.h:3860

   type WGPUProcRenderPassEncoderSetBlendConstant is access procedure (arg1 : WGPURenderPassEncoder; arg2 : access constant WGPUColor)
   with Convention => C;  -- webgpu.h:3861

   type WGPUProcRenderPassEncoderSetIndexBuffer is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : WGPUBuffer;
         arg3 : WGPUIndexFormat;
         arg4 : T_UInt64;
         arg5 : T_UInt64)
   with Convention => C;  -- webgpu.h:3862

   type WGPUProcRenderPassEncoderSetLabel is access procedure (arg1 : WGPURenderPassEncoder; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3863

   type WGPUProcRenderPassEncoderSetPipeline is access procedure (arg1 : WGPURenderPassEncoder; arg2 : WGPURenderPipeline)
   with Convention => C;  -- webgpu.h:3864

   type WGPUProcRenderPassEncoderSetScissorRect is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : T_UInt32;
         arg3 : T_UInt32;
         arg4 : T_UInt32;
         arg5 : T_UInt32)
   with Convention => C;  -- webgpu.h:3865

   type WGPUProcRenderPassEncoderSetStencilReference is access procedure (arg1 : WGPURenderPassEncoder; arg2 : T_UInt32)
   with Convention => C;  -- webgpu.h:3866

   type WGPUProcRenderPassEncoderSetVertexBuffer is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : T_UInt32;
         arg3 : WGPUBuffer;
         arg4 : T_UInt64;
         arg5 : T_UInt64)
   with Convention => C;  -- webgpu.h:3867

   type WGPUProcRenderPassEncoderSetViewport is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : float;
         arg3 : float;
         arg4 : float;
         arg5 : float;
         arg6 : float;
         arg7 : float)
   with Convention => C;  -- webgpu.h:3868

   type WGPUProcRenderPassEncoderWriteTimestamp is access procedure
        (arg1 : WGPURenderPassEncoder;
         arg2 : WGPUQuerySet;
         arg3 : T_UInt32)
   with Convention => C;  -- webgpu.h:3869

   type WGPUProcRenderPassEncoderAddRef is access procedure (arg1 : WGPURenderPassEncoder)
   with Convention => C;  -- webgpu.h:3870

   type WGPUProcRenderPassEncoderRelease is access procedure (arg1 : WGPURenderPassEncoder)
   with Convention => C;  -- webgpu.h:3871

  -- Procs of RenderPipeline
   type WGPUProcRenderPipelineGetBindGroupLayout is access function (arg1 : WGPURenderPipeline; arg2 : T_UInt32) return WGPUBindGroupLayout
   with Convention => C;  -- webgpu.h:3874

   type WGPUProcRenderPipelineSetLabel is access procedure (arg1 : WGPURenderPipeline; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3875

   type WGPUProcRenderPipelineAddRef is access procedure (arg1 : WGPURenderPipeline)
   with Convention => C;  -- webgpu.h:3876

   type WGPUProcRenderPipelineRelease is access procedure (arg1 : WGPURenderPipeline)
   with Convention => C;  -- webgpu.h:3877

  -- Procs of Sampler
   type WGPUProcSamplerSetLabel is access procedure (arg1 : WGPUSampler; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3880

   type WGPUProcSamplerAddRef is access procedure (arg1 : WGPUSampler)
   with Convention => C;  -- webgpu.h:3881

   type WGPUProcSamplerRelease is access procedure (arg1 : WGPUSampler)
   with Convention => C;  -- webgpu.h:3882

  -- Procs of ShaderModule
   type WGPUProcShaderModuleGetCompilationInfo is access procedure
        (arg1 : WGPUShaderModule;
         arg2 : WGPUCompilationInfoCallback;
         arg3 : T_Address)
   with Convention => C;  -- webgpu.h:3885

   type WGPUProcShaderModuleGetCompilationInfo2 is access function (arg1 : WGPUShaderModule; arg2 : WGPUCompilationInfoCallbackInfo2) return WGPUFuture
   with Convention => C;  -- webgpu.h:3886

   type WGPUProcShaderModuleGetCompilationInfoF is access function (arg1 : WGPUShaderModule; arg2 : WGPUCompilationInfoCallbackInfo) return WGPUFuture
   with Convention => C;  -- webgpu.h:3887

   type WGPUProcShaderModuleSetLabel is access procedure (arg1 : WGPUShaderModule; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3888

   type WGPUProcShaderModuleAddRef is access procedure (arg1 : WGPUShaderModule)
   with Convention => C;  -- webgpu.h:3889

   type WGPUProcShaderModuleRelease is access procedure (arg1 : WGPUShaderModule)
   with Convention => C;  -- webgpu.h:3890

  -- Procs of SharedBufferMemory
   type WGPUProcSharedBufferMemoryBeginAccess is access function
        (arg1 : WGPUSharedBufferMemory;
         arg2 : WGPUBuffer;
         arg3 : access constant WGPUSharedBufferMemoryBeginAccessDescriptor) return T_Status
   with Convention => C;  -- webgpu.h:3893

   type WGPUProcSharedBufferMemoryCreateBuffer is access function (arg1 : WGPUSharedBufferMemory; arg2 : access constant WGPUBufferDescriptor) return WGPUBuffer
   with Convention => C;  -- webgpu.h:3894

   type WGPUProcSharedBufferMemoryEndAccess is access function
        (arg1 : WGPUSharedBufferMemory;
         arg2 : WGPUBuffer;
         arg3 : access WGPUSharedBufferMemoryEndAccessState) return T_Status
   with Convention => C;  -- webgpu.h:3895

   type WGPUProcSharedBufferMemoryGetProperties is access function (arg1 : WGPUSharedBufferMemory; arg2 : access WGPUSharedBufferMemoryProperties) return T_Status
   with Convention => C;  -- webgpu.h:3896

   type WGPUProcSharedBufferMemoryIsDeviceLost is access function (arg1 : WGPUSharedBufferMemory) return T_WGPUBool
   with Convention => C;  -- webgpu.h:3897

   type WGPUProcSharedBufferMemorySetLabel is access procedure (arg1 : WGPUSharedBufferMemory; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3898

   type WGPUProcSharedBufferMemoryAddRef is access procedure (arg1 : WGPUSharedBufferMemory)
   with Convention => C;  -- webgpu.h:3899

   type WGPUProcSharedBufferMemoryRelease is access procedure (arg1 : WGPUSharedBufferMemory)
   with Convention => C;  -- webgpu.h:3900

  -- Procs of SharedFence
   type WGPUProcSharedFenceExportInfo is access procedure (arg1 : WGPUSharedFence; arg2 : access T_WGPUSharedFenceExportInfo)
   with Convention => C;  -- webgpu.h:3903

   type WGPUProcSharedFenceAddRef is access procedure (arg1 : WGPUSharedFence)
   with Convention => C;  -- webgpu.h:3904

   type WGPUProcSharedFenceRelease is access procedure (arg1 : WGPUSharedFence)
   with Convention => C;  -- webgpu.h:3905

  -- Procs of SharedTextureMemory
   type WGPUProcSharedTextureMemoryBeginAccess is access function
        (arg1 : WGPUSharedTextureMemory;
         arg2 : WGPUTexture;
         arg3 : access constant WGPUSharedTextureMemoryBeginAccessDescriptor) return T_Status
   with Convention => C;  -- webgpu.h:3908

   type WGPUProcSharedTextureMemoryCreateTexture is access function (arg1 : WGPUSharedTextureMemory; arg2 : access constant WGPUTextureDescriptor) return WGPUTexture
   with Convention => C;  -- webgpu.h:3909

   type WGPUProcSharedTextureMemoryEndAccess is access function
        (arg1 : WGPUSharedTextureMemory;
         arg2 : WGPUTexture;
         arg3 : access WGPUSharedTextureMemoryEndAccessState) return T_Status
   with Convention => C;  -- webgpu.h:3910

   type WGPUProcSharedTextureMemoryGetProperties is access function (arg1 : WGPUSharedTextureMemory; arg2 : access WGPUSharedTextureMemoryProperties) return T_Status
   with Convention => C;  -- webgpu.h:3911

   type WGPUProcSharedTextureMemoryIsDeviceLost is access function (arg1 : WGPUSharedTextureMemory) return T_WGPUBool
   with Convention => C;  -- webgpu.h:3912

   type WGPUProcSharedTextureMemorySetLabel is access procedure (arg1 : WGPUSharedTextureMemory; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3913

   type WGPUProcSharedTextureMemoryAddRef is access procedure (arg1 : WGPUSharedTextureMemory)
   with Convention => C;  -- webgpu.h:3914

   type WGPUProcSharedTextureMemoryRelease is access procedure (arg1 : WGPUSharedTextureMemory)
   with Convention => C;  -- webgpu.h:3915

  -- Procs of Surface
   type WGPUProcSurfaceConfigure is access procedure (arg1 : T_WGPUSurface; arg2 : access constant WGPUSurfaceConfiguration)
   with Convention => C;  -- webgpu.h:3918

   type WGPUProcSurfaceGetCapabilities is access function
        (arg1 : T_WGPUSurface;
         arg2 : T_WGPUAdapter;
         arg3 : access WGPUSurfaceCapabilities) return T_Status
   with Convention => C;  -- webgpu.h:3919

   type WGPUProcSurfaceGetCurrentTexture is access procedure (arg1 : T_WGPUSurface; arg2 : access WGPUSurfaceTexture)
   with Convention => C;  -- webgpu.h:3920

   type WGPUProcSurfacePresent is access procedure (arg1 : T_WGPUSurface)
   with Convention => C;  -- webgpu.h:3921

   type WGPUProcSurfaceSetLabel is access procedure (arg1 : T_WGPUSurface; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3922

   type WGPUProcSurfaceUnconfigure is access procedure (arg1 : T_WGPUSurface)
   with Convention => C;  -- webgpu.h:3923

   type WGPUProcSurfaceAddRef is access procedure (arg1 : T_WGPUSurface)
   with Convention => C;  -- webgpu.h:3924

   type WGPUProcSurfaceRelease is access procedure (arg1 : T_WGPUSurface)
   with Convention => C;  -- webgpu.h:3925

  -- Procs of Texture
   type WGPUProcTextureCreateErrorView is access function (arg1 : WGPUTexture; arg2 : access constant WGPUTextureViewDescriptor) return WGPUTextureView
   with Convention => C;  -- webgpu.h:3928

   type WGPUProcTextureCreateView is access function (arg1 : WGPUTexture; arg2 : access constant WGPUTextureViewDescriptor) return WGPUTextureView
   with Convention => C;  -- webgpu.h:3929

   type WGPUProcTextureDestroy is access procedure (arg1 : WGPUTexture)
   with Convention => C;  -- webgpu.h:3930

   type WGPUProcTextureGetDepthOrArrayLayers is access function (arg1 : WGPUTexture) return T_UInt32
   with Convention => C;  -- webgpu.h:3931

   type WGPUProcTextureGetDimension is access function (arg1 : WGPUTexture) return WGPUTextureDimension
   with Convention => C;  -- webgpu.h:3932

   type WGPUProcTextureGetFormat is access function (arg1 : WGPUTexture) return WGPUTextureFormat
   with Convention => C;  -- webgpu.h:3933

   type WGPUProcTextureGetHeight is access function (arg1 : WGPUTexture) return T_UInt32
   with Convention => C;  -- webgpu.h:3934

   type WGPUProcTextureGetMipLevelCount is access function (arg1 : WGPUTexture) return T_UInt32
   with Convention => C;  -- webgpu.h:3935

   type WGPUProcTextureGetSampleCount is access function (arg1 : WGPUTexture) return T_UInt32
   with Convention => C;  -- webgpu.h:3936

   type WGPUProcTextureGetUsage is access function (arg1 : WGPUTexture) return WGPUTextureUsage
   with Convention => C;  -- webgpu.h:3937

   type WGPUProcTextureGetWidth is access function (arg1 : WGPUTexture) return T_UInt32
   with Convention => C;  -- webgpu.h:3938

   type WGPUProcTextureSetLabel is access procedure (arg1 : WGPUTexture; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3939

   type WGPUProcTextureAddRef is access procedure (arg1 : WGPUTexture)
   with Convention => C;  -- webgpu.h:3940

   type WGPUProcTextureRelease is access procedure (arg1 : WGPUTexture)
   with Convention => C;  -- webgpu.h:3941

  -- Procs of TextureView
   type WGPUProcTextureViewSetLabel is access procedure (arg1 : WGPUTextureView; arg2 : T_WGPUStringView)
   with Convention => C;  -- webgpu.h:3944

   type WGPUProcTextureViewAddRef is access procedure (arg1 : WGPUTextureView)
   with Convention => C;  -- webgpu.h:3945

   type WGPUProcTextureViewRelease is access procedure (arg1 : WGPUTextureView)
   with Convention => C;  -- webgpu.h:3946

   procedure wgpuAdapterInfoFreeMembers (value : WGPUAdapterInfo)  -- webgpu.h:3953
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterInfoFreeMembers";

   procedure wgpuAdapterPropertiesMemoryHeapsFreeMembers (value : WGPUAdapterPropertiesMemoryHeaps)  -- webgpu.h:3954
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterPropertiesMemoryHeapsFreeMembers";

   function wgpuCreateInstance (descriptor : access constant T_WGPUInstanceDescriptor) return T_WGPUInstance  -- webgpu.h:3955
   with Import => True,
        Convention => C,
        External_Name => "wgpuCreateInstance";

   procedure wgpuDrmFormatCapabilitiesFreeMembers (value : WGPUDrmFormatCapabilities)  -- webgpu.h:3956
   with Import => True,
        Convention => C,
        External_Name => "wgpuDrmFormatCapabilitiesFreeMembers";

   function wgpuGetInstanceFeatures (features : access WGPUInstanceFeatures) return T_Status  -- webgpu.h:3957
   with Import => True,
        Convention => C,
        External_Name => "wgpuGetInstanceFeatures";

   function wgpuGetProcAddress (procName : T_WGPUStringView) return WGPUProc  -- webgpu.h:3958
   with Import => True,
        Convention => C,
        External_Name => "wgpuGetProcAddress";

   procedure wgpuSharedBufferMemoryEndAccessStateFreeMembers (value : WGPUSharedBufferMemoryEndAccessState)  -- webgpu.h:3959
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedBufferMemoryEndAccessStateFreeMembers";

   procedure wgpuSharedTextureMemoryEndAccessStateFreeMembers (value : WGPUSharedTextureMemoryEndAccessState)  -- webgpu.h:3960
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedTextureMemoryEndAccessStateFreeMembers";

   procedure wgpuSupportedFeaturesFreeMembers (value : WGPUSupportedFeatures)  -- webgpu.h:3961
   with Import => True,
        Convention => C,
        External_Name => "wgpuSupportedFeaturesFreeMembers";

   procedure wgpuSurfaceCapabilitiesFreeMembers (value : WGPUSurfaceCapabilities)  -- webgpu.h:3962
   with Import => True,
        Convention => C,
        External_Name => "wgpuSurfaceCapabilitiesFreeMembers";

  -- Methods of Adapter
   function wgpuAdapterCreateDevice (adapter : T_WGPUAdapter; descriptor : access constant T_WGPUDeviceDescriptor) return T_WGPUDevice  -- webgpu.h:3965
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterCreateDevice";

   function wgpuAdapterEnumerateFeatures (adapter : T_WGPUAdapter; features : access T_Feature_Name) return T_Size  -- webgpu.h:3966
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterEnumerateFeatures";

   procedure wgpuAdapterGetFeatures (adapter : T_WGPUAdapter; features : access WGPUSupportedFeatures)  -- webgpu.h:3967
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterGetFeatures";

   function wgpuAdapterGetFormatCapabilities
     (adapter : T_WGPUAdapter;
      format : WGPUTextureFormat;
      capabilities : access WGPUFormatCapabilities) return T_Status  -- webgpu.h:3968
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterGetFormatCapabilities";

   function wgpuAdapterGetInfo (adapter : T_WGPUAdapter; info : access WGPUAdapterInfo) return T_Status  -- webgpu.h:3969
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterGetInfo";

   function wgpuAdapterGetInstance (adapter : T_WGPUAdapter) return T_WGPUInstance  -- webgpu.h:3970
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterGetInstance";

   function wgpuAdapterGetLimits (adapter : T_WGPUAdapter; limits : access T_WGPUSupportedLimits) return T_Status  -- webgpu.h:3971
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterGetLimits";

   function wgpuAdapterHasFeature (adapter : T_WGPUAdapter; feature : T_Feature_Name) return T_WGPUBool  -- webgpu.h:3972
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterHasFeature";

   procedure wgpuAdapterRequestDevice
     (adapter : T_WGPUAdapter;
      descriptor : access constant T_WGPUDeviceDescriptor;
      callback : T_WGPURequestDeviceCallback;
      userdata : T_Address)  -- webgpu.h:3973
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterRequestDevice";

   function wgpuAdapterRequestDevice2
     (adapter : T_WGPUAdapter;
      options : access constant T_WGPUDeviceDescriptor;
      callbackInfo : WGPURequestDeviceCallbackInfo2) return WGPUFuture  -- webgpu.h:3974
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterRequestDevice2";

   function wgpuAdapterRequestDeviceF
     (adapter : T_WGPUAdapter;
      options : access constant T_WGPUDeviceDescriptor;
      callbackInfo : WGPURequestDeviceCallbackInfo) return WGPUFuture  -- webgpu.h:3975
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterRequestDeviceF";

   procedure wgpuAdapterAddRef (adapter : T_WGPUAdapter)  -- webgpu.h:3976
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterAddRef";

   procedure wgpuAdapterRelease (adapter : T_WGPUAdapter)  -- webgpu.h:3977
   with Import => True,
        Convention => C,
        External_Name => "wgpuAdapterRelease";

  -- Methods of BindGroup
   procedure wgpuBindGroupSetLabel (bindGroup : WGPUBindGroup; label : T_WGPUStringView)  -- webgpu.h:3980
   with Import => True,
        Convention => C,
        External_Name => "wgpuBindGroupSetLabel";

   procedure wgpuBindGroupAddRef (bindGroup : WGPUBindGroup)  -- webgpu.h:3981
   with Import => True,
        Convention => C,
        External_Name => "wgpuBindGroupAddRef";

   procedure wgpuBindGroupRelease (bindGroup : WGPUBindGroup)  -- webgpu.h:3982
   with Import => True,
        Convention => C,
        External_Name => "wgpuBindGroupRelease";

  -- Methods of BindGroupLayout
   procedure wgpuBindGroupLayoutSetLabel (bindGroupLayout : WGPUBindGroupLayout; label : T_WGPUStringView)  -- webgpu.h:3985
   with Import => True,
        Convention => C,
        External_Name => "wgpuBindGroupLayoutSetLabel";

   procedure wgpuBindGroupLayoutAddRef (bindGroupLayout : WGPUBindGroupLayout)  -- webgpu.h:3986
   with Import => True,
        Convention => C,
        External_Name => "wgpuBindGroupLayoutAddRef";

   procedure wgpuBindGroupLayoutRelease (bindGroupLayout : WGPUBindGroupLayout)  -- webgpu.h:3987
   with Import => True,
        Convention => C,
        External_Name => "wgpuBindGroupLayoutRelease";

  -- Methods of Buffer
   procedure wgpuBufferDestroy (buffer : WGPUBuffer)  -- webgpu.h:3990
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferDestroy";

   function wgpuBufferGetConstMappedRange
     (buffer : WGPUBuffer;
      offset : T_Size;
      size : T_Size) return T_Address  -- webgpu.h:3991
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferGetConstMappedRange";

   function wgpuBufferGetMapState (buffer : WGPUBuffer) return WGPUBufferMapState  -- webgpu.h:3992
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferGetMapState";

   function wgpuBufferGetMappedRange
     (buffer : WGPUBuffer;
      offset : T_Size;
      size : T_Size) return T_Address  -- webgpu.h:3993
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferGetMappedRange";

   function wgpuBufferGetSize (buffer : WGPUBuffer) return T_UInt64  -- webgpu.h:3994
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferGetSize";

   function wgpuBufferGetUsage (buffer : WGPUBuffer) return WGPUBufferUsage  -- webgpu.h:3995
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferGetUsage";

   procedure wgpuBufferMapAsync
     (buffer : WGPUBuffer;
      mode : WGPUMapMode;
      offset : T_Size;
      size : T_Size;
      callback : WGPUBufferMapCallback;
      userdata : T_Address)  -- webgpu.h:3996
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferMapAsync";

   function wgpuBufferMapAsync2
     (buffer : WGPUBuffer;
      mode : WGPUMapMode;
      offset : T_Size;
      size : T_Size;
      callbackInfo : WGPUBufferMapCallbackInfo2) return WGPUFuture  -- webgpu.h:3997
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferMapAsync2";

   function wgpuBufferMapAsyncF
     (buffer : WGPUBuffer;
      mode : WGPUMapMode;
      offset : T_Size;
      size : T_Size;
      callbackInfo : WGPUBufferMapCallbackInfo) return WGPUFuture  -- webgpu.h:3998
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferMapAsyncF";

   procedure wgpuBufferSetLabel (buffer : WGPUBuffer; label : T_WGPUStringView)  -- webgpu.h:3999
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferSetLabel";

   procedure wgpuBufferUnmap (buffer : WGPUBuffer)  -- webgpu.h:4000
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferUnmap";

   procedure wgpuBufferAddRef (buffer : WGPUBuffer)  -- webgpu.h:4001
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferAddRef";

   procedure wgpuBufferRelease (buffer : WGPUBuffer)  -- webgpu.h:4002
   with Import => True,
        Convention => C,
        External_Name => "wgpuBufferRelease";

  -- Methods of CommandBuffer
   procedure wgpuCommandBufferSetLabel (commandBuffer : T_WGPUCommandBuffer; label : T_WGPUStringView)  -- webgpu.h:4005
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandBufferSetLabel";

   procedure wgpuCommandBufferAddRef (commandBuffer : T_WGPUCommandBuffer)  -- webgpu.h:4006
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandBufferAddRef";

   procedure wgpuCommandBufferRelease (commandBuffer : T_WGPUCommandBuffer)  -- webgpu.h:4007
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandBufferRelease";

  -- Methods of CommandEncoder
   function wgpuCommandEncoderBeginComputePass (commandEncoder : T_WGPUCommandEncoder; descriptor : access constant WGPUComputePassDescriptor) return WGPUComputePassEncoder  -- webgpu.h:4010
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderBeginComputePass";

   function wgpuCommandEncoderBeginRenderPass (commandEncoder : T_WGPUCommandEncoder; descriptor : access constant WGPURenderPassDescriptor) return WGPURenderPassEncoder  -- webgpu.h:4011
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderBeginRenderPass";

   procedure wgpuCommandEncoderClearBuffer
     (commandEncoder : T_WGPUCommandEncoder;
      buffer : WGPUBuffer;
      offset : T_UInt64;
      size : T_UInt64)  -- webgpu.h:4012
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderClearBuffer";

   procedure wgpuCommandEncoderCopyBufferToBuffer
     (commandEncoder : T_WGPUCommandEncoder;
      source : WGPUBuffer;
      sourceOffset : T_UInt64;
      destination : WGPUBuffer;
      destinationOffset : T_UInt64;
      size : T_UInt64)  -- webgpu.h:4013
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderCopyBufferToBuffer";

   procedure wgpuCommandEncoderCopyBufferToTexture
     (commandEncoder : T_WGPUCommandEncoder;
      source : access constant WGPUImageCopyBuffer;
      destination : access constant WGPUImageCopyTexture;
      copySize : access constant WGPUExtent3D)  -- webgpu.h:4014
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderCopyBufferToTexture";

   procedure wgpuCommandEncoderCopyTextureToBuffer
     (commandEncoder : T_WGPUCommandEncoder;
      source : access constant WGPUImageCopyTexture;
      destination : access constant WGPUImageCopyBuffer;
      copySize : access constant WGPUExtent3D)  -- webgpu.h:4015
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderCopyTextureToBuffer";

   procedure wgpuCommandEncoderCopyTextureToTexture
     (commandEncoder : T_WGPUCommandEncoder;
      source : access constant WGPUImageCopyTexture;
      destination : access constant WGPUImageCopyTexture;
      copySize : access constant WGPUExtent3D)  -- webgpu.h:4016
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderCopyTextureToTexture";

   function wgpuCommandEncoderFinish (commandEncoder : T_WGPUCommandEncoder; descriptor : access constant WGPUCommandBufferDescriptor) return T_WGPUCommandBuffer  -- webgpu.h:4017
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderFinish";

   procedure wgpuCommandEncoderInjectValidationError (commandEncoder : T_WGPUCommandEncoder; message : T_WGPUStringView)  -- webgpu.h:4018
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderInjectValidationError";

   procedure wgpuCommandEncoderInsertDebugMarker (commandEncoder : T_WGPUCommandEncoder; markerLabel : T_WGPUStringView)  -- webgpu.h:4019
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderInsertDebugMarker";

   procedure wgpuCommandEncoderPopDebugGroup (commandEncoder : T_WGPUCommandEncoder)  -- webgpu.h:4020
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderPopDebugGroup";

   procedure wgpuCommandEncoderPushDebugGroup (commandEncoder : T_WGPUCommandEncoder; groupLabel : T_WGPUStringView)  -- webgpu.h:4021
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderPushDebugGroup";

   procedure wgpuCommandEncoderResolveQuerySet
     (commandEncoder : T_WGPUCommandEncoder;
      querySet : WGPUQuerySet;
      firstQuery : T_UInt32;
      queryCount : T_UInt32;
      destination : WGPUBuffer;
      destinationOffset : T_UInt64)  -- webgpu.h:4022
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderResolveQuerySet";

   procedure wgpuCommandEncoderSetLabel (commandEncoder : T_WGPUCommandEncoder; label : T_WGPUStringView)  -- webgpu.h:4023
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderSetLabel";

   procedure wgpuCommandEncoderWriteBuffer
     (commandEncoder : T_WGPUCommandEncoder;
      buffer : WGPUBuffer;
      bufferOffset : T_UInt64;
      data : access bits_stdint_uintn_h.uint8_t;
      size : T_UInt64)  -- webgpu.h:4024
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderWriteBuffer";

   procedure wgpuCommandEncoderWriteTimestamp
     (commandEncoder : T_WGPUCommandEncoder;
      querySet : WGPUQuerySet;
      queryIndex : T_UInt32)  -- webgpu.h:4025
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderWriteTimestamp";

   procedure wgpuCommandEncoderAddRef (commandEncoder : T_WGPUCommandEncoder)  -- webgpu.h:4026
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderAddRef";

   procedure wgpuCommandEncoderRelease (commandEncoder : T_WGPUCommandEncoder)  -- webgpu.h:4027
   with Import => True,
        Convention => C,
        External_Name => "wgpuCommandEncoderRelease";

  -- Methods of ComputePassEncoder
   procedure wgpuComputePassEncoderDispatchWorkgroups
     (computePassEncoder : WGPUComputePassEncoder;
      workgroupCountX : T_UInt32;
      workgroupCountY : T_UInt32;
      workgroupCountZ : T_UInt32)  -- webgpu.h:4030
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePassEncoderDispatchWorkgroups";

   procedure wgpuComputePassEncoderDispatchWorkgroupsIndirect
     (computePassEncoder : WGPUComputePassEncoder;
      indirectBuffer : WGPUBuffer;
      indirectOffset : T_UInt64)  -- webgpu.h:4031
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePassEncoderDispatchWorkgroupsIndirect";

   procedure wgpuComputePassEncoderEnd (computePassEncoder : WGPUComputePassEncoder)  -- webgpu.h:4032
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePassEncoderEnd";

   procedure wgpuComputePassEncoderInsertDebugMarker (computePassEncoder : WGPUComputePassEncoder; markerLabel : T_WGPUStringView)  -- webgpu.h:4033
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePassEncoderInsertDebugMarker";

   procedure wgpuComputePassEncoderPopDebugGroup (computePassEncoder : WGPUComputePassEncoder)  -- webgpu.h:4034
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePassEncoderPopDebugGroup";

   procedure wgpuComputePassEncoderPushDebugGroup (computePassEncoder : WGPUComputePassEncoder; groupLabel : T_WGPUStringView)  -- webgpu.h:4035
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePassEncoderPushDebugGroup";

   procedure wgpuComputePassEncoderSetBindGroup
     (computePassEncoder : WGPUComputePassEncoder;
      groupIndex : T_UInt32;
      group : WGPUBindGroup;
      dynamicOffsetCount : T_Size;
      dynamicOffsets : access T_UInt32)  -- webgpu.h:4036
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePassEncoderSetBindGroup";

   procedure wgpuComputePassEncoderSetLabel (computePassEncoder : WGPUComputePassEncoder; label : T_WGPUStringView)  -- webgpu.h:4037
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePassEncoderSetLabel";

   procedure wgpuComputePassEncoderSetPipeline (computePassEncoder : WGPUComputePassEncoder; pipeline : WGPUComputePipeline)  -- webgpu.h:4038
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePassEncoderSetPipeline";

   procedure wgpuComputePassEncoderWriteTimestamp
     (computePassEncoder : WGPUComputePassEncoder;
      querySet : WGPUQuerySet;
      queryIndex : T_UInt32)  -- webgpu.h:4039
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePassEncoderWriteTimestamp";

   procedure wgpuComputePassEncoderAddRef (computePassEncoder : WGPUComputePassEncoder)  -- webgpu.h:4040
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePassEncoderAddRef";

   procedure wgpuComputePassEncoderRelease (computePassEncoder : WGPUComputePassEncoder)  -- webgpu.h:4041
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePassEncoderRelease";

  -- Methods of ComputePipeline
   function wgpuComputePipelineGetBindGroupLayout (computePipeline : WGPUComputePipeline; groupIndex : T_UInt32) return WGPUBindGroupLayout  -- webgpu.h:4044
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePipelineGetBindGroupLayout";

   procedure wgpuComputePipelineSetLabel (computePipeline : WGPUComputePipeline; label : T_WGPUStringView)  -- webgpu.h:4045
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePipelineSetLabel";

   procedure wgpuComputePipelineAddRef (computePipeline : WGPUComputePipeline)  -- webgpu.h:4046
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePipelineAddRef";

   procedure wgpuComputePipelineRelease (computePipeline : WGPUComputePipeline)  -- webgpu.h:4047
   with Import => True,
        Convention => C,
        External_Name => "wgpuComputePipelineRelease";

  -- Methods of Device
   function wgpuDeviceCreateBindGroup (device : T_WGPUDevice; descriptor : access constant WGPUBindGroupDescriptor) return WGPUBindGroup  -- webgpu.h:4050
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateBindGroup";

   function wgpuDeviceCreateBindGroupLayout (device : T_WGPUDevice; descriptor : access constant WGPUBindGroupLayoutDescriptor) return WGPUBindGroupLayout  -- webgpu.h:4051
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateBindGroupLayout";

   function wgpuDeviceCreateBuffer (device : T_WGPUDevice; descriptor : access constant WGPUBufferDescriptor) return WGPUBuffer  -- webgpu.h:4052
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateBuffer";

   function wgpuDeviceCreateCommandEncoder (device : T_WGPUDevice; descriptor : access constant T_WGPUCommandEncoderDescriptor) return T_WGPUCommandEncoder  -- webgpu.h:4053
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateCommandEncoder";

   function wgpuDeviceCreateComputePipeline (device : T_WGPUDevice; descriptor : access constant WGPUComputePipelineDescriptor) return WGPUComputePipeline  -- webgpu.h:4054
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateComputePipeline";

   procedure wgpuDeviceCreateComputePipelineAsync
     (device : T_WGPUDevice;
      descriptor : access constant WGPUComputePipelineDescriptor;
      callback : WGPUCreateComputePipelineAsyncCallback;
      userdata : T_Address)  -- webgpu.h:4055
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateComputePipelineAsync";

   function wgpuDeviceCreateComputePipelineAsync2
     (device : T_WGPUDevice;
      descriptor : access constant WGPUComputePipelineDescriptor;
      callbackInfo : WGPUCreateComputePipelineAsyncCallbackInfo2) return WGPUFuture  -- webgpu.h:4056
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateComputePipelineAsync2";

   function wgpuDeviceCreateComputePipelineAsyncF
     (device : T_WGPUDevice;
      descriptor : access constant WGPUComputePipelineDescriptor;
      callbackInfo : WGPUCreateComputePipelineAsyncCallbackInfo) return WGPUFuture  -- webgpu.h:4057
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateComputePipelineAsyncF";

   function wgpuDeviceCreateErrorBuffer (device : T_WGPUDevice; descriptor : access constant WGPUBufferDescriptor) return WGPUBuffer  -- webgpu.h:4058
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateErrorBuffer";

   function wgpuDeviceCreateErrorExternalTexture (device : T_WGPUDevice) return WGPUExternalTexture  -- webgpu.h:4059
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateErrorExternalTexture";

   function wgpuDeviceCreateErrorShaderModule
     (device : T_WGPUDevice;
      descriptor : access constant WGPUShaderModuleDescriptor;
      errorMessage : T_WGPUStringView) return WGPUShaderModule  -- webgpu.h:4060
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateErrorShaderModule";

   function wgpuDeviceCreateErrorTexture (device : T_WGPUDevice; descriptor : access constant WGPUTextureDescriptor) return WGPUTexture  -- webgpu.h:4061
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateErrorTexture";

   function wgpuDeviceCreateExternalTexture (device : T_WGPUDevice; externalTextureDescriptor : access constant WGPUExternalTextureDescriptor) return WGPUExternalTexture  -- webgpu.h:4062
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateExternalTexture";

   function wgpuDeviceCreatePipelineLayout (device : T_WGPUDevice; descriptor : access constant WGPUPipelineLayoutDescriptor) return WGPUPipelineLayout  -- webgpu.h:4063
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreatePipelineLayout";

   function wgpuDeviceCreateQuerySet (device : T_WGPUDevice; descriptor : access constant WGPUQuerySetDescriptor) return WGPUQuerySet  -- webgpu.h:4064
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateQuerySet";

   function wgpuDeviceCreateRenderBundleEncoder (device : T_WGPUDevice; descriptor : access constant WGPURenderBundleEncoderDescriptor) return WGPURenderBundleEncoder  -- webgpu.h:4065
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateRenderBundleEncoder";

   function wgpuDeviceCreateRenderPipeline (device : T_WGPUDevice; descriptor : access constant WGPURenderPipelineDescriptor) return WGPURenderPipeline  -- webgpu.h:4066
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateRenderPipeline";

   procedure wgpuDeviceCreateRenderPipelineAsync
     (device : T_WGPUDevice;
      descriptor : access constant WGPURenderPipelineDescriptor;
      callback : WGPUCreateRenderPipelineAsyncCallback;
      userdata : T_Address)  -- webgpu.h:4067
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateRenderPipelineAsync";

   function wgpuDeviceCreateRenderPipelineAsync2
     (device : T_WGPUDevice;
      descriptor : access constant WGPURenderPipelineDescriptor;
      callbackInfo : WGPUCreateRenderPipelineAsyncCallbackInfo2) return WGPUFuture  -- webgpu.h:4068
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateRenderPipelineAsync2";

   function wgpuDeviceCreateRenderPipelineAsyncF
     (device : T_WGPUDevice;
      descriptor : access constant WGPURenderPipelineDescriptor;
      callbackInfo : WGPUCreateRenderPipelineAsyncCallbackInfo) return WGPUFuture  -- webgpu.h:4069
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateRenderPipelineAsyncF";

   function wgpuDeviceCreateSampler (device : T_WGPUDevice; descriptor : access constant WGPUSamplerDescriptor) return WGPUSampler  -- webgpu.h:4070
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateSampler";

   function wgpuDeviceCreateShaderModule (device : T_WGPUDevice; descriptor : access constant WGPUShaderModuleDescriptor) return WGPUShaderModule  -- webgpu.h:4071
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateShaderModule";

   function wgpuDeviceCreateTexture (device : T_WGPUDevice; descriptor : access constant WGPUTextureDescriptor) return WGPUTexture  -- webgpu.h:4072
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceCreateTexture";

   procedure wgpuDeviceDestroy (device : T_WGPUDevice)  -- webgpu.h:4073
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceDestroy";

   function wgpuDeviceEnumerateFeatures (device : T_WGPUDevice; features : access T_Feature_Name) return T_Size  -- webgpu.h:4074
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceEnumerateFeatures";

   procedure wgpuDeviceForceLoss
     (device : T_WGPUDevice;
      c_type : T_Device_Lost_Reason;
      message : T_WGPUStringView)  -- webgpu.h:4075
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceForceLoss";

   function wgpuDeviceGetAHardwareBufferProperties
     (device : T_WGPUDevice;
      handle : T_Address;
      properties : access WGPUAHardwareBufferProperties) return T_Status  -- webgpu.h:4076
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceGetAHardwareBufferProperties";

   function wgpuDeviceGetAdapter (device : T_WGPUDevice) return T_WGPUAdapter  -- webgpu.h:4077
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceGetAdapter";

   procedure wgpuDeviceGetFeatures (device : T_WGPUDevice; features : access WGPUSupportedFeatures)  -- webgpu.h:4078
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceGetFeatures";

   function wgpuDeviceGetLimits (device : T_WGPUDevice; limits : access T_WGPUSupportedLimits) return T_Status  -- webgpu.h:4079
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceGetLimits";

   function wgpuDeviceGetLostFuture (device : T_WGPUDevice) return WGPUFuture  -- webgpu.h:4080
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceGetLostFuture";

   function wgpuDeviceGetQueue (device : T_WGPUDevice) return T_WGPUQueue  -- webgpu.h:4081
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceGetQueue";

   function wgpuDeviceHasFeature (device : T_WGPUDevice; feature : T_Feature_Name) return T_WGPUBool  -- webgpu.h:4082
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceHasFeature";

   function wgpuDeviceImportSharedBufferMemory (device : T_WGPUDevice; descriptor : access constant WGPUSharedBufferMemoryDescriptor) return WGPUSharedBufferMemory  -- webgpu.h:4083
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceImportSharedBufferMemory";

   function wgpuDeviceImportSharedFence (device : T_WGPUDevice; descriptor : access constant WGPUSharedFenceDescriptor) return WGPUSharedFence  -- webgpu.h:4084
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceImportSharedFence";

   function wgpuDeviceImportSharedTextureMemory (device : T_WGPUDevice; descriptor : access constant WGPUSharedTextureMemoryDescriptor) return WGPUSharedTextureMemory  -- webgpu.h:4085
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceImportSharedTextureMemory";

   procedure wgpuDeviceInjectError
     (device : T_WGPUDevice;
      c_type : T_Error_Kind;
      message : T_WGPUStringView)  -- webgpu.h:4086
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceInjectError";

   procedure wgpuDevicePopErrorScope
     (device : T_WGPUDevice;
      oldCallback : T_WGPUErrorCallback;
      userdata : T_Address)  -- webgpu.h:4087
   with Import => True,
        Convention => C,
        External_Name => "wgpuDevicePopErrorScope";

   function wgpuDevicePopErrorScope2 (device : T_WGPUDevice; callbackInfo : WGPUPopErrorScopeCallbackInfo2) return WGPUFuture  -- webgpu.h:4088
   with Import => True,
        Convention => C,
        External_Name => "wgpuDevicePopErrorScope2";

   function wgpuDevicePopErrorScopeF (device : T_WGPUDevice; callbackInfo : WGPUPopErrorScopeCallbackInfo) return WGPUFuture  -- webgpu.h:4089
   with Import => True,
        Convention => C,
        External_Name => "wgpuDevicePopErrorScopeF";

   procedure wgpuDevicePushErrorScope (device : T_WGPUDevice; filter : WGPUErrorFilter)  -- webgpu.h:4090
   with Import => True,
        Convention => C,
        External_Name => "wgpuDevicePushErrorScope";

   procedure wgpuDeviceSetDeviceLostCallback
     (device : T_WGPUDevice;
      callback : T_WGPUDeviceLostCallback_DEPRECATED;
      userdata : T_Address)  -- webgpu.h:4091
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceSetDeviceLostCallback";

   procedure wgpuDeviceSetLabel (device : T_WGPUDevice; label : T_WGPUStringView)  -- webgpu.h:4092
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceSetLabel";

   procedure wgpuDeviceSetLoggingCallback
     (device : T_WGPUDevice;
      callback : WGPULoggingCallback;
      userdata : T_Address)  -- webgpu.h:4093
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceSetLoggingCallback";

   procedure wgpuDeviceSetUncapturedErrorCallback
     (device : T_WGPUDevice;
      callback : T_WGPUErrorCallback;
      userdata : T_Address)  -- webgpu.h:4094
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceSetUncapturedErrorCallback";

   procedure wgpuDeviceTick (device : T_WGPUDevice)  -- webgpu.h:4095
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceTick";

   procedure wgpuDeviceValidateTextureDescriptor (device : T_WGPUDevice; descriptor : access constant WGPUTextureDescriptor)  -- webgpu.h:4096
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceValidateTextureDescriptor";

   procedure wgpuDeviceAddRef (device : T_WGPUDevice)  -- webgpu.h:4097
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceAddRef";

   procedure wgpuDeviceRelease (device : T_WGPUDevice)  -- webgpu.h:4098
   with Import => True,
        Convention => C,
        External_Name => "wgpuDeviceRelease";

  -- Methods of ExternalTexture
   procedure wgpuExternalTextureDestroy (externalTexture : WGPUExternalTexture)  -- webgpu.h:4101
   with Import => True,
        Convention => C,
        External_Name => "wgpuExternalTextureDestroy";

   procedure wgpuExternalTextureExpire (externalTexture : WGPUExternalTexture)  -- webgpu.h:4102
   with Import => True,
        Convention => C,
        External_Name => "wgpuExternalTextureExpire";

   procedure wgpuExternalTextureRefresh (externalTexture : WGPUExternalTexture)  -- webgpu.h:4103
   with Import => True,
        Convention => C,
        External_Name => "wgpuExternalTextureRefresh";

   procedure wgpuExternalTextureSetLabel (externalTexture : WGPUExternalTexture; label : T_WGPUStringView)  -- webgpu.h:4104
   with Import => True,
        Convention => C,
        External_Name => "wgpuExternalTextureSetLabel";

   procedure wgpuExternalTextureAddRef (externalTexture : WGPUExternalTexture)  -- webgpu.h:4105
   with Import => True,
        Convention => C,
        External_Name => "wgpuExternalTextureAddRef";

   procedure wgpuExternalTextureRelease (externalTexture : WGPUExternalTexture)  -- webgpu.h:4106
   with Import => True,
        Convention => C,
        External_Name => "wgpuExternalTextureRelease";

  -- Methods of Instance
   function wgpuInstanceCreateSurface (instance : T_WGPUInstance; descriptor : access constant WGPUSurfaceDescriptor) return T_WGPUSurface  -- webgpu.h:4109
   with Import => True,
        Convention => C,
        External_Name => "wgpuInstanceCreateSurface";

   function wgpuInstanceEnumerateWGSLLanguageFeatures (instance : T_WGPUInstance; features : access WGPUWGSLFeatureName) return T_Size  -- webgpu.h:4110
   with Import => True,
        Convention => C,
        External_Name => "wgpuInstanceEnumerateWGSLLanguageFeatures";

   function wgpuInstanceHasWGSLLanguageFeature (instance : T_WGPUInstance; feature : WGPUWGSLFeatureName) return T_WGPUBool  -- webgpu.h:4111
   with Import => True,
        Convention => C,
        External_Name => "wgpuInstanceHasWGSLLanguageFeature";

   procedure wgpuInstanceProcessEvents (instance : T_WGPUInstance)  -- webgpu.h:4112
   with Import => True,
        Convention => C,
        External_Name => "wgpuInstanceProcessEvents";

   procedure wgpuInstanceRequestAdapter
     (instance : T_WGPUInstance;
      options : access constant T_WGPURequestAdapterOptions;
      callback : WGPURequestAdapterCallback;
      userdata : T_Address)  -- webgpu.h:4113
   with Import => True,
        Convention => C,
        External_Name => "wgpuInstanceRequestAdapter";

   function wgpuInstanceRequestAdapter2
     (instance : T_WGPUInstance;
      options : access constant T_WGPURequestAdapterOptions;
      callbackInfo : WGPURequestAdapterCallbackInfo2) return WGPUFuture  -- webgpu.h:4114
   with Import => True,
        Convention => C,
        External_Name => "wgpuInstanceRequestAdapter2";

   function wgpuInstanceRequestAdapterF
     (instance : T_WGPUInstance;
      options : access constant T_WGPURequestAdapterOptions;
      callbackInfo : WGPURequestAdapterCallbackInfo) return WGPUFuture  -- webgpu.h:4115
   with Import => True,
        Convention => C,
        External_Name => "wgpuInstanceRequestAdapterF";

   function wgpuInstanceWaitAny
     (instance : T_WGPUInstance;
      futureCount : T_Size;
      futures : access WGPUFutureWaitInfo;
      timeoutNS : T_UInt64) return WGPUWaitStatus  -- webgpu.h:4116
   with Import => True,
        Convention => C,
        External_Name => "wgpuInstanceWaitAny";

   procedure wgpuInstanceAddRef (instance : T_WGPUInstance)  -- webgpu.h:4117
   with Import => True,
        Convention => C,
        External_Name => "wgpuInstanceAddRef";

   procedure wgpuInstanceRelease (instance : T_WGPUInstance)  -- webgpu.h:4118
   with Import => True,
        Convention => C,
        External_Name => "wgpuInstanceRelease";

  -- Methods of PipelineLayout
   procedure wgpuPipelineLayoutSetLabel (pipelineLayout : WGPUPipelineLayout; label : T_WGPUStringView)  -- webgpu.h:4121
   with Import => True,
        Convention => C,
        External_Name => "wgpuPipelineLayoutSetLabel";

   procedure wgpuPipelineLayoutAddRef (pipelineLayout : WGPUPipelineLayout)  -- webgpu.h:4122
   with Import => True,
        Convention => C,
        External_Name => "wgpuPipelineLayoutAddRef";

   procedure wgpuPipelineLayoutRelease (pipelineLayout : WGPUPipelineLayout)  -- webgpu.h:4123
   with Import => True,
        Convention => C,
        External_Name => "wgpuPipelineLayoutRelease";

  -- Methods of QuerySet
   procedure wgpuQuerySetDestroy (querySet : WGPUQuerySet)  -- webgpu.h:4126
   with Import => True,
        Convention => C,
        External_Name => "wgpuQuerySetDestroy";

   function wgpuQuerySetGetCount (querySet : WGPUQuerySet) return T_UInt32  -- webgpu.h:4127
   with Import => True,
        Convention => C,
        External_Name => "wgpuQuerySetGetCount";

   function wgpuQuerySetGetType (querySet : WGPUQuerySet) return WGPUQueryType  -- webgpu.h:4128
   with Import => True,
        Convention => C,
        External_Name => "wgpuQuerySetGetType";

   procedure wgpuQuerySetSetLabel (querySet : WGPUQuerySet; label : T_WGPUStringView)  -- webgpu.h:4129
   with Import => True,
        Convention => C,
        External_Name => "wgpuQuerySetSetLabel";

   procedure wgpuQuerySetAddRef (querySet : WGPUQuerySet)  -- webgpu.h:4130
   with Import => True,
        Convention => C,
        External_Name => "wgpuQuerySetAddRef";

   procedure wgpuQuerySetRelease (querySet : WGPUQuerySet)  -- webgpu.h:4131
   with Import => True,
        Convention => C,
        External_Name => "wgpuQuerySetRelease";

  -- Methods of Queue
   procedure wgpuQueueCopyExternalTextureForBrowser
     (queue : T_WGPUQueue;
      source : access constant WGPUImageCopyExternalTexture;
      destination : access constant WGPUImageCopyTexture;
      copySize : access constant WGPUExtent3D;
      options : access constant WGPUCopyTextureForBrowserOptions)  -- webgpu.h:4134
   with Import => True,
        Convention => C,
        External_Name => "wgpuQueueCopyExternalTextureForBrowser";

   procedure wgpuQueueCopyTextureForBrowser
     (queue : T_WGPUQueue;
      source : access constant WGPUImageCopyTexture;
      destination : access constant WGPUImageCopyTexture;
      copySize : access constant WGPUExtent3D;
      options : access constant WGPUCopyTextureForBrowserOptions)  -- webgpu.h:4135
   with Import => True,
        Convention => C,
        External_Name => "wgpuQueueCopyTextureForBrowser";

   procedure wgpuQueueOnSubmittedWorkDone
     (queue : T_WGPUQueue;
      callback : WGPUQueueWorkDoneCallback;
      userdata : T_Address)  -- webgpu.h:4136
   with Import => True,
        Convention => C,
        External_Name => "wgpuQueueOnSubmittedWorkDone";

   function wgpuQueueOnSubmittedWorkDone2 (queue : T_WGPUQueue; callbackInfo : WGPUQueueWorkDoneCallbackInfo2) return WGPUFuture  -- webgpu.h:4137
   with Import => True,
        Convention => C,
        External_Name => "wgpuQueueOnSubmittedWorkDone2";

   function wgpuQueueOnSubmittedWorkDoneF (queue : T_WGPUQueue; callbackInfo : WGPUQueueWorkDoneCallbackInfo) return WGPUFuture  -- webgpu.h:4138
   with Import => True,
        Convention => C,
        External_Name => "wgpuQueueOnSubmittedWorkDoneF";

   procedure wgpuQueueSetLabel (queue : T_WGPUQueue; label : T_WGPUStringView)  -- webgpu.h:4139
   with Import => True,
        Convention => C,
        External_Name => "wgpuQueueSetLabel";

   procedure wgpuQueueSubmit
     (queue : T_WGPUQueue;
      commandCount : T_Size;
      commands : T_Address)  -- webgpu.h:4140
   with Import => True,
        Convention => C,
        External_Name => "wgpuQueueSubmit";

   procedure wgpuQueueWriteBuffer
     (queue : T_WGPUQueue;
      buffer : WGPUBuffer;
      bufferOffset : T_UInt64;
      data : T_Address;
      size : T_Size)  -- webgpu.h:4141
   with Import => True,
        Convention => C,
        External_Name => "wgpuQueueWriteBuffer";

   procedure wgpuQueueWriteTexture
     (queue : T_WGPUQueue;
      destination : access constant WGPUImageCopyTexture;
      data : T_Address;
      dataSize : T_Size;
      dataLayout : access constant WGPUTextureDataLayout;
      writeSize : access constant WGPUExtent3D)  -- webgpu.h:4142
   with Import => True,
        Convention => C,
        External_Name => "wgpuQueueWriteTexture";

   procedure wgpuQueueAddRef (queue : T_WGPUQueue)  -- webgpu.h:4143
   with Import => True,
        Convention => C,
        External_Name => "wgpuQueueAddRef";

   procedure wgpuQueueRelease (queue : T_WGPUQueue)  -- webgpu.h:4144
   with Import => True,
        Convention => C,
        External_Name => "wgpuQueueRelease";

  -- Methods of RenderBundle
   procedure wgpuRenderBundleSetLabel (renderBundle : WGPURenderBundle; label : T_WGPUStringView)  -- webgpu.h:4147
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleSetLabel";

   procedure wgpuRenderBundleAddRef (renderBundle : WGPURenderBundle)  -- webgpu.h:4148
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleAddRef";

   procedure wgpuRenderBundleRelease (renderBundle : WGPURenderBundle)  -- webgpu.h:4149
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleRelease";

  -- Methods of RenderBundleEncoder
   procedure wgpuRenderBundleEncoderDraw
     (renderBundleEncoder : WGPURenderBundleEncoder;
      vertexCount : T_UInt32;
      instanceCount : T_UInt32;
      firstVertex : T_UInt32;
      firstInstance : T_UInt32)  -- webgpu.h:4152
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderDraw";

   procedure wgpuRenderBundleEncoderDrawIndexed
     (renderBundleEncoder : WGPURenderBundleEncoder;
      indexCount : T_UInt32;
      instanceCount : T_UInt32;
      firstIndex : T_UInt32;
      baseVertex : bits_stdint_intn_h.int32_t;
      firstInstance : T_UInt32)  -- webgpu.h:4153
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderDrawIndexed";

   procedure wgpuRenderBundleEncoderDrawIndexedIndirect
     (renderBundleEncoder : WGPURenderBundleEncoder;
      indirectBuffer : WGPUBuffer;
      indirectOffset : T_UInt64)  -- webgpu.h:4154
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderDrawIndexedIndirect";

   procedure wgpuRenderBundleEncoderDrawIndirect
     (renderBundleEncoder : WGPURenderBundleEncoder;
      indirectBuffer : WGPUBuffer;
      indirectOffset : T_UInt64)  -- webgpu.h:4155
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderDrawIndirect";

   function wgpuRenderBundleEncoderFinish (renderBundleEncoder : WGPURenderBundleEncoder; descriptor : access constant WGPURenderBundleDescriptor) return WGPURenderBundle  -- webgpu.h:4156
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderFinish";

   procedure wgpuRenderBundleEncoderInsertDebugMarker (renderBundleEncoder : WGPURenderBundleEncoder; markerLabel : T_WGPUStringView)  -- webgpu.h:4157
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderInsertDebugMarker";

   procedure wgpuRenderBundleEncoderPopDebugGroup (renderBundleEncoder : WGPURenderBundleEncoder)  -- webgpu.h:4158
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderPopDebugGroup";

   procedure wgpuRenderBundleEncoderPushDebugGroup (renderBundleEncoder : WGPURenderBundleEncoder; groupLabel : T_WGPUStringView)  -- webgpu.h:4159
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderPushDebugGroup";

   procedure wgpuRenderBundleEncoderSetBindGroup
     (renderBundleEncoder : WGPURenderBundleEncoder;
      groupIndex : T_UInt32;
      group : WGPUBindGroup;
      dynamicOffsetCount : T_Size;
      dynamicOffsets : access T_UInt32)  -- webgpu.h:4160
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderSetBindGroup";

   procedure wgpuRenderBundleEncoderSetIndexBuffer
     (renderBundleEncoder : WGPURenderBundleEncoder;
      buffer : WGPUBuffer;
      format : WGPUIndexFormat;
      offset : T_UInt64;
      size : T_UInt64)  -- webgpu.h:4161
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderSetIndexBuffer";

   procedure wgpuRenderBundleEncoderSetLabel (renderBundleEncoder : WGPURenderBundleEncoder; label : T_WGPUStringView)  -- webgpu.h:4162
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderSetLabel";

   procedure wgpuRenderBundleEncoderSetPipeline (renderBundleEncoder : WGPURenderBundleEncoder; pipeline : WGPURenderPipeline)  -- webgpu.h:4163
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderSetPipeline";

   procedure wgpuRenderBundleEncoderSetVertexBuffer
     (renderBundleEncoder : WGPURenderBundleEncoder;
      slot : T_UInt32;
      buffer : WGPUBuffer;
      offset : T_UInt64;
      size : T_UInt64)  -- webgpu.h:4164
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderSetVertexBuffer";

   procedure wgpuRenderBundleEncoderAddRef (renderBundleEncoder : WGPURenderBundleEncoder)  -- webgpu.h:4165
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderAddRef";

   procedure wgpuRenderBundleEncoderRelease (renderBundleEncoder : WGPURenderBundleEncoder)  -- webgpu.h:4166
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderBundleEncoderRelease";

  -- Methods of RenderPassEncoder
   procedure wgpuRenderPassEncoderBeginOcclusionQuery (renderPassEncoder : WGPURenderPassEncoder; queryIndex : T_UInt32)  -- webgpu.h:4169
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderBeginOcclusionQuery";

   procedure wgpuRenderPassEncoderDraw
     (renderPassEncoder : WGPURenderPassEncoder;
      vertexCount : T_UInt32;
      instanceCount : T_UInt32;
      firstVertex : T_UInt32;
      firstInstance : T_UInt32)  -- webgpu.h:4170
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderDraw";

   procedure wgpuRenderPassEncoderDrawIndexed
     (renderPassEncoder : WGPURenderPassEncoder;
      indexCount : T_UInt32;
      instanceCount : T_UInt32;
      firstIndex : T_UInt32;
      baseVertex : bits_stdint_intn_h.int32_t;
      firstInstance : T_UInt32)  -- webgpu.h:4171
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderDrawIndexed";

   procedure wgpuRenderPassEncoderDrawIndexedIndirect
     (renderPassEncoder : WGPURenderPassEncoder;
      indirectBuffer : WGPUBuffer;
      indirectOffset : T_UInt64)  -- webgpu.h:4172
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderDrawIndexedIndirect";

   procedure wgpuRenderPassEncoderDrawIndirect
     (renderPassEncoder : WGPURenderPassEncoder;
      indirectBuffer : WGPUBuffer;
      indirectOffset : T_UInt64)  -- webgpu.h:4173
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderDrawIndirect";

   procedure wgpuRenderPassEncoderEnd (renderPassEncoder : WGPURenderPassEncoder)  -- webgpu.h:4174
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderEnd";

   procedure wgpuRenderPassEncoderEndOcclusionQuery (renderPassEncoder : WGPURenderPassEncoder)  -- webgpu.h:4175
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderEndOcclusionQuery";

   procedure wgpuRenderPassEncoderExecuteBundles
     (renderPassEncoder : WGPURenderPassEncoder;
      bundleCount : T_Size;
      bundles : T_Address)  -- webgpu.h:4176
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderExecuteBundles";

   procedure wgpuRenderPassEncoderInsertDebugMarker (renderPassEncoder : WGPURenderPassEncoder; markerLabel : T_WGPUStringView)  -- webgpu.h:4177
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderInsertDebugMarker";

   procedure wgpuRenderPassEncoderMultiDrawIndexedIndirect
     (renderPassEncoder : WGPURenderPassEncoder;
      indirectBuffer : WGPUBuffer;
      indirectOffset : T_UInt64;
      maxDrawCount : T_UInt32;
      drawCountBuffer : WGPUBuffer;
      drawCountBufferOffset : T_UInt64)  -- webgpu.h:4178
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderMultiDrawIndexedIndirect";

   procedure wgpuRenderPassEncoderMultiDrawIndirect
     (renderPassEncoder : WGPURenderPassEncoder;
      indirectBuffer : WGPUBuffer;
      indirectOffset : T_UInt64;
      maxDrawCount : T_UInt32;
      drawCountBuffer : WGPUBuffer;
      drawCountBufferOffset : T_UInt64)  -- webgpu.h:4179
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderMultiDrawIndirect";

   procedure wgpuRenderPassEncoderPixelLocalStorageBarrier (renderPassEncoder : WGPURenderPassEncoder)  -- webgpu.h:4180
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderPixelLocalStorageBarrier";

   procedure wgpuRenderPassEncoderPopDebugGroup (renderPassEncoder : WGPURenderPassEncoder)  -- webgpu.h:4181
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderPopDebugGroup";

   procedure wgpuRenderPassEncoderPushDebugGroup (renderPassEncoder : WGPURenderPassEncoder; groupLabel : T_WGPUStringView)  -- webgpu.h:4182
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderPushDebugGroup";

   procedure wgpuRenderPassEncoderSetBindGroup
     (renderPassEncoder : WGPURenderPassEncoder;
      groupIndex : T_UInt32;
      group : WGPUBindGroup;
      dynamicOffsetCount : T_Size;
      dynamicOffsets : access T_UInt32)  -- webgpu.h:4183
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderSetBindGroup";

   procedure wgpuRenderPassEncoderSetBlendConstant (renderPassEncoder : WGPURenderPassEncoder; color : access constant WGPUColor)  -- webgpu.h:4184
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderSetBlendConstant";

   procedure wgpuRenderPassEncoderSetIndexBuffer
     (renderPassEncoder : WGPURenderPassEncoder;
      buffer : WGPUBuffer;
      format : WGPUIndexFormat;
      offset : T_UInt64;
      size : T_UInt64)  -- webgpu.h:4185
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderSetIndexBuffer";

   procedure wgpuRenderPassEncoderSetLabel (renderPassEncoder : WGPURenderPassEncoder; label : T_WGPUStringView)  -- webgpu.h:4186
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderSetLabel";

   procedure wgpuRenderPassEncoderSetPipeline (renderPassEncoder : WGPURenderPassEncoder; pipeline : WGPURenderPipeline)  -- webgpu.h:4187
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderSetPipeline";

   procedure wgpuRenderPassEncoderSetScissorRect
     (renderPassEncoder : WGPURenderPassEncoder;
      x : T_UInt32;
      y : T_UInt32;
      width : T_UInt32;
      height : T_UInt32)  -- webgpu.h:4188
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderSetScissorRect";

   procedure wgpuRenderPassEncoderSetStencilReference (renderPassEncoder : WGPURenderPassEncoder; reference : T_UInt32)  -- webgpu.h:4189
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderSetStencilReference";

   procedure wgpuRenderPassEncoderSetVertexBuffer
     (renderPassEncoder : WGPURenderPassEncoder;
      slot : T_UInt32;
      buffer : WGPUBuffer;
      offset : T_UInt64;
      size : T_UInt64)  -- webgpu.h:4190
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderSetVertexBuffer";

   procedure wgpuRenderPassEncoderSetViewport
     (renderPassEncoder : WGPURenderPassEncoder;
      x : float;
      y : float;
      width : float;
      height : float;
      minDepth : float;
      maxDepth : float)  -- webgpu.h:4191
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderSetViewport";

   procedure wgpuRenderPassEncoderWriteTimestamp
     (renderPassEncoder : WGPURenderPassEncoder;
      querySet : WGPUQuerySet;
      queryIndex : T_UInt32)  -- webgpu.h:4192
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderWriteTimestamp";

   procedure wgpuRenderPassEncoderAddRef (renderPassEncoder : WGPURenderPassEncoder)  -- webgpu.h:4193
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderAddRef";

   procedure wgpuRenderPassEncoderRelease (renderPassEncoder : WGPURenderPassEncoder)  -- webgpu.h:4194
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPassEncoderRelease";

  -- Methods of RenderPipeline
   function wgpuRenderPipelineGetBindGroupLayout (renderPipeline : WGPURenderPipeline; groupIndex : T_UInt32) return WGPUBindGroupLayout  -- webgpu.h:4197
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPipelineGetBindGroupLayout";

   procedure wgpuRenderPipelineSetLabel (renderPipeline : WGPURenderPipeline; label : T_WGPUStringView)  -- webgpu.h:4198
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPipelineSetLabel";

   procedure wgpuRenderPipelineAddRef (renderPipeline : WGPURenderPipeline)  -- webgpu.h:4199
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPipelineAddRef";

   procedure wgpuRenderPipelineRelease (renderPipeline : WGPURenderPipeline)  -- webgpu.h:4200
   with Import => True,
        Convention => C,
        External_Name => "wgpuRenderPipelineRelease";

  -- Methods of Sampler
   procedure wgpuSamplerSetLabel (sampler : WGPUSampler; label : T_WGPUStringView)  -- webgpu.h:4203
   with Import => True,
        Convention => C,
        External_Name => "wgpuSamplerSetLabel";

   procedure wgpuSamplerAddRef (sampler : WGPUSampler)  -- webgpu.h:4204
   with Import => True,
        Convention => C,
        External_Name => "wgpuSamplerAddRef";

   procedure wgpuSamplerRelease (sampler : WGPUSampler)  -- webgpu.h:4205
   with Import => True,
        Convention => C,
        External_Name => "wgpuSamplerRelease";

  -- Methods of ShaderModule
   procedure wgpuShaderModuleGetCompilationInfo
     (shaderModule : WGPUShaderModule;
      callback : WGPUCompilationInfoCallback;
      userdata : T_Address)  -- webgpu.h:4208
   with Import => True,
        Convention => C,
        External_Name => "wgpuShaderModuleGetCompilationInfo";

   function wgpuShaderModuleGetCompilationInfo2 (shaderModule : WGPUShaderModule; callbackInfo : WGPUCompilationInfoCallbackInfo2) return WGPUFuture  -- webgpu.h:4209
   with Import => True,
        Convention => C,
        External_Name => "wgpuShaderModuleGetCompilationInfo2";

   function wgpuShaderModuleGetCompilationInfoF (shaderModule : WGPUShaderModule; callbackInfo : WGPUCompilationInfoCallbackInfo) return WGPUFuture  -- webgpu.h:4210
   with Import => True,
        Convention => C,
        External_Name => "wgpuShaderModuleGetCompilationInfoF";

   procedure wgpuShaderModuleSetLabel (shaderModule : WGPUShaderModule; label : T_WGPUStringView)  -- webgpu.h:4211
   with Import => True,
        Convention => C,
        External_Name => "wgpuShaderModuleSetLabel";

   procedure wgpuShaderModuleAddRef (shaderModule : WGPUShaderModule)  -- webgpu.h:4212
   with Import => True,
        Convention => C,
        External_Name => "wgpuShaderModuleAddRef";

   procedure wgpuShaderModuleRelease (shaderModule : WGPUShaderModule)  -- webgpu.h:4213
   with Import => True,
        Convention => C,
        External_Name => "wgpuShaderModuleRelease";

  -- Methods of SharedBufferMemory
   function wgpuSharedBufferMemoryBeginAccess
     (sharedBufferMemory : WGPUSharedBufferMemory;
      buffer : WGPUBuffer;
      descriptor : access constant WGPUSharedBufferMemoryBeginAccessDescriptor) return T_Status  -- webgpu.h:4216
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedBufferMemoryBeginAccess";

   function wgpuSharedBufferMemoryCreateBuffer (sharedBufferMemory : WGPUSharedBufferMemory; descriptor : access constant WGPUBufferDescriptor) return WGPUBuffer  -- webgpu.h:4217
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedBufferMemoryCreateBuffer";

   function wgpuSharedBufferMemoryEndAccess
     (sharedBufferMemory : WGPUSharedBufferMemory;
      buffer : WGPUBuffer;
      descriptor : access WGPUSharedBufferMemoryEndAccessState) return T_Status  -- webgpu.h:4218
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedBufferMemoryEndAccess";

   function wgpuSharedBufferMemoryGetProperties (sharedBufferMemory : WGPUSharedBufferMemory; properties : access WGPUSharedBufferMemoryProperties) return T_Status  -- webgpu.h:4219
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedBufferMemoryGetProperties";

   function wgpuSharedBufferMemoryIsDeviceLost (sharedBufferMemory : WGPUSharedBufferMemory) return T_WGPUBool  -- webgpu.h:4220
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedBufferMemoryIsDeviceLost";

   procedure wgpuSharedBufferMemorySetLabel (sharedBufferMemory : WGPUSharedBufferMemory; label : T_WGPUStringView)  -- webgpu.h:4221
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedBufferMemorySetLabel";

   procedure wgpuSharedBufferMemoryAddRef (sharedBufferMemory : WGPUSharedBufferMemory)  -- webgpu.h:4222
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedBufferMemoryAddRef";

   procedure wgpuSharedBufferMemoryRelease (sharedBufferMemory : WGPUSharedBufferMemory)  -- webgpu.h:4223
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedBufferMemoryRelease";

  -- Methods of SharedFence
   procedure wgpuSharedFenceExportInfo (sharedFence : WGPUSharedFence; info : access T_WGPUSharedFenceExportInfo)  -- webgpu.h:4226
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedFenceExportInfo";

   procedure wgpuSharedFenceAddRef (sharedFence : WGPUSharedFence)  -- webgpu.h:4227
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedFenceAddRef";

   procedure wgpuSharedFenceRelease (sharedFence : WGPUSharedFence)  -- webgpu.h:4228
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedFenceRelease";

  -- Methods of SharedTextureMemory
   function wgpuSharedTextureMemoryBeginAccess
     (sharedTextureMemory : WGPUSharedTextureMemory;
      texture : WGPUTexture;
      descriptor : access constant WGPUSharedTextureMemoryBeginAccessDescriptor) return T_Status  -- webgpu.h:4231
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedTextureMemoryBeginAccess";

   function wgpuSharedTextureMemoryCreateTexture (sharedTextureMemory : WGPUSharedTextureMemory; descriptor : access constant WGPUTextureDescriptor) return WGPUTexture  -- webgpu.h:4232
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedTextureMemoryCreateTexture";

   function wgpuSharedTextureMemoryEndAccess
     (sharedTextureMemory : WGPUSharedTextureMemory;
      texture : WGPUTexture;
      descriptor : access WGPUSharedTextureMemoryEndAccessState) return T_Status  -- webgpu.h:4233
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedTextureMemoryEndAccess";

   function wgpuSharedTextureMemoryGetProperties (sharedTextureMemory : WGPUSharedTextureMemory; properties : access WGPUSharedTextureMemoryProperties) return T_Status  -- webgpu.h:4234
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedTextureMemoryGetProperties";

   function wgpuSharedTextureMemoryIsDeviceLost (sharedTextureMemory : WGPUSharedTextureMemory) return T_WGPUBool  -- webgpu.h:4235
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedTextureMemoryIsDeviceLost";

   procedure wgpuSharedTextureMemorySetLabel (sharedTextureMemory : WGPUSharedTextureMemory; label : T_WGPUStringView)  -- webgpu.h:4236
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedTextureMemorySetLabel";

   procedure wgpuSharedTextureMemoryAddRef (sharedTextureMemory : WGPUSharedTextureMemory)  -- webgpu.h:4237
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedTextureMemoryAddRef";

   procedure wgpuSharedTextureMemoryRelease (sharedTextureMemory : WGPUSharedTextureMemory)  -- webgpu.h:4238
   with Import => True,
        Convention => C,
        External_Name => "wgpuSharedTextureMemoryRelease";

  -- Methods of Surface
   procedure wgpuSurfaceConfigure (surface : T_WGPUSurface; config : access constant WGPUSurfaceConfiguration)  -- webgpu.h:4241
   with Import => True,
        Convention => C,
        External_Name => "wgpuSurfaceConfigure";

   function wgpuSurfaceGetCapabilities
     (surface : T_WGPUSurface;
      adapter : T_WGPUAdapter;
      capabilities : access WGPUSurfaceCapabilities) return T_Status  -- webgpu.h:4242
   with Import => True,
        Convention => C,
        External_Name => "wgpuSurfaceGetCapabilities";

   procedure wgpuSurfaceGetCurrentTexture (surface : T_WGPUSurface; surfaceTexture : access WGPUSurfaceTexture)  -- webgpu.h:4243
   with Import => True,
        Convention => C,
        External_Name => "wgpuSurfaceGetCurrentTexture";

   procedure wgpuSurfacePresent (surface : T_WGPUSurface)  -- webgpu.h:4244
   with Import => True,
        Convention => C,
        External_Name => "wgpuSurfacePresent";

   procedure wgpuSurfaceSetLabel (surface : T_WGPUSurface; label : T_WGPUStringView)  -- webgpu.h:4245
   with Import => True,
        Convention => C,
        External_Name => "wgpuSurfaceSetLabel";

   procedure wgpuSurfaceUnconfigure (surface : T_WGPUSurface)  -- webgpu.h:4246
   with Import => True,
        Convention => C,
        External_Name => "wgpuSurfaceUnconfigure";

   procedure wgpuSurfaceAddRef (surface : T_WGPUSurface)  -- webgpu.h:4247
   with Import => True,
        Convention => C,
        External_Name => "wgpuSurfaceAddRef";

   procedure wgpuSurfaceRelease (surface : T_WGPUSurface)  -- webgpu.h:4248
   with Import => True,
        Convention => C,
        External_Name => "wgpuSurfaceRelease";

  -- Methods of Texture
   function wgpuTextureCreateErrorView (texture : WGPUTexture; descriptor : access constant WGPUTextureViewDescriptor) return WGPUTextureView  -- webgpu.h:4251
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureCreateErrorView";

   function wgpuTextureCreateView (texture : WGPUTexture; descriptor : access constant WGPUTextureViewDescriptor) return WGPUTextureView  -- webgpu.h:4252
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureCreateView";

   procedure wgpuTextureDestroy (texture : WGPUTexture)  -- webgpu.h:4253
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureDestroy";

   function wgpuTextureGetDepthOrArrayLayers (texture : WGPUTexture) return T_UInt32  -- webgpu.h:4254
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureGetDepthOrArrayLayers";

   function wgpuTextureGetDimension (texture : WGPUTexture) return WGPUTextureDimension  -- webgpu.h:4255
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureGetDimension";

   function wgpuTextureGetFormat (texture : WGPUTexture) return WGPUTextureFormat  -- webgpu.h:4256
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureGetFormat";

   function wgpuTextureGetHeight (texture : WGPUTexture) return T_UInt32  -- webgpu.h:4257
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureGetHeight";

   function wgpuTextureGetMipLevelCount (texture : WGPUTexture) return T_UInt32  -- webgpu.h:4258
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureGetMipLevelCount";

   function wgpuTextureGetSampleCount (texture : WGPUTexture) return T_UInt32  -- webgpu.h:4259
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureGetSampleCount";

   function wgpuTextureGetUsage (texture : WGPUTexture) return WGPUTextureUsage  -- webgpu.h:4260
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureGetUsage";

   function wgpuTextureGetWidth (texture : WGPUTexture) return T_UInt32  -- webgpu.h:4261
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureGetWidth";

   procedure wgpuTextureSetLabel (texture : WGPUTexture; label : T_WGPUStringView)  -- webgpu.h:4262
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureSetLabel";

   procedure wgpuTextureAddRef (texture : WGPUTexture)  -- webgpu.h:4263
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureAddRef";

   procedure wgpuTextureRelease (texture : WGPUTexture)  -- webgpu.h:4264
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureRelease";

  -- Methods of TextureView
   procedure wgpuTextureViewSetLabel (textureView : WGPUTextureView; label : T_WGPUStringView)  -- webgpu.h:4267
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureViewSetLabel";

   procedure wgpuTextureViewAddRef (textureView : WGPUTextureView)  -- webgpu.h:4268
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureViewAddRef";

   procedure wgpuTextureViewRelease (textureView : WGPUTextureView)  -- webgpu.h:4269
   with Import => True,
        Convention => C,
        External_Name => "wgpuTextureViewRelease";

  -- extern "C"
end webgpu_h;

pragma Style_Checks (On);
pragma Warnings (On, "-gnatwu");
